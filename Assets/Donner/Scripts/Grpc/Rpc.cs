// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lnrpc {

  /// <summary>Holder for reflection information generated from rpc.proto</summary>
  public static partial class RpcReflection {

    #region Descriptor
    /// <summary>File descriptor for rpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglycGMucHJvdG8SBWxucnBjGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnBy",
            "b3RvIkEKDkdlblNlZWRSZXF1ZXN0EhkKEWFlemVlZF9wYXNzcGhyYXNlGAEg",
            "ASgMEhQKDHNlZWRfZW50cm9weRgCIAEoDCJICg9HZW5TZWVkUmVzcG9uc2US",
            "HAoUY2lwaGVyX3NlZWRfbW5lbW9uaWMYASADKAkSFwoPZW5jaXBoZXJlZF9z",
            "ZWVkGAIgASgMImUKEUluaXRXYWxsZXRSZXF1ZXN0EhcKD3dhbGxldF9wYXNz",
            "d29yZBgBIAEoDBIcChRjaXBoZXJfc2VlZF9tbmVtb25pYxgCIAMoCRIZChFh",
            "ZXplZWRfcGFzc3BocmFzZRgDIAEoDCIUChJJbml0V2FsbGV0UmVzcG9uc2Ui",
            "LgoTVW5sb2NrV2FsbGV0UmVxdWVzdBIXCg93YWxsZXRfcGFzc3dvcmQYASAB",
            "KAwiFgoUVW5sb2NrV2FsbGV0UmVzcG9uc2UimQIKC1RyYW5zYWN0aW9uEhgK",
            "B3R4X2hhc2gYASABKAlSB3R4X2hhc2gSFgoGYW1vdW50GAIgASgDUgZhbW91",
            "bnQSLAoRbnVtX2NvbmZpcm1hdGlvbnMYAyABKAVSEW51bV9jb25maXJtYXRp",
            "b25zEh4KCmJsb2NrX2hhc2gYBCABKAlSCmJsb2NrX2hhc2gSIgoMYmxvY2tf",
            "aGVpZ2h0GAUgASgFUgxibG9ja19oZWlnaHQSHgoKdGltZV9zdGFtcBgGIAEo",
            "A1IKdGltZV9zdGFtcBIeCgp0b3RhbF9mZWVzGAcgASgDUgp0b3RhbF9mZWVz",
            "EiYKDmRlc3RfYWRkcmVzc2VzGAggAygJUg5kZXN0X2FkZHJlc3NlcyIYChZH",
            "ZXRUcmFuc2FjdGlvbnNSZXF1ZXN0IkwKElRyYW5zYWN0aW9uRGV0YWlscxI2",
            "Cgx0cmFuc2FjdGlvbnMYASADKAsyEi5sbnJwYy5UcmFuc2FjdGlvblIMdHJh",
            "bnNhY3Rpb25zIqMBCgtTZW5kUmVxdWVzdBIMCgRkZXN0GAEgASgMEhMKC2Rl",
            "c3Rfc3RyaW5nGAIgASgJEgsKA2FtdBgDIAEoAxIUCgxwYXltZW50X2hhc2gY",
            "BCABKAwSGwoTcGF5bWVudF9oYXNoX3N0cmluZxgFIAEoCRIXCg9wYXltZW50",
            "X3JlcXVlc3QYBiABKAkSGAoQZmluYWxfY2x0dl9kZWx0YRgHIAEoBSKUAQoM",
            "U2VuZFJlc3BvbnNlEiQKDXBheW1lbnRfZXJyb3IYASABKAlSDXBheW1lbnRf",
            "ZXJyb3ISKgoQcGF5bWVudF9wcmVpbWFnZRgCIAEoDFIQcGF5bWVudF9wcmVp",
            "bWFnZRIyCg1wYXltZW50X3JvdXRlGAMgASgLMgwubG5ycGMuUm91dGVSDXBh",
            "eW1lbnRfcm91dGUiogEKDENoYW5uZWxQb2ludBIwChJmdW5kaW5nX3R4aWRf",
            "Ynl0ZXMYASABKAxIAFISZnVuZGluZ190eGlkX2J5dGVzEiwKEGZ1bmRpbmdf",
            "dHhpZF9zdHIYAiABKAlIAFIQZnVuZGluZ190eGlkX3N0chIiCgxvdXRwdXRf",
            "aW5kZXgYAyABKA1SDG91dHB1dF9pbmRleEIOCgxmdW5kaW5nX3R4aWQiPgoQ",
            "TGlnaHRuaW5nQWRkcmVzcxIWCgZwdWJrZXkYASABKAlSBnB1YmtleRISCgRo",
            "b3N0GAIgASgJUgRob3N0IrEBCg9TZW5kTWFueVJlcXVlc3QSPgoMQWRkclRv",
            "QW1vdW50GAEgAygLMigubG5ycGMuU2VuZE1hbnlSZXF1ZXN0LkFkZHJUb0Ft",
            "b3VudEVudHJ5EhMKC3RhcmdldF9jb25mGAMgASgFEhQKDHNhdF9wZXJfYnl0",
            "ZRgFIAEoAxozChFBZGRyVG9BbW91bnRFbnRyeRILCgNrZXkYASABKAkSDQoF",
            "dmFsdWUYAiABKAM6AjgBIiYKEFNlbmRNYW55UmVzcG9uc2USEgoEdHhpZBgB",
            "IAEoCVIEdHhpZCJbChBTZW5kQ29pbnNSZXF1ZXN0EgwKBGFkZHIYASABKAkS",
            "DgoGYW1vdW50GAIgASgDEhMKC3RhcmdldF9jb25mGAMgASgFEhQKDHNhdF9w",
            "ZXJfYnl0ZRgFIAEoAyInChFTZW5kQ29pbnNSZXNwb25zZRISCgR0eGlkGAEg",
            "ASgJUgR0eGlkIocBChFOZXdBZGRyZXNzUmVxdWVzdBIyCgR0eXBlGAEgASgO",
            "MiQubG5ycGMuTmV3QWRkcmVzc1JlcXVlc3QuQWRkcmVzc1R5cGUiPgoLQWRk",
            "cmVzc1R5cGUSFwoTV0lUTkVTU19QVUJLRVlfSEFTSBAAEhYKEk5FU1RFRF9Q",
            "VUJLRVlfSEFTSBABIhoKGE5ld1dpdG5lc3NBZGRyZXNzUmVxdWVzdCIuChJO",
            "ZXdBZGRyZXNzUmVzcG9uc2USGAoHYWRkcmVzcxgBIAEoCVIHYWRkcmVzcyIm",
            "ChJTaWduTWVzc2FnZVJlcXVlc3QSEAoDbXNnGAEgASgMUgNtc2ciMwoTU2ln",
            "bk1lc3NhZ2VSZXNwb25zZRIcCglzaWduYXR1cmUYASABKAlSCXNpZ25hdHVy",
            "ZSJGChRWZXJpZnlNZXNzYWdlUmVxdWVzdBIQCgNtc2cYASABKAxSA21zZxIc",
            "CglzaWduYXR1cmUYAiABKAlSCXNpZ25hdHVyZSJFChVWZXJpZnlNZXNzYWdl",
            "UmVzcG9uc2USFAoFdmFsaWQYASABKAhSBXZhbGlkEhYKBnB1YmtleRgCIAEo",
            "CVIGcHVia2V5IkkKEkNvbm5lY3RQZWVyUmVxdWVzdBIlCgRhZGRyGAEgASgL",
            "MhcubG5ycGMuTGlnaHRuaW5nQWRkcmVzcxIMCgRwZXJtGAIgASgIIhUKE0Nv",
            "bm5lY3RQZWVyUmVzcG9uc2UiMQoVRGlzY29ubmVjdFBlZXJSZXF1ZXN0EhgK",
            "B3B1Yl9rZXkYASABKAlSB3B1Yl9rZXkiGAoWRGlzY29ubmVjdFBlZXJSZXNw",
            "b25zZSKGAQoESFRMQxIaCghpbmNvbWluZxgBIAEoCFIIaW5jb21pbmcSFgoG",
            "YW1vdW50GAIgASgDUgZhbW91bnQSHAoJaGFzaF9sb2NrGAMgASgMUgloYXNo",
            "X2xvY2sSLAoRZXhwaXJhdGlvbl9oZWlnaHQYBCABKA1SEWV4cGlyYXRpb25f",
            "aGVpZ2h0Iv4ECgdDaGFubmVsEhYKBmFjdGl2ZRgBIAEoCFIGYWN0aXZlEiQK",
            "DXJlbW90ZV9wdWJrZXkYAiABKAlSDXJlbW90ZV9wdWJrZXkSJAoNY2hhbm5l",
            "bF9wb2ludBgDIAEoCVINY2hhbm5lbF9wb2ludBIYCgdjaGFuX2lkGAQgASgE",
            "UgdjaGFuX2lkEhoKCGNhcGFjaXR5GAUgASgDUghjYXBhY2l0eRIkCg1sb2Nh",
            "bF9iYWxhbmNlGAYgASgDUg1sb2NhbF9iYWxhbmNlEiYKDnJlbW90ZV9iYWxh",
            "bmNlGAcgASgDUg5yZW1vdGVfYmFsYW5jZRIeCgpjb21taXRfZmVlGAggASgD",
            "Ugpjb21taXRfZmVlEiQKDWNvbW1pdF93ZWlnaHQYCSABKANSDWNvbW1pdF93",
            "ZWlnaHQSHgoKZmVlX3Blcl9rdxgKIAEoA1IKZmVlX3Blcl9rdxIsChF1bnNl",
            "dHRsZWRfYmFsYW5jZRgLIAEoA1IRdW5zZXR0bGVkX2JhbGFuY2USMAoTdG90",
            "YWxfc2F0b3NoaXNfc2VudBgMIAEoA1ITdG90YWxfc2F0b3NoaXNfc2VudBI4",
            "Chd0b3RhbF9zYXRvc2hpc19yZWNlaXZlZBgNIAEoA1IXdG90YWxfc2F0b3No",
            "aXNfcmVjZWl2ZWQSIAoLbnVtX3VwZGF0ZXMYDiABKARSC251bV91cGRhdGVz",
            "EjEKDXBlbmRpbmdfaHRsY3MYDyADKAsyCy5sbnJwYy5IVExDUg1wZW5kaW5n",
            "X2h0bGNzEhwKCWNzdl9kZWxheRgQIAEoDVIJY3N2X2RlbGF5EhgKB3ByaXZh",
            "dGUYESABKAhSB3ByaXZhdGUibAoTTGlzdENoYW5uZWxzUmVxdWVzdBITCgth",
            "Y3RpdmVfb25seRgBIAEoCBIVCg1pbmFjdGl2ZV9vbmx5GAIgASgIEhMKC3B1",
            "YmxpY19vbmx5GAMgASgIEhQKDHByaXZhdGVfb25seRgEIAEoCCJCChRMaXN0",
            "Q2hhbm5lbHNSZXNwb25zZRIqCghjaGFubmVscxgLIAMoCzIOLmxucnBjLkNo",
            "YW5uZWxSCGNoYW5uZWxzIuoBCgRQZWVyEhgKB3B1Yl9rZXkYASABKAlSB3B1",
            "Yl9rZXkSGAoHYWRkcmVzcxgDIAEoCVIHYWRkcmVzcxIeCgpieXRlc19zZW50",
            "GAQgASgEUgpieXRlc19zZW50Eh4KCmJ5dGVzX3JlY3YYBSABKARSCmJ5dGVz",
            "X3JlY3YSGgoIc2F0X3NlbnQYBiABKANSCHNhdF9zZW50EhoKCHNhdF9yZWN2",
            "GAcgASgDUghzYXRfcmVjdhIYCgdpbmJvdW5kGAggASgIUgdpbmJvdW5kEhwK",
            "CXBpbmdfdGltZRgJIAEoA1IJcGluZ190aW1lIhIKEExpc3RQZWVyc1JlcXVl",
            "c3QiNgoRTGlzdFBlZXJzUmVzcG9uc2USIQoFcGVlcnMYASADKAsyCy5sbnJw",
            "Yy5QZWVyUgVwZWVycyIQCg5HZXRJbmZvUmVxdWVzdCLZAwoPR2V0SW5mb1Jl",
            "c3BvbnNlEigKD2lkZW50aXR5X3B1YmtleRgBIAEoCVIPaWRlbnRpdHlfcHVi",
            "a2V5EhQKBWFsaWFzGAIgASgJUgVhbGlhcxIyChRudW1fcGVuZGluZ19jaGFu",
            "bmVscxgDIAEoDVIUbnVtX3BlbmRpbmdfY2hhbm5lbHMSMAoTbnVtX2FjdGl2",
            "ZV9jaGFubmVscxgEIAEoDVITbnVtX2FjdGl2ZV9jaGFubmVscxIcCgludW1f",
            "cGVlcnMYBSABKA1SCW51bV9wZWVycxIiCgxibG9ja19oZWlnaHQYBiABKA1S",
            "DGJsb2NrX2hlaWdodBIeCgpibG9ja19oYXNoGAggASgJUgpibG9ja19oYXNo",
            "EigKD3N5bmNlZF90b19jaGFpbhgJIAEoCFIPc3luY2VkX3RvX2NoYWluEhgK",
            "B3Rlc3RuZXQYCiABKAhSB3Rlc3RuZXQSFgoGY2hhaW5zGAsgAygJUgZjaGFp",
            "bnMSEgoEdXJpcxgMIAMoCVIEdXJpcxI0ChViZXN0X2hlYWRlcl90aW1lc3Rh",
            "bXAYDSABKANSFWJlc3RfaGVhZGVyX3RpbWVzdGFtcBIYCgd2ZXJzaW9uGA4g",
            "ASgJUgd2ZXJzaW9uIlUKEkNvbmZpcm1hdGlvblVwZGF0ZRIRCglibG9ja19z",
            "aGEYASABKAwSFAoMYmxvY2tfaGVpZ2h0GAIgASgFEhYKDm51bV9jb25mc19s",
            "ZWZ0GAMgASgNIk4KEUNoYW5uZWxPcGVuVXBkYXRlEjkKDWNoYW5uZWxfcG9p",
            "bnQYASABKAsyEy5sbnJwYy5DaGFubmVsUG9pbnRSDWNoYW5uZWxfcG9pbnQi",
            "UgoSQ2hhbm5lbENsb3NlVXBkYXRlEiIKDGNsb3NpbmdfdHhpZBgBIAEoDFIM",
            "Y2xvc2luZ190eGlkEhgKB3N1Y2Nlc3MYAiABKAhSB3N1Y2Nlc3MiewoTQ2xv",
            "c2VDaGFubmVsUmVxdWVzdBIqCg1jaGFubmVsX3BvaW50GAEgASgLMhMubG5y",
            "cGMuQ2hhbm5lbFBvaW50Eg0KBWZvcmNlGAIgASgIEhMKC3RhcmdldF9jb25m",
            "GAMgASgFEhQKDHNhdF9wZXJfYnl0ZRgEIAEoAyLZAQoRQ2xvc2VTdGF0dXNV",
            "cGRhdGUSPAoNY2xvc2VfcGVuZGluZxgBIAEoCzIULmxucnBjLlBlbmRpbmdV",
            "cGRhdGVIAFINY2xvc2VfcGVuZGluZxI/Cgxjb25maXJtYXRpb24YAiABKAsy",
            "GS5sbnJwYy5Db25maXJtYXRpb25VcGRhdGVIAFIMY29uZmlybWF0aW9uEjsK",
            "CmNoYW5fY2xvc2UYAyABKAsyGS5sbnJwYy5DaGFubmVsQ2xvc2VVcGRhdGVI",
            "AFIKY2hhbl9jbG9zZUIICgZ1cGRhdGUiRwoNUGVuZGluZ1VwZGF0ZRISCgR0",
            "eGlkGAEgASgMUgR0eGlkEiIKDG91dHB1dF9pbmRleBgCIAEoDVIMb3V0cHV0",
            "X2luZGV4Is0CChJPcGVuQ2hhbm5lbFJlcXVlc3QSIAoLbm9kZV9wdWJrZXkY",
            "AiABKAxSC25vZGVfcHVia2V5Ei4KEm5vZGVfcHVia2V5X3N0cmluZxgDIAEo",
            "CVISbm9kZV9wdWJrZXlfc3RyaW5nEjIKFGxvY2FsX2Z1bmRpbmdfYW1vdW50",
            "GAQgASgDUhRsb2NhbF9mdW5kaW5nX2Ftb3VudBIaCghwdXNoX3NhdBgFIAEo",
            "A1IIcHVzaF9zYXQSEwoLdGFyZ2V0X2NvbmYYBiABKAUSFAoMc2F0X3Blcl9i",
            "eXRlGAcgASgDEhgKB3ByaXZhdGUYCCABKAhSB3ByaXZhdGUSJAoNbWluX2h0",
            "bGNfbXNhdBgJIAEoA1INbWluX2h0bGNfbXNhdBIqChByZW1vdGVfY3N2X2Rl",
            "bGF5GAogASgNUhByZW1vdGVfY3N2X2RlbGF5ItMBChBPcGVuU3RhdHVzVXBk",
            "YXRlEjoKDGNoYW5fcGVuZGluZxgBIAEoCzIULmxucnBjLlBlbmRpbmdVcGRh",
            "dGVIAFIMY2hhbl9wZW5kaW5nEj8KDGNvbmZpcm1hdGlvbhgCIAEoCzIZLmxu",
            "cnBjLkNvbmZpcm1hdGlvblVwZGF0ZUgAUgxjb25maXJtYXRpb24SOAoJY2hh",
            "bl9vcGVuGAMgASgLMhgubG5ycGMuQ2hhbm5lbE9wZW5VcGRhdGVIAFIJY2hh",
            "bl9vcGVuQggKBnVwZGF0ZSLPAQoLUGVuZGluZ0hUTEMSGgoIaW5jb21pbmcY",
            "ASABKAhSCGluY29taW5nEhYKBmFtb3VudBgCIAEoA1IGYW1vdW50EhoKCG91",
            "dHBvaW50GAMgASgJUghvdXRwb2ludBIoCg9tYXR1cml0eV9oZWlnaHQYBCAB",
            "KA1SD21hdHVyaXR5X2hlaWdodBIwChNibG9ja3NfdGlsX21hdHVyaXR5GAUg",
            "ASgFUhNibG9ja3NfdGlsX21hdHVyaXR5EhQKBXN0YWdlGAYgASgNUgVzdGFn",
            "ZSIYChZQZW5kaW5nQ2hhbm5lbHNSZXF1ZXN0IsEKChdQZW5kaW5nQ2hhbm5l",
            "bHNSZXNwb25zZRIwChN0b3RhbF9saW1ib19iYWxhbmNlGAEgASgDUhN0b3Rh",
            "bF9saW1ib19iYWxhbmNlEmcKFXBlbmRpbmdfb3Blbl9jaGFubmVscxgCIAMo",
            "CzIxLmxucnBjLlBlbmRpbmdDaGFubmVsc1Jlc3BvbnNlLlBlbmRpbmdPcGVu",
            "Q2hhbm5lbFIVcGVuZGluZ19vcGVuX2NoYW5uZWxzEmgKGHBlbmRpbmdfY2xv",
            "c2luZ19jaGFubmVscxgDIAMoCzIsLmxucnBjLlBlbmRpbmdDaGFubmVsc1Jl",
            "c3BvbnNlLkNsb3NlZENoYW5uZWxSGHBlbmRpbmdfY2xvc2luZ19jaGFubmVs",
            "cxJ5Ch5wZW5kaW5nX2ZvcmNlX2Nsb3NpbmdfY2hhbm5lbHMYBCADKAsyMS5s",
            "bnJwYy5QZW5kaW5nQ2hhbm5lbHNSZXNwb25zZS5Gb3JjZUNsb3NlZENoYW5u",
            "ZWxSHnBlbmRpbmdfZm9yY2VfY2xvc2luZ19jaGFubmVscxrKAQoOUGVuZGlu",
            "Z0NoYW5uZWwSKAoPcmVtb3RlX25vZGVfcHViGAEgASgJUg9yZW1vdGVfbm9k",
            "ZV9wdWISJAoNY2hhbm5lbF9wb2ludBgCIAEoCVINY2hhbm5lbF9wb2ludBIa",
            "CghjYXBhY2l0eRgDIAEoA1IIY2FwYWNpdHkSJAoNbG9jYWxfYmFsYW5jZRgE",
            "IAEoA1INbG9jYWxfYmFsYW5jZRImCg5yZW1vdGVfYmFsYW5jZRgFIAEoA1IO",
            "cmVtb3RlX2JhbGFuY2Ua9QEKElBlbmRpbmdPcGVuQ2hhbm5lbBJHCgdjaGFu",
            "bmVsGAEgASgLMi0ubG5ycGMuUGVuZGluZ0NoYW5uZWxzUmVzcG9uc2UuUGVu",
            "ZGluZ0NoYW5uZWxSB2NoYW5uZWwSMAoTY29uZmlybWF0aW9uX2hlaWdodBgC",
            "IAEoDVITY29uZmlybWF0aW9uX2hlaWdodBIeCgpjb21taXRfZmVlGAQgASgD",
            "Ugpjb21taXRfZmVlEiQKDWNvbW1pdF93ZWlnaHQYBSABKANSDWNvbW1pdF93",
            "ZWlnaHQSHgoKZmVlX3Blcl9rdxgGIAEoA1IKZmVlX3Blcl9rdxpzCg1DbG9z",
            "ZWRDaGFubmVsEj4KB2NoYW5uZWwYASABKAsyLS5sbnJwYy5QZW5kaW5nQ2hh",
            "bm5lbHNSZXNwb25zZS5QZW5kaW5nQ2hhbm5lbBIiCgxjbG9zaW5nX3R4aWQY",
            "AiABKAlSDGNsb3NpbmdfdHhpZBrrAgoSRm9yY2VDbG9zZWRDaGFubmVsEkcK",
            "B2NoYW5uZWwYASABKAsyLS5sbnJwYy5QZW5kaW5nQ2hhbm5lbHNSZXNwb25z",
            "ZS5QZW5kaW5nQ2hhbm5lbFIHY2hhbm5lbBIiCgxjbG9zaW5nX3R4aWQYAiAB",
            "KAlSDGNsb3NpbmdfdHhpZBIkCg1saW1ib19iYWxhbmNlGAMgASgDUg1saW1i",
            "b19iYWxhbmNlEigKD21hdHVyaXR5X2hlaWdodBgEIAEoDVIPbWF0dXJpdHlf",
            "aGVpZ2h0EjAKE2Jsb2Nrc190aWxfbWF0dXJpdHkYBSABKAVSE2Jsb2Nrc190",
            "aWxfbWF0dXJpdHkSLAoRcmVjb3ZlcmVkX2JhbGFuY2UYBiABKANSEXJlY292",
            "ZXJlZF9iYWxhbmNlEjgKDXBlbmRpbmdfaHRsY3MYCCADKAsyEi5sbnJwYy5Q",
            "ZW5kaW5nSFRMQ1INcGVuZGluZ19odGxjcyIWChRXYWxsZXRCYWxhbmNlUmVx",
            "dWVzdCKdAQoVV2FsbGV0QmFsYW5jZVJlc3BvbnNlEiQKDXRvdGFsX2JhbGFu",
            "Y2UYASABKANSDXRvdGFsX2JhbGFuY2USLAoRY29uZmlybWVkX2JhbGFuY2UY",
            "AiABKANSEWNvbmZpcm1lZF9iYWxhbmNlEjAKE3VuY29uZmlybWVkX2JhbGFu",
            "Y2UYAyABKANSE3VuY29uZmlybWVkX2JhbGFuY2UiFwoVQ2hhbm5lbEJhbGFu",
            "Y2VSZXF1ZXN0ImYKFkNoYW5uZWxCYWxhbmNlUmVzcG9uc2USGAoHYmFsYW5j",
            "ZRgBIAEoA1IHYmFsYW5jZRIyChRwZW5kaW5nX29wZW5fYmFsYW5jZRgCIAEo",
            "A1IUcGVuZGluZ19vcGVuX2JhbGFuY2UiRgoSUXVlcnlSb3V0ZXNSZXF1ZXN0",
            "Eg8KB3B1Yl9rZXkYASABKAkSCwoDYW10GAIgASgDEhIKCm51bV9yb3V0ZXMY",
            "AyABKAUiOwoTUXVlcnlSb3V0ZXNSZXNwb25zZRIkCgZyb3V0ZXMYASADKAsy",
            "DC5sbnJwYy5Sb3V0ZVIGcm91dGVzIu0BCgNIb3ASGAoHY2hhbl9pZBgBIAEo",
            "BFIHY2hhbl9pZBIkCg1jaGFuX2NhcGFjaXR5GAIgASgDUg1jaGFuX2NhcGFj",
            "aXR5EioKDmFtdF90b19mb3J3YXJkGAMgASgDQgIYAVIOYW10X3RvX2Zvcndh",
            "cmQSFAoDZmVlGAQgASgDQgIYAVIDZmVlEhYKBmV4cGlyeRgFIAEoDVIGZXhw",
            "aXJ5EjAKE2FtdF90b19mb3J3YXJkX21zYXQYBiABKANSE2FtdF90b19mb3J3",
            "YXJkX21zYXQSGgoIZmVlX21zYXQYByABKANSCGZlZV9tc2F0IukBCgVSb3V0",
            "ZRIoCg90b3RhbF90aW1lX2xvY2sYASABKA1SD3RvdGFsX3RpbWVfbG9jaxIi",
            "Cgp0b3RhbF9mZWVzGAIgASgDQgIYAVIKdG90YWxfZmVlcxIgCgl0b3RhbF9h",
            "bXQYAyABKANCAhgBUgl0b3RhbF9hbXQSHgoEaG9wcxgEIAMoCzIKLmxucnBj",
            "LkhvcFIEaG9wcxIoCg90b3RhbF9mZWVzX21zYXQYBSABKANSD3RvdGFsX2Zl",
            "ZXNfbXNhdBImCg50b3RhbF9hbXRfbXNhdBgGIAEoA1IOdG90YWxfYW10X21z",
            "YXQiIgoPTm9kZUluZm9SZXF1ZXN0Eg8KB3B1Yl9rZXkYASABKAkigAEKCE5v",
            "ZGVJbmZvEigKBG5vZGUYASABKAsyFC5sbnJwYy5MaWdodG5pbmdOb2RlUgRu",
            "b2RlEiIKDG51bV9jaGFubmVscxgCIAEoDVIMbnVtX2NoYW5uZWxzEiYKDnRv",
            "dGFsX2NhcGFjaXR5GAMgASgDUg50b3RhbF9jYXBhY2l0eSKpAQoNTGlnaHRu",
            "aW5nTm9kZRIgCgtsYXN0X3VwZGF0ZRgBIAEoDVILbGFzdF91cGRhdGUSGAoH",
            "cHViX2tleRgCIAEoCVIHcHViX2tleRIUCgVhbGlhcxgDIAEoCVIFYWxpYXMS",
            "MAoJYWRkcmVzc2VzGAQgAygLMhIubG5ycGMuTm9kZUFkZHJlc3NSCWFkZHJl",
            "c3NlcxIUCgVjb2xvchgFIAEoCVIFY29sb3IiOwoLTm9kZUFkZHJlc3MSGAoH",
            "bmV0d29yaxgBIAEoCVIHbmV0d29yaxISCgRhZGRyGAIgASgJUgRhZGRyIq0B",
            "Cg1Sb3V0aW5nUG9saWN5EigKD3RpbWVfbG9ja19kZWx0YRgBIAEoDVIPdGlt",
            "ZV9sb2NrX2RlbHRhEhoKCG1pbl9odGxjGAIgASgDUghtaW5faHRsYxIkCg1m",
            "ZWVfYmFzZV9tc2F0GAMgASgDUg1mZWVfYmFzZV9tc2F0EjAKE2ZlZV9yYXRl",
            "X21pbGxpX21zYXQYBCABKANSE2ZlZV9yYXRlX21pbGxpX21zYXQiuwIKC0No",
            "YW5uZWxFZGdlEh4KCmNoYW5uZWxfaWQYASABKARSCmNoYW5uZWxfaWQSHgoK",
            "Y2hhbl9wb2ludBgCIAEoCVIKY2hhbl9wb2ludBIgCgtsYXN0X3VwZGF0ZRgD",
            "IAEoDVILbGFzdF91cGRhdGUSHAoJbm9kZTFfcHViGAQgASgJUglub2RlMV9w",
            "dWISHAoJbm9kZTJfcHViGAUgASgJUglub2RlMl9wdWISGgoIY2FwYWNpdHkY",
            "BiABKANSCGNhcGFjaXR5EjgKDG5vZGUxX3BvbGljeRgHIAEoCzIULmxucnBj",
            "LlJvdXRpbmdQb2xpY3lSDG5vZGUxX3BvbGljeRI4Cgxub2RlMl9wb2xpY3kY",
            "CCABKAsyFC5sbnJwYy5Sb3V0aW5nUG9saWN5Ugxub2RlMl9wb2xpY3kiFQoT",
            "Q2hhbm5lbEdyYXBoUmVxdWVzdCJkCgxDaGFubmVsR3JhcGgSKgoFbm9kZXMY",
            "ASADKAsyFC5sbnJwYy5MaWdodG5pbmdOb2RlUgVub2RlcxIoCgVlZGdlcxgC",
            "IAMoCzISLmxucnBjLkNoYW5uZWxFZGdlUgVlZGdlcyIiCg9DaGFuSW5mb1Jl",
            "cXVlc3QSDwoHY2hhbl9pZBgBIAEoBCIUChJOZXR3b3JrSW5mb1JlcXVlc3Qi",
            "gwMKC05ldHdvcmtJbmZvEiYKDmdyYXBoX2RpYW1ldGVyGAEgASgNUg5ncmFw",
            "aF9kaWFtZXRlchImCg5hdmdfb3V0X2RlZ3JlZRgCIAEoAVIOYXZnX291dF9k",
            "ZWdyZWUSJgoObWF4X291dF9kZWdyZWUYAyABKA1SDm1heF9vdXRfZGVncmVl",
            "EhwKCW51bV9ub2RlcxgEIAEoDVIJbnVtX25vZGVzEiIKDG51bV9jaGFubmVs",
            "cxgFIAEoDVIMbnVtX2NoYW5uZWxzEjYKFnRvdGFsX25ldHdvcmtfY2FwYWNp",
            "dHkYBiABKANSFnRvdGFsX25ldHdvcmtfY2FwYWNpdHkSKgoQYXZnX2NoYW5u",
            "ZWxfc2l6ZRgHIAEoAVIQYXZnX2NoYW5uZWxfc2l6ZRIqChBtaW5fY2hhbm5l",
            "bF9zaXplGAggASgDUhBtaW5fY2hhbm5lbF9zaXplEioKEG1heF9jaGFubmVs",
            "X3NpemUYCSABKANSEG1heF9jaGFubmVsX3NpemUiDQoLU3RvcFJlcXVlc3Qi",
            "DgoMU3RvcFJlc3BvbnNlIhsKGUdyYXBoVG9wb2xvZ3lTdWJzY3JpcHRpb24i",
            "owEKE0dyYXBoVG9wb2xvZ3lVcGRhdGUSJwoMbm9kZV91cGRhdGVzGAEgAygL",
            "MhEubG5ycGMuTm9kZVVwZGF0ZRIxCg9jaGFubmVsX3VwZGF0ZXMYAiADKAsy",
            "GC5sbnJwYy5DaGFubmVsRWRnZVVwZGF0ZRIwCgxjbG9zZWRfY2hhbnMYAyAD",
            "KAsyGi5sbnJwYy5DbG9zZWRDaGFubmVsVXBkYXRlIl0KCk5vZGVVcGRhdGUS",
            "EQoJYWRkcmVzc2VzGAEgAygJEhQKDGlkZW50aXR5X2tleRgCIAEoCRIXCg9n",
            "bG9iYWxfZmVhdHVyZXMYAyABKAwSDQoFYWxpYXMYBCABKAkiwAEKEUNoYW5u",
            "ZWxFZGdlVXBkYXRlEg8KB2NoYW5faWQYASABKAQSJwoKY2hhbl9wb2ludBgC",
            "IAEoCzITLmxucnBjLkNoYW5uZWxQb2ludBIQCghjYXBhY2l0eRgDIAEoAxIs",
            "Cg5yb3V0aW5nX3BvbGljeRgEIAEoCzIULmxucnBjLlJvdXRpbmdQb2xpY3kS",
            "GAoQYWR2ZXJ0aXNpbmdfbm9kZRgFIAEoCRIXCg9jb25uZWN0aW5nX25vZGUY",
            "BiABKAkieAoTQ2xvc2VkQ2hhbm5lbFVwZGF0ZRIPCgdjaGFuX2lkGAEgASgE",
            "EhAKCGNhcGFjaXR5GAIgASgDEhUKDWNsb3NlZF9oZWlnaHQYAyABKA0SJwoK",
            "Y2hhbl9wb2ludBgEIAEoCzITLmxucnBjLkNoYW5uZWxQb2ludCKdAwoHSW52",
            "b2ljZRISCgRtZW1vGAEgASgJUgRtZW1vEhgKB3JlY2VpcHQYAiABKAxSB3Jl",
            "Y2VpcHQSHgoKcl9wcmVpbWFnZRgDIAEoDFIKcl9wcmVpbWFnZRIWCgZyX2hh",
            "c2gYBCABKAxSBnJfaGFzaBIUCgV2YWx1ZRgFIAEoA1IFdmFsdWUSGAoHc2V0",
            "dGxlZBgGIAEoCFIHc2V0dGxlZBIkCg1jcmVhdGlvbl9kYXRlGAcgASgDUg1j",
            "cmVhdGlvbl9kYXRlEiAKC3NldHRsZV9kYXRlGAggASgDUgtzZXR0bGVfZGF0",
            "ZRIoCg9wYXltZW50X3JlcXVlc3QYCSABKAlSD3BheW1lbnRfcmVxdWVzdBIq",
            "ChBkZXNjcmlwdGlvbl9oYXNoGAogASgMUhBkZXNjcmlwdGlvbl9oYXNoEhYK",
            "BmV4cGlyeRgLIAEoA1IGZXhwaXJ5EiQKDWZhbGxiYWNrX2FkZHIYDCABKAlS",
            "DWZhbGxiYWNrX2FkZHISIAoLY2x0dl9leHBpcnkYDSABKARSC2NsdHZfZXhw",
            "aXJ5IlYKEkFkZEludm9pY2VSZXNwb25zZRIWCgZyX2hhc2gYASABKAxSBnJf",
            "aGFzaBIoCg9wYXltZW50X3JlcXVlc3QYAiABKAlSD3BheW1lbnRfcmVxdWVz",
            "dCJFCgtQYXltZW50SGFzaBIeCgpyX2hhc2hfc3RyGAEgASgJUgpyX2hhc2hf",
            "c3RyEhYKBnJfaGFzaBgCIAEoDFIGcl9oYXNoIioKEkxpc3RJbnZvaWNlUmVx",
            "dWVzdBIUCgxwZW5kaW5nX29ubHkYASABKAgiQQoTTGlzdEludm9pY2VSZXNw",
            "b25zZRIqCghpbnZvaWNlcxgBIAMoCzIOLmxucnBjLkludm9pY2VSCGludm9p",
            "Y2VzIhUKE0ludm9pY2VTdWJzY3JpcHRpb24iuwEKB1BheW1lbnQSIgoMcGF5",
            "bWVudF9oYXNoGAEgASgJUgxwYXltZW50X2hhc2gSFAoFdmFsdWUYAiABKANS",
            "BXZhbHVlEiQKDWNyZWF0aW9uX2RhdGUYAyABKANSDWNyZWF0aW9uX2RhdGUS",
            "EgoEcGF0aBgEIAMoCVIEcGF0aBIQCgNmZWUYBSABKANSA2ZlZRIqChBwYXlt",
            "ZW50X3ByZWltYWdlGAYgASgJUhBwYXltZW50X3ByZWltYWdlIhUKE0xpc3RQ",
            "YXltZW50c1JlcXVlc3QiQgoUTGlzdFBheW1lbnRzUmVzcG9uc2USKgoIcGF5",
            "bWVudHMYASADKAsyDi5sbnJwYy5QYXltZW50UghwYXltZW50cyIaChhEZWxl",
            "dGVBbGxQYXltZW50c1JlcXVlc3QiGwoZRGVsZXRlQWxsUGF5bWVudHNSZXNw",
            "b25zZSI1ChFEZWJ1Z0xldmVsUmVxdWVzdBIMCgRzaG93GAEgASgIEhIKCmxl",
            "dmVsX3NwZWMYAiABKAkiNgoSRGVidWdMZXZlbFJlc3BvbnNlEiAKC3N1Yl9z",
            "eXN0ZW1zGAEgASgJUgtzdWJfc3lzdGVtcyIfCgxQYXlSZXFTdHJpbmcSDwoH",
            "cGF5X3JlcRgBIAEoCSK+AgoGUGF5UmVxEiAKC2Rlc3RpbmF0aW9uGAEgASgJ",
            "UgtkZXN0aW5hdGlvbhIiCgxwYXltZW50X2hhc2gYAiABKAlSDHBheW1lbnRf",
            "aGFzaBIiCgxudW1fc2F0b3NoaXMYAyABKANSDG51bV9zYXRvc2hpcxIcCgl0",
            "aW1lc3RhbXAYBCABKANSCXRpbWVzdGFtcBIWCgZleHBpcnkYBSABKANSBmV4",
            "cGlyeRIgCgtkZXNjcmlwdGlvbhgGIAEoCVILZGVzY3JpcHRpb24SKgoQZGVz",
            "Y3JpcHRpb25faGFzaBgHIAEoCVIQZGVzY3JpcHRpb25faGFzaBIkCg1mYWxs",
            "YmFja19hZGRyGAggASgJUg1mYWxsYmFja19hZGRyEiAKC2NsdHZfZXhwaXJ5",
            "GAkgASgDUgtjbHR2X2V4cGlyeSISChBGZWVSZXBvcnRSZXF1ZXN0IpkBChBD",
            "aGFubmVsRmVlUmVwb3J0EiEKCmNoYW5fcG9pbnQYASABKAlSDWNoYW5uZWxf",
            "cG9pbnQSJAoNYmFzZV9mZWVfbXNhdBgCIAEoA1INYmFzZV9mZWVfbXNhdBIg",
            "CgtmZWVfcGVyX21pbBgDIAEoA1ILZmVlX3Blcl9taWwSGgoIZmVlX3JhdGUY",
            "BCABKAFSCGZlZV9yYXRlIrwBChFGZWVSZXBvcnRSZXNwb25zZRI7CgxjaGFu",
            "bmVsX2ZlZXMYASADKAsyFy5sbnJwYy5DaGFubmVsRmVlUmVwb3J0UgxjaGFu",
            "bmVsX2ZlZXMSIAoLZGF5X2ZlZV9zdW0YAiABKARSC2RheV9mZWVfc3VtEiIK",
            "DHdlZWtfZmVlX3N1bRgDIAEoBFIMd2Vla19mZWVfc3VtEiQKDW1vbnRoX2Zl",
            "ZV9zdW0YBCABKARSDW1vbnRoX2ZlZV9zdW0i2wEKE1BvbGljeVVwZGF0ZVJl",
            "cXVlc3QSGAoGZ2xvYmFsGAEgASgISABSBmdsb2JhbBI1CgpjaGFuX3BvaW50",
            "GAIgASgLMhMubG5ycGMuQ2hhbm5lbFBvaW50SABSCmNoYW5fcG9pbnQSJAoN",
            "YmFzZV9mZWVfbXNhdBgDIAEoA1INYmFzZV9mZWVfbXNhdBIaCghmZWVfcmF0",
            "ZRgEIAEoAVIIZmVlX3JhdGUSKAoPdGltZV9sb2NrX2RlbHRhGAUgASgNUg90",
            "aW1lX2xvY2tfZGVsdGFCBwoFc2NvcGUiFgoUUG9saWN5VXBkYXRlUmVzcG9u",
            "c2UiogEKGEZvcndhcmRpbmdIaXN0b3J5UmVxdWVzdBIeCgpzdGFydF90aW1l",
            "GAEgASgEUgpzdGFydF90aW1lEhoKCGVuZF90aW1lGAIgASgEUghlbmRfdGlt",
            "ZRIiCgxpbmRleF9vZmZzZXQYAyABKA1SDGluZGV4X29mZnNldBImCg5udW1f",
            "bWF4X2V2ZW50cxgEIAEoDVIObnVtX21heF9ldmVudHMitQEKD0ZvcndhcmRp",
            "bmdFdmVudBIcCgl0aW1lc3RhbXAYASABKARSCXRpbWVzdGFtcBIeCgpjaGFu",
            "X2lkX2luGAIgASgEUgpjaGFuX2lkX2luEiAKC2NoYW5faWRfb3V0GAQgASgE",
            "UgtjaGFuX2lkX291dBIWCgZhbXRfaW4YBSABKARSBmFtdF9pbhIYCgdhbXRf",
            "b3V0GAYgASgEUgdhbXRfb3V0EhAKA2ZlZRgHIAEoBFIDZmVlIo8BChlGb3J3",
            "YXJkaW5nSGlzdG9yeVJlc3BvbnNlEkQKEWZvcndhcmRpbmdfZXZlbnRzGAEg",
            "AygLMhYubG5ycGMuRm9yd2FyZGluZ0V2ZW50UhFmb3J3YXJkaW5nX2V2ZW50",
            "cxIsChFsYXN0X29mZnNldF9pbmRleBgCIAEoDVIRbGFzdF9vZmZzZXRfaW5k",
            "ZXgyowIKDldhbGxldFVubG9ja2VyEk0KB0dlblNlZWQSFS5sbnJwYy5HZW5T",
            "ZWVkUmVxdWVzdBoWLmxucnBjLkdlblNlZWRSZXNwb25zZSITgtPkkwINEgsv",
            "djEvZ2Vuc2VlZBJcCgpJbml0V2FsbGV0EhgubG5ycGMuSW5pdFdhbGxldFJl",
            "cXVlc3QaGS5sbnJwYy5Jbml0V2FsbGV0UmVzcG9uc2UiGYLT5JMCEyIOL3Yx",
            "L2luaXR3YWxsZXQ6ASoSZAoMVW5sb2NrV2FsbGV0EhoubG5ycGMuVW5sb2Nr",
            "V2FsbGV0UmVxdWVzdBobLmxucnBjLlVubG9ja1dhbGxldFJlc3BvbnNlIhuC",
            "0+STAhUiEC92MS91bmxvY2t3YWxsZXQ6ASoy4hsKCUxpZ2h0bmluZxJqCg1X",
            "YWxsZXRCYWxhbmNlEhsubG5ycGMuV2FsbGV0QmFsYW5jZVJlcXVlc3QaHC5s",
            "bnJwYy5XYWxsZXRCYWxhbmNlUmVzcG9uc2UiHoLT5JMCGBIWL3YxL2JhbGFu",
            "Y2UvYmxvY2tjaGFpbhJrCg5DaGFubmVsQmFsYW5jZRIcLmxucnBjLkNoYW5u",
            "ZWxCYWxhbmNlUmVxdWVzdBodLmxucnBjLkNoYW5uZWxCYWxhbmNlUmVzcG9u",
            "c2UiHILT5JMCFhIUL3YxL2JhbGFuY2UvY2hhbm5lbHMSZQoPR2V0VHJhbnNh",
            "Y3Rpb25zEh0ubG5ycGMuR2V0VHJhbnNhY3Rpb25zUmVxdWVzdBoZLmxucnBj",
            "LlRyYW5zYWN0aW9uRGV0YWlscyIYgtPkkwISEhAvdjEvdHJhbnNhY3Rpb25z",
            "ElsKCVNlbmRDb2lucxIXLmxucnBjLlNlbmRDb2luc1JlcXVlc3QaGC5sbnJw",
            "Yy5TZW5kQ29pbnNSZXNwb25zZSIbgtPkkwIVIhAvdjEvdHJhbnNhY3Rpb25z",
            "OgEqEkwKFVN1YnNjcmliZVRyYW5zYWN0aW9ucxIdLmxucnBjLkdldFRyYW5z",
            "YWN0aW9uc1JlcXVlc3QaEi5sbnJwYy5UcmFuc2FjdGlvbjABEjsKCFNlbmRN",
            "YW55EhYubG5ycGMuU2VuZE1hbnlSZXF1ZXN0GhcubG5ycGMuU2VuZE1hbnlS",
            "ZXNwb25zZRJBCgpOZXdBZGRyZXNzEhgubG5ycGMuTmV3QWRkcmVzc1JlcXVl",
            "c3QaGS5sbnJwYy5OZXdBZGRyZXNzUmVzcG9uc2USZwoRTmV3V2l0bmVzc0Fk",
            "ZHJlc3MSHy5sbnJwYy5OZXdXaXRuZXNzQWRkcmVzc1JlcXVlc3QaGS5sbnJw",
            "Yy5OZXdBZGRyZXNzUmVzcG9uc2UiFoLT5JMCEBIOL3YxL25ld2FkZHJlc3MS",
            "RAoLU2lnbk1lc3NhZ2USGS5sbnJwYy5TaWduTWVzc2FnZVJlcXVlc3QaGi5s",
            "bnJwYy5TaWduTWVzc2FnZVJlc3BvbnNlEkoKDVZlcmlmeU1lc3NhZ2USGy5s",
            "bnJwYy5WZXJpZnlNZXNzYWdlUmVxdWVzdBocLmxucnBjLlZlcmlmeU1lc3Nh",
            "Z2VSZXNwb25zZRJaCgtDb25uZWN0UGVlchIZLmxucnBjLkNvbm5lY3RQZWVy",
            "UmVxdWVzdBoaLmxucnBjLkNvbm5lY3RQZWVyUmVzcG9uc2UiFILT5JMCDiIJ",
            "L3YxL3BlZXJzOgEqEmoKDkRpc2Nvbm5lY3RQZWVyEhwubG5ycGMuRGlzY29u",
            "bmVjdFBlZXJSZXF1ZXN0Gh0ubG5ycGMuRGlzY29ubmVjdFBlZXJSZXNwb25z",
            "ZSIbgtPkkwIVKhMvdjEvcGVlcnMve3B1Yl9rZXl9ElEKCUxpc3RQZWVycxIX",
            "LmxucnBjLkxpc3RQZWVyc1JlcXVlc3QaGC5sbnJwYy5MaXN0UGVlcnNSZXNw",
            "b25zZSIRgtPkkwILEgkvdjEvcGVlcnMSTQoHR2V0SW5mbxIVLmxucnBjLkdl",
            "dEluZm9SZXF1ZXN0GhYubG5ycGMuR2V0SW5mb1Jlc3BvbnNlIhOC0+STAg0S",
            "Cy92MS9nZXRpbmZvEm4KD1BlbmRpbmdDaGFubmVscxIdLmxucnBjLlBlbmRp",
            "bmdDaGFubmVsc1JlcXVlc3QaHi5sbnJwYy5QZW5kaW5nQ2hhbm5lbHNSZXNw",
            "b25zZSIcgtPkkwIWEhQvdjEvY2hhbm5lbHMvcGVuZGluZxJdCgxMaXN0Q2hh",
            "bm5lbHMSGi5sbnJwYy5MaXN0Q2hhbm5lbHNSZXF1ZXN0GhsubG5ycGMuTGlz",
            "dENoYW5uZWxzUmVzcG9uc2UiFILT5JMCDhIML3YxL2NoYW5uZWxzEloKD09w",
            "ZW5DaGFubmVsU3luYxIZLmxucnBjLk9wZW5DaGFubmVsUmVxdWVzdBoTLmxu",
            "cnBjLkNoYW5uZWxQb2ludCIXgtPkkwIRIgwvdjEvY2hhbm5lbHM6ASoSQwoL",
            "T3BlbkNoYW5uZWwSGS5sbnJwYy5PcGVuQ2hhbm5lbFJlcXVlc3QaFy5sbnJw",
            "Yy5PcGVuU3RhdHVzVXBkYXRlMAESmgEKDENsb3NlQ2hhbm5lbBIaLmxucnBj",
            "LkNsb3NlQ2hhbm5lbFJlcXVlc3QaGC5sbnJwYy5DbG9zZVN0YXR1c1VwZGF0",
            "ZSJSgtPkkwJMKkovdjEvY2hhbm5lbHMve2NoYW5uZWxfcG9pbnQuZnVuZGlu",
            "Z190eGlkX3N0cn0ve2NoYW5uZWxfcG9pbnQub3V0cHV0X2luZGV4fTABEjoK",
            "C1NlbmRQYXltZW50EhIubG5ycGMuU2VuZFJlcXVlc3QaEy5sbnJwYy5TZW5k",
            "UmVzcG9uc2UoATABEmAKD1NlbmRQYXltZW50U3luYxISLmxucnBjLlNlbmRS",
            "ZXF1ZXN0GhMubG5ycGMuU2VuZFJlc3BvbnNlIiSC0+STAh4iGS92MS9jaGFu",
            "bmVscy90cmFuc2FjdGlvbnM6ASoSUAoKQWRkSW52b2ljZRIOLmxucnBjLklu",
            "dm9pY2UaGS5sbnJwYy5BZGRJbnZvaWNlUmVzcG9uc2UiF4LT5JMCESIML3Yx",
            "L2ludm9pY2VzOgEqElsKDExpc3RJbnZvaWNlcxIZLmxucnBjLkxpc3RJbnZv",
            "aWNlUmVxdWVzdBoaLmxucnBjLkxpc3RJbnZvaWNlUmVzcG9uc2UiFILT5JMC",
            "DhIML3YxL2ludm9pY2VzElUKDUxvb2t1cEludm9pY2USEi5sbnJwYy5QYXlt",
            "ZW50SGFzaBoOLmxucnBjLkludm9pY2UiIILT5JMCGhIYL3YxL2ludm9pY2Uv",
            "e3JfaGFzaF9zdHJ9EmEKEVN1YnNjcmliZUludm9pY2VzEhoubG5ycGMuSW52",
            "b2ljZVN1YnNjcmlwdGlvbhoOLmxucnBjLkludm9pY2UiHoLT5JMCGBIWL3Yx",
            "L2ludm9pY2VzL3N1YnNjcmliZTABElAKDERlY29kZVBheVJlcRITLmxucnBj",
            "LlBheVJlcVN0cmluZxoNLmxucnBjLlBheVJlcSIcgtPkkwIWEhQvdjEvcGF5",
            "cmVxL3twYXlfcmVxfRJdCgxMaXN0UGF5bWVudHMSGi5sbnJwYy5MaXN0UGF5",
            "bWVudHNSZXF1ZXN0GhsubG5ycGMuTGlzdFBheW1lbnRzUmVzcG9uc2UiFILT",
            "5JMCDhIML3YxL3BheW1lbnRzEmwKEURlbGV0ZUFsbFBheW1lbnRzEh8ubG5y",
            "cGMuRGVsZXRlQWxsUGF5bWVudHNSZXF1ZXN0GiAubG5ycGMuRGVsZXRlQWxs",
            "UGF5bWVudHNSZXNwb25zZSIUgtPkkwIOKgwvdjEvcGF5bWVudHMSUwoNRGVz",
            "Y3JpYmVHcmFwaBIaLmxucnBjLkNoYW5uZWxHcmFwaFJlcXVlc3QaEy5sbnJw",
            "Yy5DaGFubmVsR3JhcGgiEYLT5JMCCxIJL3YxL2dyYXBoElsKC0dldENoYW5J",
            "bmZvEhYubG5ycGMuQ2hhbkluZm9SZXF1ZXN0GhIubG5ycGMuQ2hhbm5lbEVk",
            "Z2UiIILT5JMCGhIYL3YxL2dyYXBoL2VkZ2Uve2NoYW5faWR9ElgKC0dldE5v",
            "ZGVJbmZvEhYubG5ycGMuTm9kZUluZm9SZXF1ZXN0Gg8ubG5ycGMuTm9kZUlu",
            "Zm8iIILT5JMCGhIYL3YxL2dyYXBoL25vZGUve3B1Yl9rZXl9Em4KC1F1ZXJ5",
            "Um91dGVzEhkubG5ycGMuUXVlcnlSb3V0ZXNSZXF1ZXN0GhoubG5ycGMuUXVl",
            "cnlSb3V0ZXNSZXNwb25zZSIogtPkkwIiEiAvdjEvZ3JhcGgvcm91dGVzL3tw",
            "dWJfa2V5fS97YW10fRJXCg5HZXROZXR3b3JrSW5mbxIZLmxucnBjLk5ldHdv",
            "cmtJbmZvUmVxdWVzdBoSLmxucnBjLk5ldHdvcmtJbmZvIhaC0+STAhASDi92",
            "MS9ncmFwaC9pbmZvEjUKClN0b3BEYWVtb24SEi5sbnJwYy5TdG9wUmVxdWVz",
            "dBoTLmxucnBjLlN0b3BSZXNwb25zZRJXChVTdWJzY3JpYmVDaGFubmVsR3Jh",
            "cGgSIC5sbnJwYy5HcmFwaFRvcG9sb2d5U3Vic2NyaXB0aW9uGhoubG5ycGMu",
            "R3JhcGhUb3BvbG9neVVwZGF0ZTABEkEKCkRlYnVnTGV2ZWwSGC5sbnJwYy5E",
            "ZWJ1Z0xldmVsUmVxdWVzdBoZLmxucnBjLkRlYnVnTGV2ZWxSZXNwb25zZRJQ",
            "CglGZWVSZXBvcnQSFy5sbnJwYy5GZWVSZXBvcnRSZXF1ZXN0GhgubG5ycGMu",
            "RmVlUmVwb3J0UmVzcG9uc2UiEILT5JMCChIIL3YxL2ZlZXMSaQoTVXBkYXRl",
            "Q2hhbm5lbFBvbGljeRIaLmxucnBjLlBvbGljeVVwZGF0ZVJlcXVlc3QaGy5s",
            "bnJwYy5Qb2xpY3lVcGRhdGVSZXNwb25zZSIZgtPkkwITIg4vdjEvY2hhbnBv",
            "bGljeToBKhJtChFGb3J3YXJkaW5nSGlzdG9yeRIfLmxucnBjLkZvcndhcmRp",
            "bmdIaXN0b3J5UmVxdWVzdBogLmxucnBjLkZvcndhcmRpbmdIaXN0b3J5UmVz",
            "cG9uc2UiFYLT5JMCDyIKL3YxL3N3aXRjaDoBKmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GenSeedRequest), global::Lnrpc.GenSeedRequest.Parser, new[]{ "AezeedPassphrase", "SeedEntropy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GenSeedResponse), global::Lnrpc.GenSeedResponse.Parser, new[]{ "CipherSeedMnemonic", "EncipheredSeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InitWalletRequest), global::Lnrpc.InitWalletRequest.Parser, new[]{ "WalletPassword", "CipherSeedMnemonic", "AezeedPassphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InitWalletResponse), global::Lnrpc.InitWalletResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.UnlockWalletRequest), global::Lnrpc.UnlockWalletRequest.Parser, new[]{ "WalletPassword" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.UnlockWalletResponse), global::Lnrpc.UnlockWalletResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Transaction), global::Lnrpc.Transaction.Parser, new[]{ "TxHash", "Amount", "NumConfirmations", "BlockHash", "BlockHeight", "TimeStamp", "TotalFees", "DestAddresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetTransactionsRequest), global::Lnrpc.GetTransactionsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.TransactionDetails), global::Lnrpc.TransactionDetails.Parser, new[]{ "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendRequest), global::Lnrpc.SendRequest.Parser, new[]{ "Dest", "DestString", "Amt", "PaymentHash", "PaymentHashString", "PaymentRequest", "FinalCltvDelta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendResponse), global::Lnrpc.SendResponse.Parser, new[]{ "PaymentError", "PaymentPreimage", "PaymentRoute" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelPoint), global::Lnrpc.ChannelPoint.Parser, new[]{ "FundingTxidBytes", "FundingTxidStr", "OutputIndex" }, new[]{ "FundingTxid" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.LightningAddress), global::Lnrpc.LightningAddress.Parser, new[]{ "Pubkey", "Host" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendManyRequest), global::Lnrpc.SendManyRequest.Parser, new[]{ "AddrToAmount", "TargetConf", "SatPerByte" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendManyResponse), global::Lnrpc.SendManyResponse.Parser, new[]{ "Txid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendCoinsRequest), global::Lnrpc.SendCoinsRequest.Parser, new[]{ "Addr", "Amount", "TargetConf", "SatPerByte" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendCoinsResponse), global::Lnrpc.SendCoinsResponse.Parser, new[]{ "Txid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NewAddressRequest), global::Lnrpc.NewAddressRequest.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Lnrpc.NewAddressRequest.Types.AddressType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NewWitnessAddressRequest), global::Lnrpc.NewWitnessAddressRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NewAddressResponse), global::Lnrpc.NewAddressResponse.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SignMessageRequest), global::Lnrpc.SignMessageRequest.Parser, new[]{ "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SignMessageResponse), global::Lnrpc.SignMessageResponse.Parser, new[]{ "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.VerifyMessageRequest), global::Lnrpc.VerifyMessageRequest.Parser, new[]{ "Msg", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.VerifyMessageResponse), global::Lnrpc.VerifyMessageResponse.Parser, new[]{ "Valid", "Pubkey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConnectPeerRequest), global::Lnrpc.ConnectPeerRequest.Parser, new[]{ "Addr", "Perm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConnectPeerResponse), global::Lnrpc.ConnectPeerResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DisconnectPeerRequest), global::Lnrpc.DisconnectPeerRequest.Parser, new[]{ "PubKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DisconnectPeerResponse), global::Lnrpc.DisconnectPeerResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.HTLC), global::Lnrpc.HTLC.Parser, new[]{ "Incoming", "Amount", "HashLock", "ExpirationHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Channel), global::Lnrpc.Channel.Parser, new[]{ "Active", "RemotePubkey", "ChannelPoint", "ChanId", "Capacity", "LocalBalance", "RemoteBalance", "CommitFee", "CommitWeight", "FeePerKw", "UnsettledBalance", "TotalSatoshisSent", "TotalSatoshisReceived", "NumUpdates", "PendingHtlcs", "CsvDelay", "Private" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListChannelsRequest), global::Lnrpc.ListChannelsRequest.Parser, new[]{ "ActiveOnly", "InactiveOnly", "PublicOnly", "PrivateOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListChannelsResponse), global::Lnrpc.ListChannelsResponse.Parser, new[]{ "Channels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Peer), global::Lnrpc.Peer.Parser, new[]{ "PubKey", "Address", "BytesSent", "BytesRecv", "SatSent", "SatRecv", "Inbound", "PingTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPeersRequest), global::Lnrpc.ListPeersRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPeersResponse), global::Lnrpc.ListPeersResponse.Parser, new[]{ "Peers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetInfoRequest), global::Lnrpc.GetInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetInfoResponse), global::Lnrpc.GetInfoResponse.Parser, new[]{ "IdentityPubkey", "Alias", "NumPendingChannels", "NumActiveChannels", "NumPeers", "BlockHeight", "BlockHash", "SyncedToChain", "Testnet", "Chains", "Uris", "BestHeaderTimestamp", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConfirmationUpdate), global::Lnrpc.ConfirmationUpdate.Parser, new[]{ "BlockSha", "BlockHeight", "NumConfsLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelOpenUpdate), global::Lnrpc.ChannelOpenUpdate.Parser, new[]{ "ChannelPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelCloseUpdate), global::Lnrpc.ChannelCloseUpdate.Parser, new[]{ "ClosingTxid", "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.CloseChannelRequest), global::Lnrpc.CloseChannelRequest.Parser, new[]{ "ChannelPoint", "Force", "TargetConf", "SatPerByte" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.CloseStatusUpdate), global::Lnrpc.CloseStatusUpdate.Parser, new[]{ "ClosePending", "Confirmation", "ChanClose" }, new[]{ "Update" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingUpdate), global::Lnrpc.PendingUpdate.Parser, new[]{ "Txid", "OutputIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.OpenChannelRequest), global::Lnrpc.OpenChannelRequest.Parser, new[]{ "NodePubkey", "NodePubkeyString", "LocalFundingAmount", "PushSat", "TargetConf", "SatPerByte", "Private", "MinHtlcMsat", "RemoteCsvDelay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.OpenStatusUpdate), global::Lnrpc.OpenStatusUpdate.Parser, new[]{ "ChanPending", "Confirmation", "ChanOpen" }, new[]{ "Update" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingHTLC), global::Lnrpc.PendingHTLC.Parser, new[]{ "Incoming", "Amount", "Outpoint", "MaturityHeight", "BlocksTilMaturity", "Stage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsRequest), global::Lnrpc.PendingChannelsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse), global::Lnrpc.PendingChannelsResponse.Parser, new[]{ "TotalLimboBalance", "PendingOpenChannels", "PendingClosingChannels", "PendingForceClosingChannels" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.PendingChannel), global::Lnrpc.PendingChannelsResponse.Types.PendingChannel.Parser, new[]{ "RemoteNodePub", "ChannelPoint", "Capacity", "LocalBalance", "RemoteBalance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel), global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel.Parser, new[]{ "Channel", "ConfirmationHeight", "CommitFee", "CommitWeight", "FeePerKw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel), global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel.Parser, new[]{ "Channel", "ClosingTxid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel), global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Parser, new[]{ "Channel", "ClosingTxid", "LimboBalance", "MaturityHeight", "BlocksTilMaturity", "RecoveredBalance", "PendingHtlcs" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.WalletBalanceRequest), global::Lnrpc.WalletBalanceRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.WalletBalanceResponse), global::Lnrpc.WalletBalanceResponse.Parser, new[]{ "TotalBalance", "ConfirmedBalance", "UnconfirmedBalance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBalanceRequest), global::Lnrpc.ChannelBalanceRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBalanceResponse), global::Lnrpc.ChannelBalanceResponse.Parser, new[]{ "Balance", "PendingOpenBalance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.QueryRoutesRequest), global::Lnrpc.QueryRoutesRequest.Parser, new[]{ "PubKey", "Amt", "NumRoutes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.QueryRoutesResponse), global::Lnrpc.QueryRoutesResponse.Parser, new[]{ "Routes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Hop), global::Lnrpc.Hop.Parser, new[]{ "ChanId", "ChanCapacity", "AmtToForward", "Fee", "Expiry", "AmtToForwardMsat", "FeeMsat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Route), global::Lnrpc.Route.Parser, new[]{ "TotalTimeLock", "TotalFees", "TotalAmt", "Hops", "TotalFeesMsat", "TotalAmtMsat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeInfoRequest), global::Lnrpc.NodeInfoRequest.Parser, new[]{ "PubKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeInfo), global::Lnrpc.NodeInfo.Parser, new[]{ "Node", "NumChannels", "TotalCapacity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.LightningNode), global::Lnrpc.LightningNode.Parser, new[]{ "LastUpdate", "PubKey", "Alias", "Addresses", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeAddress), global::Lnrpc.NodeAddress.Parser, new[]{ "Network", "Addr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RoutingPolicy), global::Lnrpc.RoutingPolicy.Parser, new[]{ "TimeLockDelta", "MinHtlc", "FeeBaseMsat", "FeeRateMilliMsat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEdge), global::Lnrpc.ChannelEdge.Parser, new[]{ "ChannelId", "ChanPoint", "LastUpdate", "Node1Pub", "Node2Pub", "Capacity", "Node1Policy", "Node2Policy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelGraphRequest), global::Lnrpc.ChannelGraphRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelGraph), global::Lnrpc.ChannelGraph.Parser, new[]{ "Nodes", "Edges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanInfoRequest), global::Lnrpc.ChanInfoRequest.Parser, new[]{ "ChanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NetworkInfoRequest), global::Lnrpc.NetworkInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NetworkInfo), global::Lnrpc.NetworkInfo.Parser, new[]{ "GraphDiameter", "AvgOutDegree", "MaxOutDegree", "NumNodes", "NumChannels", "TotalNetworkCapacity", "AvgChannelSize", "MinChannelSize", "MaxChannelSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.StopRequest), global::Lnrpc.StopRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.StopResponse), global::Lnrpc.StopResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GraphTopologySubscription), global::Lnrpc.GraphTopologySubscription.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GraphTopologyUpdate), global::Lnrpc.GraphTopologyUpdate.Parser, new[]{ "NodeUpdates", "ChannelUpdates", "ClosedChans" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeUpdate), global::Lnrpc.NodeUpdate.Parser, new[]{ "Addresses", "IdentityKey", "GlobalFeatures", "Alias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEdgeUpdate), global::Lnrpc.ChannelEdgeUpdate.Parser, new[]{ "ChanId", "ChanPoint", "Capacity", "RoutingPolicy", "AdvertisingNode", "ConnectingNode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ClosedChannelUpdate), global::Lnrpc.ClosedChannelUpdate.Parser, new[]{ "ChanId", "Capacity", "ClosedHeight", "ChanPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Invoice), global::Lnrpc.Invoice.Parser, new[]{ "Memo", "Receipt", "RPreimage", "RHash", "Value", "Settled", "CreationDate", "SettleDate", "PaymentRequest", "DescriptionHash", "Expiry", "FallbackAddr", "CltvExpiry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AddInvoiceResponse), global::Lnrpc.AddInvoiceResponse.Parser, new[]{ "RHash", "PaymentRequest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PaymentHash), global::Lnrpc.PaymentHash.Parser, new[]{ "RHashStr", "RHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListInvoiceRequest), global::Lnrpc.ListInvoiceRequest.Parser, new[]{ "PendingOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListInvoiceResponse), global::Lnrpc.ListInvoiceResponse.Parser, new[]{ "Invoices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InvoiceSubscription), global::Lnrpc.InvoiceSubscription.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Payment), global::Lnrpc.Payment.Parser, new[]{ "PaymentHash", "Value", "CreationDate", "Path", "Fee", "PaymentPreimage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPaymentsRequest), global::Lnrpc.ListPaymentsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPaymentsResponse), global::Lnrpc.ListPaymentsResponse.Parser, new[]{ "Payments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DeleteAllPaymentsRequest), global::Lnrpc.DeleteAllPaymentsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DeleteAllPaymentsResponse), global::Lnrpc.DeleteAllPaymentsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DebugLevelRequest), global::Lnrpc.DebugLevelRequest.Parser, new[]{ "Show", "LevelSpec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DebugLevelResponse), global::Lnrpc.DebugLevelResponse.Parser, new[]{ "SubSystems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PayReqString), global::Lnrpc.PayReqString.Parser, new[]{ "PayReq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PayReq), global::Lnrpc.PayReq.Parser, new[]{ "Destination", "PaymentHash", "NumSatoshis", "Timestamp", "Expiry", "Description", "DescriptionHash", "FallbackAddr", "CltvExpiry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FeeReportRequest), global::Lnrpc.FeeReportRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelFeeReport), global::Lnrpc.ChannelFeeReport.Parser, new[]{ "ChanPoint", "BaseFeeMsat", "FeePerMil", "FeeRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FeeReportResponse), global::Lnrpc.FeeReportResponse.Parser, new[]{ "ChannelFees", "DayFeeSum", "WeekFeeSum", "MonthFeeSum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PolicyUpdateRequest), global::Lnrpc.PolicyUpdateRequest.Parser, new[]{ "Global", "ChanPoint", "BaseFeeMsat", "FeeRate", "TimeLockDelta" }, new[]{ "Scope" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PolicyUpdateResponse), global::Lnrpc.PolicyUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingHistoryRequest), global::Lnrpc.ForwardingHistoryRequest.Parser, new[]{ "StartTime", "EndTime", "IndexOffset", "NumMaxEvents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingEvent), global::Lnrpc.ForwardingEvent.Parser, new[]{ "Timestamp", "ChanIdIn", "ChanIdOut", "AmtIn", "AmtOut", "Fee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingHistoryResponse), global::Lnrpc.ForwardingHistoryResponse.Parser, new[]{ "ForwardingEvents", "LastOffsetIndex" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GenSeedRequest : pb::IMessage<GenSeedRequest> {
    private static readonly pb::MessageParser<GenSeedRequest> _parser = new pb::MessageParser<GenSeedRequest>(() => new GenSeedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenSeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedRequest(GenSeedRequest other) : this() {
      aezeedPassphrase_ = other.aezeedPassphrase_;
      seedEntropy_ = other.seedEntropy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedRequest Clone() {
      return new GenSeedRequest(this);
    }

    /// <summary>Field number for the "aezeed_passphrase" field.</summary>
    public const int AezeedPassphraseFieldNumber = 1;
    private pb::ByteString aezeedPassphrase_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///aezeed_passphrase is an optional user provided passphrase that will be used
    ///to encrypt the generated aezeed cipher seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AezeedPassphrase {
      get { return aezeedPassphrase_; }
      set {
        aezeedPassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seed_entropy" field.</summary>
    public const int SeedEntropyFieldNumber = 2;
    private pb::ByteString seedEntropy_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///seed_entropy is an optional 16-bytes generated via CSPRNG. If not
    ///specified, then a fresh set of randomness will be used to create the seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SeedEntropy {
      get { return seedEntropy_; }
      set {
        seedEntropy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenSeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenSeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AezeedPassphrase != other.AezeedPassphrase) return false;
      if (SeedEntropy != other.SeedEntropy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AezeedPassphrase.Length != 0) hash ^= AezeedPassphrase.GetHashCode();
      if (SeedEntropy.Length != 0) hash ^= SeedEntropy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AezeedPassphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AezeedPassphrase);
      }
      if (SeedEntropy.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SeedEntropy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AezeedPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AezeedPassphrase);
      }
      if (SeedEntropy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SeedEntropy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenSeedRequest other) {
      if (other == null) {
        return;
      }
      if (other.AezeedPassphrase.Length != 0) {
        AezeedPassphrase = other.AezeedPassphrase;
      }
      if (other.SeedEntropy.Length != 0) {
        SeedEntropy = other.SeedEntropy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AezeedPassphrase = input.ReadBytes();
            break;
          }
          case 18: {
            SeedEntropy = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenSeedResponse : pb::IMessage<GenSeedResponse> {
    private static readonly pb::MessageParser<GenSeedResponse> _parser = new pb::MessageParser<GenSeedResponse>(() => new GenSeedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenSeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedResponse(GenSeedResponse other) : this() {
      cipherSeedMnemonic_ = other.cipherSeedMnemonic_.Clone();
      encipheredSeed_ = other.encipheredSeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedResponse Clone() {
      return new GenSeedResponse(this);
    }

    /// <summary>Field number for the "cipher_seed_mnemonic" field.</summary>
    public const int CipherSeedMnemonicFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_cipherSeedMnemonic_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> cipherSeedMnemonic_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
    ///cipher seed obtained by the user. This field is optional, as if not
    ///provided, then the daemon will generate a new cipher seed for the user.
    ///Otherwise, then the daemon will attempt to recover the wallet state linked
    ///to this cipher seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CipherSeedMnemonic {
      get { return cipherSeedMnemonic_; }
    }

    /// <summary>Field number for the "enciphered_seed" field.</summary>
    public const int EncipheredSeedFieldNumber = 2;
    private pb::ByteString encipheredSeed_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
    ///cipher text before run through our mnemonic encoding scheme.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncipheredSeed {
      get { return encipheredSeed_; }
      set {
        encipheredSeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenSeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenSeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cipherSeedMnemonic_.Equals(other.cipherSeedMnemonic_)) return false;
      if (EncipheredSeed != other.EncipheredSeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cipherSeedMnemonic_.GetHashCode();
      if (EncipheredSeed.Length != 0) hash ^= EncipheredSeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cipherSeedMnemonic_.WriteTo(output, _repeated_cipherSeedMnemonic_codec);
      if (EncipheredSeed.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncipheredSeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cipherSeedMnemonic_.CalculateSize(_repeated_cipherSeedMnemonic_codec);
      if (EncipheredSeed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncipheredSeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenSeedResponse other) {
      if (other == null) {
        return;
      }
      cipherSeedMnemonic_.Add(other.cipherSeedMnemonic_);
      if (other.EncipheredSeed.Length != 0) {
        EncipheredSeed = other.EncipheredSeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cipherSeedMnemonic_.AddEntriesFrom(input, _repeated_cipherSeedMnemonic_codec);
            break;
          }
          case 18: {
            EncipheredSeed = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitWalletRequest : pb::IMessage<InitWalletRequest> {
    private static readonly pb::MessageParser<InitWalletRequest> _parser = new pb::MessageParser<InitWalletRequest>(() => new InitWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletRequest(InitWalletRequest other) : this() {
      walletPassword_ = other.walletPassword_;
      cipherSeedMnemonic_ = other.cipherSeedMnemonic_.Clone();
      aezeedPassphrase_ = other.aezeedPassphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletRequest Clone() {
      return new InitWalletRequest(this);
    }

    /// <summary>Field number for the "wallet_password" field.</summary>
    public const int WalletPasswordFieldNumber = 1;
    private pb::ByteString walletPassword_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///wallet_password is the passphrase that should be used to encrypt the
    ///wallet. This MUST be at least 8 chars in length. After creation, this
    ///password is required to unlock the daemon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WalletPassword {
      get { return walletPassword_; }
      set {
        walletPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cipher_seed_mnemonic" field.</summary>
    public const int CipherSeedMnemonicFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cipherSeedMnemonic_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cipherSeedMnemonic_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
    ///cipher seed obtained by the user. This may have been generated by the
    ///GenSeed method, or be an existing seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CipherSeedMnemonic {
      get { return cipherSeedMnemonic_; }
    }

    /// <summary>Field number for the "aezeed_passphrase" field.</summary>
    public const int AezeedPassphraseFieldNumber = 3;
    private pb::ByteString aezeedPassphrase_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///aezeed_passphrase is an optional user provided passphrase that will be used
    ///to encrypt the generated aezeed cipher seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AezeedPassphrase {
      get { return aezeedPassphrase_; }
      set {
        aezeedPassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WalletPassword != other.WalletPassword) return false;
      if(!cipherSeedMnemonic_.Equals(other.cipherSeedMnemonic_)) return false;
      if (AezeedPassphrase != other.AezeedPassphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WalletPassword.Length != 0) hash ^= WalletPassword.GetHashCode();
      hash ^= cipherSeedMnemonic_.GetHashCode();
      if (AezeedPassphrase.Length != 0) hash ^= AezeedPassphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WalletPassword.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(WalletPassword);
      }
      cipherSeedMnemonic_.WriteTo(output, _repeated_cipherSeedMnemonic_codec);
      if (AezeedPassphrase.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AezeedPassphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WalletPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WalletPassword);
      }
      size += cipherSeedMnemonic_.CalculateSize(_repeated_cipherSeedMnemonic_codec);
      if (AezeedPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AezeedPassphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.WalletPassword.Length != 0) {
        WalletPassword = other.WalletPassword;
      }
      cipherSeedMnemonic_.Add(other.cipherSeedMnemonic_);
      if (other.AezeedPassphrase.Length != 0) {
        AezeedPassphrase = other.AezeedPassphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WalletPassword = input.ReadBytes();
            break;
          }
          case 18: {
            cipherSeedMnemonic_.AddEntriesFrom(input, _repeated_cipherSeedMnemonic_codec);
            break;
          }
          case 26: {
            AezeedPassphrase = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitWalletResponse : pb::IMessage<InitWalletResponse> {
    private static readonly pb::MessageParser<InitWalletResponse> _parser = new pb::MessageParser<InitWalletResponse>(() => new InitWalletResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitWalletResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletResponse(InitWalletResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletResponse Clone() {
      return new InitWalletResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitWalletResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitWalletResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class UnlockWalletRequest : pb::IMessage<UnlockWalletRequest> {
    private static readonly pb::MessageParser<UnlockWalletRequest> _parser = new pb::MessageParser<UnlockWalletRequest>(() => new UnlockWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest(UnlockWalletRequest other) : this() {
      walletPassword_ = other.walletPassword_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest Clone() {
      return new UnlockWalletRequest(this);
    }

    /// <summary>Field number for the "wallet_password" field.</summary>
    public const int WalletPasswordFieldNumber = 1;
    private pb::ByteString walletPassword_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///wallet_password should be the current valid passphrase for the daemon. This
    ///will be required to decrypt on-disk material that the daemon requires to
    ///function properly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WalletPassword {
      get { return walletPassword_; }
      set {
        walletPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WalletPassword != other.WalletPassword) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WalletPassword.Length != 0) hash ^= WalletPassword.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WalletPassword.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(WalletPassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WalletPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WalletPassword);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.WalletPassword.Length != 0) {
        WalletPassword = other.WalletPassword;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WalletPassword = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnlockWalletResponse : pb::IMessage<UnlockWalletResponse> {
    private static readonly pb::MessageParser<UnlockWalletResponse> _parser = new pb::MessageParser<UnlockWalletResponse>(() => new UnlockWalletResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockWalletResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletResponse(UnlockWalletResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletResponse Clone() {
      return new UnlockWalletResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockWalletResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockWalletResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      txHash_ = other.txHash_;
      amount_ = other.amount_;
      numConfirmations_ = other.numConfirmations_;
      blockHash_ = other.blockHash_;
      blockHeight_ = other.blockHeight_;
      timeStamp_ = other.timeStamp_;
      totalFees_ = other.totalFees_;
      destAddresses_ = other.destAddresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "tx_hash" field.</summary>
    public const int TxHashFieldNumber = 1;
    private string txHash_ = "";
    /// <summary>
    //// The transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxHash {
      get { return txHash_; }
      set {
        txHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    //// The transaction ammount, denominated in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "num_confirmations" field.</summary>
    public const int NumConfirmationsFieldNumber = 3;
    private int numConfirmations_;
    /// <summary>
    //// The number of confirmations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumConfirmations {
      get { return numConfirmations_; }
      set {
        numConfirmations_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 4;
    private string blockHash_ = "";
    /// <summary>
    //// The hash of the block this transaction was included in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 5;
    private int blockHeight_;
    /// <summary>
    //// The height of the block this transaction was included in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private long timeStamp_;
    /// <summary>
    //// Timestamp of this transaction 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "total_fees" field.</summary>
    public const int TotalFeesFieldNumber = 7;
    private long totalFees_;
    /// <summary>
    //// Fees paid for this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFees {
      get { return totalFees_; }
      set {
        totalFees_ = value;
      }
    }

    /// <summary>Field number for the "dest_addresses" field.</summary>
    public const int DestAddressesFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_destAddresses_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> destAddresses_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// Addresses that received funds for this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DestAddresses {
      get { return destAddresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxHash != other.TxHash) return false;
      if (Amount != other.Amount) return false;
      if (NumConfirmations != other.NumConfirmations) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (TotalFees != other.TotalFees) return false;
      if(!destAddresses_.Equals(other.destAddresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxHash.Length != 0) hash ^= TxHash.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (NumConfirmations != 0) hash ^= NumConfirmations.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (TotalFees != 0L) hash ^= TotalFees.GetHashCode();
      hash ^= destAddresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TxHash);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (NumConfirmations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumConfirmations);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BlockHash);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlockHeight);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TimeStamp);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalFees);
      }
      destAddresses_.WriteTo(output, _repeated_destAddresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxHash);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (NumConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumConfirmations);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (TotalFees != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFees);
      }
      size += destAddresses_.CalculateSize(_repeated_destAddresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.TxHash.Length != 0) {
        TxHash = other.TxHash;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.NumConfirmations != 0) {
        NumConfirmations = other.NumConfirmations;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.TotalFees != 0L) {
        TotalFees = other.TotalFees;
      }
      destAddresses_.Add(other.destAddresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TxHash = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            NumConfirmations = input.ReadInt32();
            break;
          }
          case 34: {
            BlockHash = input.ReadString();
            break;
          }
          case 40: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 48: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 56: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 66: {
            destAddresses_.AddEntriesFrom(input, _repeated_destAddresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionsRequest : pb::IMessage<GetTransactionsRequest> {
    private static readonly pb::MessageParser<GetTransactionsRequest> _parser = new pb::MessageParser<GetTransactionsRequest>(() => new GetTransactionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest(GetTransactionsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest Clone() {
      return new GetTransactionsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TransactionDetails : pb::IMessage<TransactionDetails> {
    private static readonly pb::MessageParser<TransactionDetails> _parser = new pb::MessageParser<TransactionDetails>(() => new TransactionDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails(TransactionDetails other) : this() {
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails Clone() {
      return new TransactionDetails(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Transaction> transactions_ = new pbc::RepeatedField<global::Lnrpc.Transaction>();
    /// <summary>
    //// The list of transactions relevant to the wallet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionDetails other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendRequest : pb::IMessage<SendRequest> {
    private static readonly pb::MessageParser<SendRequest> _parser = new pb::MessageParser<SendRequest>(() => new SendRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest(SendRequest other) : this() {
      dest_ = other.dest_;
      destString_ = other.destString_;
      amt_ = other.amt_;
      paymentHash_ = other.paymentHash_;
      paymentHashString_ = other.paymentHashString_;
      paymentRequest_ = other.paymentRequest_;
      finalCltvDelta_ = other.finalCltvDelta_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest Clone() {
      return new SendRequest(this);
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 1;
    private pb::ByteString dest_ = pb::ByteString.Empty;
    /// <summary>
    //// The identity pubkey of the payment recipient
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dest {
      get { return dest_; }
      set {
        dest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest_string" field.</summary>
    public const int DestStringFieldNumber = 2;
    private string destString_ = "";
    /// <summary>
    //// The hex-encoded identity pubkey of the payment recipient
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestString {
      get { return destString_; }
      set {
        destString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 3;
    private long amt_;
    /// <summary>
    //// Number of satoshis to send. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 4;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The hash to use within the payment's HTLC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_hash_string" field.</summary>
    public const int PaymentHashStringFieldNumber = 5;
    private string paymentHashString_ = "";
    /// <summary>
    //// The hex-encoded hash to use within the payment's HTLC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHashString {
      get { return paymentHashString_; }
      set {
        paymentHashString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 6;
    private string paymentRequest_ = "";
    /// <summary>
    ///*
    ///A bare-bones invoice for a payment within the Lightning Network.  With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 7;
    private int finalCltvDelta_;
    /// <summary>
    //// The CLTV delta from the current height that should be used to set the timelock for the final hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dest != other.Dest) return false;
      if (DestString != other.DestString) return false;
      if (Amt != other.Amt) return false;
      if (PaymentHash != other.PaymentHash) return false;
      if (PaymentHashString != other.PaymentHashString) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dest.Length != 0) hash ^= Dest.GetHashCode();
      if (DestString.Length != 0) hash ^= DestString.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (PaymentHashString.Length != 0) hash ^= PaymentHashString.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Dest);
      }
      if (DestString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestString);
      }
      if (Amt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amt);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentHashString);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentRequest);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FinalCltvDelta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dest);
      }
      if (DestString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestString);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHashString);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendRequest other) {
      if (other == null) {
        return;
      }
      if (other.Dest.Length != 0) {
        Dest = other.Dest;
      }
      if (other.DestString.Length != 0) {
        DestString = other.DestString;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.PaymentHashString.Length != 0) {
        PaymentHashString = other.PaymentHashString;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Dest = input.ReadBytes();
            break;
          }
          case 18: {
            DestString = input.ReadString();
            break;
          }
          case 24: {
            Amt = input.ReadInt64();
            break;
          }
          case 34: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 42: {
            PaymentHashString = input.ReadString();
            break;
          }
          case 50: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 56: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendResponse : pb::IMessage<SendResponse> {
    private static readonly pb::MessageParser<SendResponse> _parser = new pb::MessageParser<SendResponse>(() => new SendResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse(SendResponse other) : this() {
      paymentError_ = other.paymentError_;
      paymentPreimage_ = other.paymentPreimage_;
      PaymentRoute = other.paymentRoute_ != null ? other.PaymentRoute.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse Clone() {
      return new SendResponse(this);
    }

    /// <summary>Field number for the "payment_error" field.</summary>
    public const int PaymentErrorFieldNumber = 1;
    private string paymentError_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentError {
      get { return paymentError_; }
      set {
        paymentError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_preimage" field.</summary>
    public const int PaymentPreimageFieldNumber = 2;
    private pb::ByteString paymentPreimage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentPreimage {
      get { return paymentPreimage_; }
      set {
        paymentPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_route" field.</summary>
    public const int PaymentRouteFieldNumber = 3;
    private global::Lnrpc.Route paymentRoute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route PaymentRoute {
      get { return paymentRoute_; }
      set {
        paymentRoute_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentError != other.PaymentError) return false;
      if (PaymentPreimage != other.PaymentPreimage) return false;
      if (!object.Equals(PaymentRoute, other.PaymentRoute)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentError.Length != 0) hash ^= PaymentError.GetHashCode();
      if (PaymentPreimage.Length != 0) hash ^= PaymentPreimage.GetHashCode();
      if (paymentRoute_ != null) hash ^= PaymentRoute.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentError.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentError);
      }
      if (PaymentPreimage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PaymentPreimage);
      }
      if (paymentRoute_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PaymentRoute);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentError.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentError);
      }
      if (PaymentPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentPreimage);
      }
      if (paymentRoute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentRoute);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendResponse other) {
      if (other == null) {
        return;
      }
      if (other.PaymentError.Length != 0) {
        PaymentError = other.PaymentError;
      }
      if (other.PaymentPreimage.Length != 0) {
        PaymentPreimage = other.PaymentPreimage;
      }
      if (other.paymentRoute_ != null) {
        if (paymentRoute_ == null) {
          paymentRoute_ = new global::Lnrpc.Route();
        }
        PaymentRoute.MergeFrom(other.PaymentRoute);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PaymentError = input.ReadString();
            break;
          }
          case 18: {
            PaymentPreimage = input.ReadBytes();
            break;
          }
          case 26: {
            if (paymentRoute_ == null) {
              paymentRoute_ = new global::Lnrpc.Route();
            }
            input.ReadMessage(paymentRoute_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelPoint : pb::IMessage<ChannelPoint> {
    private static readonly pb::MessageParser<ChannelPoint> _parser = new pb::MessageParser<ChannelPoint>(() => new ChannelPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint(ChannelPoint other) : this() {
      outputIndex_ = other.outputIndex_;
      switch (other.FundingTxidCase) {
        case FundingTxidOneofCase.FundingTxidBytes:
          FundingTxidBytes = other.FundingTxidBytes;
          break;
        case FundingTxidOneofCase.FundingTxidStr:
          FundingTxidStr = other.FundingTxidStr;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint Clone() {
      return new ChannelPoint(this);
    }

    /// <summary>Field number for the "funding_txid_bytes" field.</summary>
    public const int FundingTxidBytesFieldNumber = 1;
    /// <summary>
    //// Txid of the funding transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FundingTxidBytes {
      get { return fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes ? (pb::ByteString) fundingTxid_ : pb::ByteString.Empty; }
      set {
        fundingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fundingTxidCase_ = FundingTxidOneofCase.FundingTxidBytes;
      }
    }

    /// <summary>Field number for the "funding_txid_str" field.</summary>
    public const int FundingTxidStrFieldNumber = 2;
    /// <summary>
    //// Hex-encoded string representing the funding transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FundingTxidStr {
      get { return fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr ? (string) fundingTxid_ : ""; }
      set {
        fundingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fundingTxidCase_ = FundingTxidOneofCase.FundingTxidStr;
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 3;
    private uint outputIndex_;
    /// <summary>
    //// The index of the output of the funding transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    private object fundingTxid_;
    /// <summary>Enum of possible cases for the "funding_txid" oneof.</summary>
    public enum FundingTxidOneofCase {
      None = 0,
      FundingTxidBytes = 1,
      FundingTxidStr = 2,
    }
    private FundingTxidOneofCase fundingTxidCase_ = FundingTxidOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTxidOneofCase FundingTxidCase {
      get { return fundingTxidCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFundingTxid() {
      fundingTxidCase_ = FundingTxidOneofCase.None;
      fundingTxid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FundingTxidBytes != other.FundingTxidBytes) return false;
      if (FundingTxidStr != other.FundingTxidStr) return false;
      if (OutputIndex != other.OutputIndex) return false;
      if (FundingTxidCase != other.FundingTxidCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) hash ^= FundingTxidBytes.GetHashCode();
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) hash ^= FundingTxidStr.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      hash ^= (int) fundingTxidCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) {
        output.WriteRawTag(10);
        output.WriteBytes(FundingTxidBytes);
      }
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) {
        output.WriteRawTag(18);
        output.WriteString(FundingTxidStr);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OutputIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FundingTxidBytes);
      }
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FundingTxidStr);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelPoint other) {
      if (other == null) {
        return;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
      switch (other.FundingTxidCase) {
        case FundingTxidOneofCase.FundingTxidBytes:
          FundingTxidBytes = other.FundingTxidBytes;
          break;
        case FundingTxidOneofCase.FundingTxidStr:
          FundingTxidStr = other.FundingTxidStr;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FundingTxidBytes = input.ReadBytes();
            break;
          }
          case 18: {
            FundingTxidStr = input.ReadString();
            break;
          }
          case 24: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LightningAddress : pb::IMessage<LightningAddress> {
    private static readonly pb::MessageParser<LightningAddress> _parser = new pb::MessageParser<LightningAddress>(() => new LightningAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightningAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress(LightningAddress other) : this() {
      pubkey_ = other.pubkey_;
      host_ = other.host_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress Clone() {
      return new LightningAddress(this);
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 1;
    private string pubkey_ = "";
    /// <summary>
    //// The identity pubkey of the Lightning node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    //// The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightningAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightningAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pubkey != other.Pubkey) return false;
      if (Host != other.Host) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pubkey);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightningAddress other) {
      if (other == null) {
        return;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Pubkey = input.ReadString();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendManyRequest : pb::IMessage<SendManyRequest> {
    private static readonly pb::MessageParser<SendManyRequest> _parser = new pb::MessageParser<SendManyRequest>(() => new SendManyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendManyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest(SendManyRequest other) : this() {
      addrToAmount_ = other.addrToAmount_.Clone();
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest Clone() {
      return new SendManyRequest(this);
    }

    /// <summary>Field number for the "AddrToAmount" field.</summary>
    public const int AddrToAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_addrToAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 10);
    private readonly pbc::MapField<string, long> addrToAmount_ = new pbc::MapField<string, long>();
    /// <summary>
    //// The map from addresses to amounts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AddrToAmount {
      get { return addrToAmount_; }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that this transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 5;
    private long satPerByte_;
    /// <summary>
    //// A manual fee rate set in sat/byte that should be used when crafting the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendManyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendManyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AddrToAmount.Equals(other.AddrToAmount)) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AddrToAmount.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addrToAmount_.WriteTo(output, _map_addrToAmount_codec);
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SatPerByte);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addrToAmount_.CalculateSize(_map_addrToAmount_codec);
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendManyRequest other) {
      if (other == null) {
        return;
      }
      addrToAmount_.Add(other.addrToAmount_);
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addrToAmount_.AddEntriesFrom(input, _map_addrToAmount_codec);
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 40: {
            SatPerByte = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendManyResponse : pb::IMessage<SendManyResponse> {
    private static readonly pb::MessageParser<SendManyResponse> _parser = new pb::MessageParser<SendManyResponse>(() => new SendManyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendManyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse(SendManyResponse other) : this() {
      txid_ = other.txid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse Clone() {
      return new SendManyResponse(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private string txid_ = "";
    /// <summary>
    //// The id of the transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendManyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendManyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Txid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendManyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Txid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendCoinsRequest : pb::IMessage<SendCoinsRequest> {
    private static readonly pb::MessageParser<SendCoinsRequest> _parser = new pb::MessageParser<SendCoinsRequest>(() => new SendCoinsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCoinsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest(SendCoinsRequest other) : this() {
      addr_ = other.addr_;
      amount_ = other.amount_;
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest Clone() {
      return new SendCoinsRequest(this);
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private string addr_ = "";
    /// <summary>
    //// The address to send coins to 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    //// The amount in satoshis to send
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that this transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 5;
    private long satPerByte_;
    /// <summary>
    //// A manual fee rate set in sat/byte that should be used when crafting the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCoinsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCoinsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Addr != other.Addr) return false;
      if (Amount != other.Amount) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Addr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Addr);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SatPerByte);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCoinsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Addr = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 40: {
            SatPerByte = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendCoinsResponse : pb::IMessage<SendCoinsResponse> {
    private static readonly pb::MessageParser<SendCoinsResponse> _parser = new pb::MessageParser<SendCoinsResponse>(() => new SendCoinsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCoinsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse(SendCoinsResponse other) : this() {
      txid_ = other.txid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse Clone() {
      return new SendCoinsResponse(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private string txid_ = "";
    /// <summary>
    //// The transaction ID of the transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCoinsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCoinsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Txid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCoinsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Txid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 
  ///`AddressType` has to be one of:
  ///
  ///- `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)
  ///- `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)
  ///- `p2pkh`:  Pay to public key hash (`PUBKEY_HASH` = 2)
  /// </summary>
  public sealed partial class NewAddressRequest : pb::IMessage<NewAddressRequest> {
    private static readonly pb::MessageParser<NewAddressRequest> _parser = new pb::MessageParser<NewAddressRequest>(() => new NewAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest(NewAddressRequest other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest Clone() {
      return new NewAddressRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Lnrpc.NewAddressRequest.Types.AddressType type_ = 0;
    /// <summary>
    //// The address type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.NewAddressRequest.Types.AddressType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Lnrpc.NewAddressRequest.Types.AddressType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NewAddressRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AddressType {
        [pbr::OriginalName("WITNESS_PUBKEY_HASH")] WitnessPubkeyHash = 0,
        [pbr::OriginalName("NESTED_PUBKEY_HASH")] NestedPubkeyHash = 1,
      }

    }
    #endregion

  }

  public sealed partial class NewWitnessAddressRequest : pb::IMessage<NewWitnessAddressRequest> {
    private static readonly pb::MessageParser<NewWitnessAddressRequest> _parser = new pb::MessageParser<NewWitnessAddressRequest>(() => new NewWitnessAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewWitnessAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewWitnessAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewWitnessAddressRequest(NewWitnessAddressRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewWitnessAddressRequest Clone() {
      return new NewWitnessAddressRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewWitnessAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewWitnessAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewWitnessAddressRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class NewAddressResponse : pb::IMessage<NewAddressResponse> {
    private static readonly pb::MessageParser<NewAddressResponse> _parser = new pb::MessageParser<NewAddressResponse>(() => new NewAddressResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewAddressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse(NewAddressResponse other) : this() {
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse Clone() {
      return new NewAddressResponse(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    //// The newly generated wallet address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewAddressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewAddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewAddressResponse other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignMessageRequest : pb::IMessage<SignMessageRequest> {
    private static readonly pb::MessageParser<SignMessageRequest> _parser = new pb::MessageParser<SignMessageRequest>(() => new SignMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest(SignMessageRequest other) : this() {
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest Clone() {
      return new SignMessageRequest(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    //// The message to be signed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignMessageResponse : pb::IMessage<SignMessageResponse> {
    private static readonly pb::MessageParser<SignMessageResponse> _parser = new pb::MessageParser<SignMessageResponse>(() => new SignMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse(SignMessageResponse other) : this() {
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse Clone() {
      return new SignMessageResponse(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private string signature_ = "";
    /// <summary>
    //// The signature for the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignMessageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VerifyMessageRequest : pb::IMessage<VerifyMessageRequest> {
    private static readonly pb::MessageParser<VerifyMessageRequest> _parser = new pb::MessageParser<VerifyMessageRequest>(() => new VerifyMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest(VerifyMessageRequest other) : this() {
      msg_ = other.msg_;
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest Clone() {
      return new VerifyMessageRequest(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    //// The message over which the signature is to be verified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private string signature_ = "";
    /// <summary>
    //// The signature to be verified over the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      if (Signature != other.Signature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VerifyMessageResponse : pb::IMessage<VerifyMessageResponse> {
    private static readonly pb::MessageParser<VerifyMessageResponse> _parser = new pb::MessageParser<VerifyMessageResponse>(() => new VerifyMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse(VerifyMessageResponse other) : this() {
      valid_ = other.valid_;
      pubkey_ = other.pubkey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse Clone() {
      return new VerifyMessageResponse(this);
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 1;
    private bool valid_;
    /// <summary>
    //// Whether the signature was valid over the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 2;
    private string pubkey_ = "";
    /// <summary>
    //// The pubkey recovered from the signature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Valid != other.Valid) return false;
      if (Pubkey != other.Pubkey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (Pubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pubkey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Valid != false) {
        size += 1 + 1;
      }
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyMessageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            Pubkey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectPeerRequest : pb::IMessage<ConnectPeerRequest> {
    private static readonly pb::MessageParser<ConnectPeerRequest> _parser = new pb::MessageParser<ConnectPeerRequest>(() => new ConnectPeerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectPeerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest(ConnectPeerRequest other) : this() {
      Addr = other.addr_ != null ? other.Addr.Clone() : null;
      perm_ = other.perm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest Clone() {
      return new ConnectPeerRequest(this);
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private global::Lnrpc.LightningAddress addr_;
    /// <summary>
    //// Lightning address of the peer, in the format `&lt;pubkey>@host`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.LightningAddress Addr {
      get { return addr_; }
      set {
        addr_ = value;
      }
    }

    /// <summary>Field number for the "perm" field.</summary>
    public const int PermFieldNumber = 2;
    private bool perm_;
    /// <summary>
    ///* If set, the daemon will attempt to persistently connect to the target
    /// peer.  Otherwise, the call will be synchronous. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Perm {
      get { return perm_; }
      set {
        perm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectPeerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectPeerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Addr, other.Addr)) return false;
      if (Perm != other.Perm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (addr_ != null) hash ^= Addr.GetHashCode();
      if (Perm != false) hash ^= Perm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (addr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Addr);
      }
      if (Perm != false) {
        output.WriteRawTag(16);
        output.WriteBool(Perm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (addr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Addr);
      }
      if (Perm != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectPeerRequest other) {
      if (other == null) {
        return;
      }
      if (other.addr_ != null) {
        if (addr_ == null) {
          addr_ = new global::Lnrpc.LightningAddress();
        }
        Addr.MergeFrom(other.Addr);
      }
      if (other.Perm != false) {
        Perm = other.Perm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (addr_ == null) {
              addr_ = new global::Lnrpc.LightningAddress();
            }
            input.ReadMessage(addr_);
            break;
          }
          case 16: {
            Perm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectPeerResponse : pb::IMessage<ConnectPeerResponse> {
    private static readonly pb::MessageParser<ConnectPeerResponse> _parser = new pb::MessageParser<ConnectPeerResponse>(() => new ConnectPeerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectPeerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse(ConnectPeerResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse Clone() {
      return new ConnectPeerResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectPeerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectPeerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectPeerResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DisconnectPeerRequest : pb::IMessage<DisconnectPeerRequest> {
    private static readonly pb::MessageParser<DisconnectPeerRequest> _parser = new pb::MessageParser<DisconnectPeerRequest>(() => new DisconnectPeerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectPeerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest(DisconnectPeerRequest other) : this() {
      pubKey_ = other.pubKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest Clone() {
      return new DisconnectPeerRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The pubkey of the node to disconnect from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectPeerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectPeerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectPeerRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisconnectPeerResponse : pb::IMessage<DisconnectPeerResponse> {
    private static readonly pb::MessageParser<DisconnectPeerResponse> _parser = new pb::MessageParser<DisconnectPeerResponse>(() => new DisconnectPeerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectPeerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse(DisconnectPeerResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse Clone() {
      return new DisconnectPeerResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectPeerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectPeerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectPeerResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class HTLC : pb::IMessage<HTLC> {
    private static readonly pb::MessageParser<HTLC> _parser = new pb::MessageParser<HTLC>(() => new HTLC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC(HTLC other) : this() {
      incoming_ = other.incoming_;
      amount_ = other.amount_;
      hashLock_ = other.hashLock_;
      expirationHeight_ = other.expirationHeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC Clone() {
      return new HTLC(this);
    }

    /// <summary>Field number for the "incoming" field.</summary>
    public const int IncomingFieldNumber = 1;
    private bool incoming_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Incoming {
      get { return incoming_; }
      set {
        incoming_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "hash_lock" field.</summary>
    public const int HashLockFieldNumber = 3;
    private pb::ByteString hashLock_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HashLock {
      get { return hashLock_; }
      set {
        hashLock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration_height" field.</summary>
    public const int ExpirationHeightFieldNumber = 4;
    private uint expirationHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpirationHeight {
      get { return expirationHeight_; }
      set {
        expirationHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Incoming != other.Incoming) return false;
      if (Amount != other.Amount) return false;
      if (HashLock != other.HashLock) return false;
      if (ExpirationHeight != other.ExpirationHeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Incoming != false) hash ^= Incoming.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (HashLock.Length != 0) hash ^= HashLock.GetHashCode();
      if (ExpirationHeight != 0) hash ^= ExpirationHeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Incoming != false) {
        output.WriteRawTag(8);
        output.WriteBool(Incoming);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (HashLock.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(HashLock);
      }
      if (ExpirationHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExpirationHeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Incoming != false) {
        size += 1 + 1;
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (HashLock.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HashLock);
      }
      if (ExpirationHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpirationHeight);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTLC other) {
      if (other == null) {
        return;
      }
      if (other.Incoming != false) {
        Incoming = other.Incoming;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.HashLock.Length != 0) {
        HashLock = other.HashLock;
      }
      if (other.ExpirationHeight != 0) {
        ExpirationHeight = other.ExpirationHeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Incoming = input.ReadBool();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            HashLock = input.ReadBytes();
            break;
          }
          case 32: {
            ExpirationHeight = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Channel : pb::IMessage<Channel> {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel(Channel other) : this() {
      active_ = other.active_;
      remotePubkey_ = other.remotePubkey_;
      channelPoint_ = other.channelPoint_;
      chanId_ = other.chanId_;
      capacity_ = other.capacity_;
      localBalance_ = other.localBalance_;
      remoteBalance_ = other.remoteBalance_;
      commitFee_ = other.commitFee_;
      commitWeight_ = other.commitWeight_;
      feePerKw_ = other.feePerKw_;
      unsettledBalance_ = other.unsettledBalance_;
      totalSatoshisSent_ = other.totalSatoshisSent_;
      totalSatoshisReceived_ = other.totalSatoshisReceived_;
      numUpdates_ = other.numUpdates_;
      pendingHtlcs_ = other.pendingHtlcs_.Clone();
      csvDelay_ = other.csvDelay_;
      private_ = other.private_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    /// <summary>
    //// Whether this channel is active or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "remote_pubkey" field.</summary>
    public const int RemotePubkeyFieldNumber = 2;
    private string remotePubkey_ = "";
    /// <summary>
    //// The identity pubkey of the remote node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemotePubkey {
      get { return remotePubkey_; }
      set {
        remotePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 3;
    private string channelPoint_ = "";
    /// <summary>
    ///*
    ///The outpoint (txid:index) of the funding transaction. With this value, Bob
    ///will be able to generate a signature for Alice's version of the commitment
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 4;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 5;
    private long capacity_;
    /// <summary>
    //// The total amount of funds held in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "local_balance" field.</summary>
    public const int LocalBalanceFieldNumber = 6;
    private long localBalance_;
    /// <summary>
    //// This node's current balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalBalance {
      get { return localBalance_; }
      set {
        localBalance_ = value;
      }
    }

    /// <summary>Field number for the "remote_balance" field.</summary>
    public const int RemoteBalanceFieldNumber = 7;
    private long remoteBalance_;
    /// <summary>
    //// The counterparty's current balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemoteBalance {
      get { return remoteBalance_; }
      set {
        remoteBalance_ = value;
      }
    }

    /// <summary>Field number for the "commit_fee" field.</summary>
    public const int CommitFeeFieldNumber = 8;
    private long commitFee_;
    /// <summary>
    ///*
    ///The amount calculated to be paid in fees for the current set of commitment
    ///transactions. The fee amount is persisted with the channel in order to
    ///allow the fee amount to be removed and recalculated with each channel state
    ///update, including updates that happen after a system restart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitFee {
      get { return commitFee_; }
      set {
        commitFee_ = value;
      }
    }

    /// <summary>Field number for the "commit_weight" field.</summary>
    public const int CommitWeightFieldNumber = 9;
    private long commitWeight_;
    /// <summary>
    //// The weight of the commitment transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitWeight {
      get { return commitWeight_; }
      set {
        commitWeight_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_kw" field.</summary>
    public const int FeePerKwFieldNumber = 10;
    private long feePerKw_;
    /// <summary>
    ///*
    ///The required number of satoshis per kilo-weight that the requester will pay
    ///at all times, for both the funding transaction and commitment transaction.
    ///This value can later be updated once the channel is open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeePerKw {
      get { return feePerKw_; }
      set {
        feePerKw_ = value;
      }
    }

    /// <summary>Field number for the "unsettled_balance" field.</summary>
    public const int UnsettledBalanceFieldNumber = 11;
    private long unsettledBalance_;
    /// <summary>
    //// The unsettled balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnsettledBalance {
      get { return unsettledBalance_; }
      set {
        unsettledBalance_ = value;
      }
    }

    /// <summary>Field number for the "total_satoshis_sent" field.</summary>
    public const int TotalSatoshisSentFieldNumber = 12;
    private long totalSatoshisSent_;
    /// <summary>
    ///*
    ///The total number of satoshis we've sent within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSatoshisSent {
      get { return totalSatoshisSent_; }
      set {
        totalSatoshisSent_ = value;
      }
    }

    /// <summary>Field number for the "total_satoshis_received" field.</summary>
    public const int TotalSatoshisReceivedFieldNumber = 13;
    private long totalSatoshisReceived_;
    /// <summary>
    ///*
    ///The total number of satoshis we've received within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSatoshisReceived {
      get { return totalSatoshisReceived_; }
      set {
        totalSatoshisReceived_ = value;
      }
    }

    /// <summary>Field number for the "num_updates" field.</summary>
    public const int NumUpdatesFieldNumber = 14;
    private ulong numUpdates_;
    /// <summary>
    ///*
    ///The total number of updates conducted within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumUpdates {
      get { return numUpdates_; }
      set {
        numUpdates_ = value;
      }
    }

    /// <summary>Field number for the "pending_htlcs" field.</summary>
    public const int PendingHtlcsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Lnrpc.HTLC> _repeated_pendingHtlcs_codec
        = pb::FieldCodec.ForMessage(122, global::Lnrpc.HTLC.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HTLC> pendingHtlcs_ = new pbc::RepeatedField<global::Lnrpc.HTLC>();
    /// <summary>
    ///*
    ///The list of active, uncleared HTLCs currently pending within the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HTLC> PendingHtlcs {
      get { return pendingHtlcs_; }
    }

    /// <summary>Field number for the "csv_delay" field.</summary>
    public const int CsvDelayFieldNumber = 16;
    private uint csvDelay_;
    /// <summary>
    ///*
    ///The CSV delay expressed in relative blocks. If the channel is force
    ///closed, we'll need to wait for this many blocks before we can regain our
    ///funds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CsvDelay {
      get { return csvDelay_; }
      set {
        csvDelay_ = value;
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 17;
    private bool private_;
    /// <summary>
    //// Whether this channel is advertised to the network or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      if (RemotePubkey != other.RemotePubkey) return false;
      if (ChannelPoint != other.ChannelPoint) return false;
      if (ChanId != other.ChanId) return false;
      if (Capacity != other.Capacity) return false;
      if (LocalBalance != other.LocalBalance) return false;
      if (RemoteBalance != other.RemoteBalance) return false;
      if (CommitFee != other.CommitFee) return false;
      if (CommitWeight != other.CommitWeight) return false;
      if (FeePerKw != other.FeePerKw) return false;
      if (UnsettledBalance != other.UnsettledBalance) return false;
      if (TotalSatoshisSent != other.TotalSatoshisSent) return false;
      if (TotalSatoshisReceived != other.TotalSatoshisReceived) return false;
      if (NumUpdates != other.NumUpdates) return false;
      if(!pendingHtlcs_.Equals(other.pendingHtlcs_)) return false;
      if (CsvDelay != other.CsvDelay) return false;
      if (Private != other.Private) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (RemotePubkey.Length != 0) hash ^= RemotePubkey.GetHashCode();
      if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (LocalBalance != 0L) hash ^= LocalBalance.GetHashCode();
      if (RemoteBalance != 0L) hash ^= RemoteBalance.GetHashCode();
      if (CommitFee != 0L) hash ^= CommitFee.GetHashCode();
      if (CommitWeight != 0L) hash ^= CommitWeight.GetHashCode();
      if (FeePerKw != 0L) hash ^= FeePerKw.GetHashCode();
      if (UnsettledBalance != 0L) hash ^= UnsettledBalance.GetHashCode();
      if (TotalSatoshisSent != 0L) hash ^= TotalSatoshisSent.GetHashCode();
      if (TotalSatoshisReceived != 0L) hash ^= TotalSatoshisReceived.GetHashCode();
      if (NumUpdates != 0UL) hash ^= NumUpdates.GetHashCode();
      hash ^= pendingHtlcs_.GetHashCode();
      if (CsvDelay != 0) hash ^= CsvDelay.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (RemotePubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RemotePubkey);
      }
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelPoint);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChanId);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Capacity);
      }
      if (LocalBalance != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LocalBalance);
      }
      if (RemoteBalance != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RemoteBalance);
      }
      if (CommitFee != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CommitFee);
      }
      if (CommitWeight != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CommitWeight);
      }
      if (FeePerKw != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(FeePerKw);
      }
      if (UnsettledBalance != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(UnsettledBalance);
      }
      if (TotalSatoshisSent != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(TotalSatoshisSent);
      }
      if (TotalSatoshisReceived != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(TotalSatoshisReceived);
      }
      if (NumUpdates != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(NumUpdates);
      }
      pendingHtlcs_.WriteTo(output, _repeated_pendingHtlcs_codec);
      if (CsvDelay != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CsvDelay);
      }
      if (Private != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Private);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (RemotePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemotePubkey);
      }
      if (ChannelPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (LocalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalBalance);
      }
      if (RemoteBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteBalance);
      }
      if (CommitFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitFee);
      }
      if (CommitWeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitWeight);
      }
      if (FeePerKw != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerKw);
      }
      if (UnsettledBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnsettledBalance);
      }
      if (TotalSatoshisSent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSatoshisSent);
      }
      if (TotalSatoshisReceived != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSatoshisReceived);
      }
      if (NumUpdates != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumUpdates);
      }
      size += pendingHtlcs_.CalculateSize(_repeated_pendingHtlcs_codec);
      if (CsvDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CsvDelay);
      }
      if (Private != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.RemotePubkey.Length != 0) {
        RemotePubkey = other.RemotePubkey;
      }
      if (other.ChannelPoint.Length != 0) {
        ChannelPoint = other.ChannelPoint;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.LocalBalance != 0L) {
        LocalBalance = other.LocalBalance;
      }
      if (other.RemoteBalance != 0L) {
        RemoteBalance = other.RemoteBalance;
      }
      if (other.CommitFee != 0L) {
        CommitFee = other.CommitFee;
      }
      if (other.CommitWeight != 0L) {
        CommitWeight = other.CommitWeight;
      }
      if (other.FeePerKw != 0L) {
        FeePerKw = other.FeePerKw;
      }
      if (other.UnsettledBalance != 0L) {
        UnsettledBalance = other.UnsettledBalance;
      }
      if (other.TotalSatoshisSent != 0L) {
        TotalSatoshisSent = other.TotalSatoshisSent;
      }
      if (other.TotalSatoshisReceived != 0L) {
        TotalSatoshisReceived = other.TotalSatoshisReceived;
      }
      if (other.NumUpdates != 0UL) {
        NumUpdates = other.NumUpdates;
      }
      pendingHtlcs_.Add(other.pendingHtlcs_);
      if (other.CsvDelay != 0) {
        CsvDelay = other.CsvDelay;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 18: {
            RemotePubkey = input.ReadString();
            break;
          }
          case 26: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 32: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 40: {
            Capacity = input.ReadInt64();
            break;
          }
          case 48: {
            LocalBalance = input.ReadInt64();
            break;
          }
          case 56: {
            RemoteBalance = input.ReadInt64();
            break;
          }
          case 64: {
            CommitFee = input.ReadInt64();
            break;
          }
          case 72: {
            CommitWeight = input.ReadInt64();
            break;
          }
          case 80: {
            FeePerKw = input.ReadInt64();
            break;
          }
          case 88: {
            UnsettledBalance = input.ReadInt64();
            break;
          }
          case 96: {
            TotalSatoshisSent = input.ReadInt64();
            break;
          }
          case 104: {
            TotalSatoshisReceived = input.ReadInt64();
            break;
          }
          case 112: {
            NumUpdates = input.ReadUInt64();
            break;
          }
          case 122: {
            pendingHtlcs_.AddEntriesFrom(input, _repeated_pendingHtlcs_codec);
            break;
          }
          case 128: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 136: {
            Private = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListChannelsRequest : pb::IMessage<ListChannelsRequest> {
    private static readonly pb::MessageParser<ListChannelsRequest> _parser = new pb::MessageParser<ListChannelsRequest>(() => new ListChannelsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListChannelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest(ListChannelsRequest other) : this() {
      activeOnly_ = other.activeOnly_;
      inactiveOnly_ = other.inactiveOnly_;
      publicOnly_ = other.publicOnly_;
      privateOnly_ = other.privateOnly_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest Clone() {
      return new ListChannelsRequest(this);
    }

    /// <summary>Field number for the "active_only" field.</summary>
    public const int ActiveOnlyFieldNumber = 1;
    private bool activeOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ActiveOnly {
      get { return activeOnly_; }
      set {
        activeOnly_ = value;
      }
    }

    /// <summary>Field number for the "inactive_only" field.</summary>
    public const int InactiveOnlyFieldNumber = 2;
    private bool inactiveOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InactiveOnly {
      get { return inactiveOnly_; }
      set {
        inactiveOnly_ = value;
      }
    }

    /// <summary>Field number for the "public_only" field.</summary>
    public const int PublicOnlyFieldNumber = 3;
    private bool publicOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PublicOnly {
      get { return publicOnly_; }
      set {
        publicOnly_ = value;
      }
    }

    /// <summary>Field number for the "private_only" field.</summary>
    public const int PrivateOnlyFieldNumber = 4;
    private bool privateOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrivateOnly {
      get { return privateOnly_; }
      set {
        privateOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListChannelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListChannelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActiveOnly != other.ActiveOnly) return false;
      if (InactiveOnly != other.InactiveOnly) return false;
      if (PublicOnly != other.PublicOnly) return false;
      if (PrivateOnly != other.PrivateOnly) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActiveOnly != false) hash ^= ActiveOnly.GetHashCode();
      if (InactiveOnly != false) hash ^= InactiveOnly.GetHashCode();
      if (PublicOnly != false) hash ^= PublicOnly.GetHashCode();
      if (PrivateOnly != false) hash ^= PrivateOnly.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(ActiveOnly);
      }
      if (InactiveOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(InactiveOnly);
      }
      if (PublicOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(PublicOnly);
      }
      if (PrivateOnly != false) {
        output.WriteRawTag(32);
        output.WriteBool(PrivateOnly);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveOnly != false) {
        size += 1 + 1;
      }
      if (InactiveOnly != false) {
        size += 1 + 1;
      }
      if (PublicOnly != false) {
        size += 1 + 1;
      }
      if (PrivateOnly != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListChannelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ActiveOnly != false) {
        ActiveOnly = other.ActiveOnly;
      }
      if (other.InactiveOnly != false) {
        InactiveOnly = other.InactiveOnly;
      }
      if (other.PublicOnly != false) {
        PublicOnly = other.PublicOnly;
      }
      if (other.PrivateOnly != false) {
        PrivateOnly = other.PrivateOnly;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveOnly = input.ReadBool();
            break;
          }
          case 16: {
            InactiveOnly = input.ReadBool();
            break;
          }
          case 24: {
            PublicOnly = input.ReadBool();
            break;
          }
          case 32: {
            PrivateOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListChannelsResponse : pb::IMessage<ListChannelsResponse> {
    private static readonly pb::MessageParser<ListChannelsResponse> _parser = new pb::MessageParser<ListChannelsResponse>(() => new ListChannelsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListChannelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse(ListChannelsResponse other) : this() {
      channels_ = other.channels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse Clone() {
      return new ListChannelsResponse(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Lnrpc.Channel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(90, global::Lnrpc.Channel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Channel> channels_ = new pbc::RepeatedField<global::Lnrpc.Channel>();
    /// <summary>
    //// The list of active channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Channel> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListChannelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListChannelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListChannelsResponse other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 90: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Peer : pb::IMessage<Peer> {
    private static readonly pb::MessageParser<Peer> _parser = new pb::MessageParser<Peer>(() => new Peer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Peer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer(Peer other) : this() {
      pubKey_ = other.pubKey_;
      address_ = other.address_;
      bytesSent_ = other.bytesSent_;
      bytesRecv_ = other.bytesRecv_;
      satSent_ = other.satSent_;
      satRecv_ = other.satRecv_;
      inbound_ = other.inbound_;
      pingTime_ = other.pingTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer Clone() {
      return new Peer(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The identity pubkey of the peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private string address_ = "";
    /// <summary>
    //// Network address of the peer; eg `127.0.0.1:10011`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_sent" field.</summary>
    public const int BytesSentFieldNumber = 4;
    private ulong bytesSent_;
    /// <summary>
    //// Bytes of data transmitted to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesSent {
      get { return bytesSent_; }
      set {
        bytesSent_ = value;
      }
    }

    /// <summary>Field number for the "bytes_recv" field.</summary>
    public const int BytesRecvFieldNumber = 5;
    private ulong bytesRecv_;
    /// <summary>
    //// Bytes of data transmitted from this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesRecv {
      get { return bytesRecv_; }
      set {
        bytesRecv_ = value;
      }
    }

    /// <summary>Field number for the "sat_sent" field.</summary>
    public const int SatSentFieldNumber = 6;
    private long satSent_;
    /// <summary>
    //// Satoshis sent to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatSent {
      get { return satSent_; }
      set {
        satSent_ = value;
      }
    }

    /// <summary>Field number for the "sat_recv" field.</summary>
    public const int SatRecvFieldNumber = 7;
    private long satRecv_;
    /// <summary>
    //// Satoshis received from this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatRecv {
      get { return satRecv_; }
      set {
        satRecv_ = value;
      }
    }

    /// <summary>Field number for the "inbound" field.</summary>
    public const int InboundFieldNumber = 8;
    private bool inbound_;
    /// <summary>
    //// A channel is inbound if the counterparty initiated the channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inbound {
      get { return inbound_; }
      set {
        inbound_ = value;
      }
    }

    /// <summary>Field number for the "ping_time" field.</summary>
    public const int PingTimeFieldNumber = 9;
    private long pingTime_;
    /// <summary>
    //// Ping time to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PingTime {
      get { return pingTime_; }
      set {
        pingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Peer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Peer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Address != other.Address) return false;
      if (BytesSent != other.BytesSent) return false;
      if (BytesRecv != other.BytesRecv) return false;
      if (SatSent != other.SatSent) return false;
      if (SatRecv != other.SatRecv) return false;
      if (Inbound != other.Inbound) return false;
      if (PingTime != other.PingTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (BytesSent != 0UL) hash ^= BytesSent.GetHashCode();
      if (BytesRecv != 0UL) hash ^= BytesRecv.GetHashCode();
      if (SatSent != 0L) hash ^= SatSent.GetHashCode();
      if (SatRecv != 0L) hash ^= SatRecv.GetHashCode();
      if (Inbound != false) hash ^= Inbound.GetHashCode();
      if (PingTime != 0L) hash ^= PingTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
      if (BytesSent != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BytesSent);
      }
      if (BytesRecv != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BytesRecv);
      }
      if (SatSent != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SatSent);
      }
      if (SatRecv != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SatRecv);
      }
      if (Inbound != false) {
        output.WriteRawTag(64);
        output.WriteBool(Inbound);
      }
      if (PingTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(PingTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (BytesSent != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesSent);
      }
      if (BytesRecv != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesRecv);
      }
      if (SatSent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatSent);
      }
      if (SatRecv != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatRecv);
      }
      if (Inbound != false) {
        size += 1 + 1;
      }
      if (PingTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PingTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Peer other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.BytesSent != 0UL) {
        BytesSent = other.BytesSent;
      }
      if (other.BytesRecv != 0UL) {
        BytesRecv = other.BytesRecv;
      }
      if (other.SatSent != 0L) {
        SatSent = other.SatSent;
      }
      if (other.SatRecv != 0L) {
        SatRecv = other.SatRecv;
      }
      if (other.Inbound != false) {
        Inbound = other.Inbound;
      }
      if (other.PingTime != 0L) {
        PingTime = other.PingTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
          case 32: {
            BytesSent = input.ReadUInt64();
            break;
          }
          case 40: {
            BytesRecv = input.ReadUInt64();
            break;
          }
          case 48: {
            SatSent = input.ReadInt64();
            break;
          }
          case 56: {
            SatRecv = input.ReadInt64();
            break;
          }
          case 64: {
            Inbound = input.ReadBool();
            break;
          }
          case 72: {
            PingTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListPeersRequest : pb::IMessage<ListPeersRequest> {
    private static readonly pb::MessageParser<ListPeersRequest> _parser = new pb::MessageParser<ListPeersRequest>(() => new ListPeersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPeersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest(ListPeersRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest Clone() {
      return new ListPeersRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPeersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPeersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPeersRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListPeersResponse : pb::IMessage<ListPeersResponse> {
    private static readonly pb::MessageParser<ListPeersResponse> _parser = new pb::MessageParser<ListPeersResponse>(() => new ListPeersResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPeersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse(ListPeersResponse other) : this() {
      peers_ = other.peers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse Clone() {
      return new ListPeersResponse(this);
    }

    /// <summary>Field number for the "peers" field.</summary>
    public const int PeersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Peer> _repeated_peers_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Peer.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Peer> peers_ = new pbc::RepeatedField<global::Lnrpc.Peer>();
    /// <summary>
    //// The list of currently connected peers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Peer> Peers {
      get { return peers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPeersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPeersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!peers_.Equals(other.peers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= peers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      peers_.WriteTo(output, _repeated_peers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += peers_.CalculateSize(_repeated_peers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPeersResponse other) {
      if (other == null) {
        return;
      }
      peers_.Add(other.peers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            peers_.AddEntriesFrom(input, _repeated_peers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetInfoRequest : pb::IMessage<GetInfoRequest> {
    private static readonly pb::MessageParser<GetInfoRequest> _parser = new pb::MessageParser<GetInfoRequest>(() => new GetInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest(GetInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest Clone() {
      return new GetInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetInfoResponse : pb::IMessage<GetInfoResponse> {
    private static readonly pb::MessageParser<GetInfoResponse> _parser = new pb::MessageParser<GetInfoResponse>(() => new GetInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse(GetInfoResponse other) : this() {
      identityPubkey_ = other.identityPubkey_;
      alias_ = other.alias_;
      numPendingChannels_ = other.numPendingChannels_;
      numActiveChannels_ = other.numActiveChannels_;
      numPeers_ = other.numPeers_;
      blockHeight_ = other.blockHeight_;
      blockHash_ = other.blockHash_;
      syncedToChain_ = other.syncedToChain_;
      testnet_ = other.testnet_;
      chains_ = other.chains_.Clone();
      uris_ = other.uris_.Clone();
      bestHeaderTimestamp_ = other.bestHeaderTimestamp_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse Clone() {
      return new GetInfoResponse(this);
    }

    /// <summary>Field number for the "identity_pubkey" field.</summary>
    public const int IdentityPubkeyFieldNumber = 1;
    private string identityPubkey_ = "";
    /// <summary>
    //// The identity pubkey of the current node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityPubkey {
      get { return identityPubkey_; }
      set {
        identityPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 2;
    private string alias_ = "";
    /// <summary>
    //// If applicable, the alias of the current node, e.g. "bob"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_pending_channels" field.</summary>
    public const int NumPendingChannelsFieldNumber = 3;
    private uint numPendingChannels_;
    /// <summary>
    //// Number of pending channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPendingChannels {
      get { return numPendingChannels_; }
      set {
        numPendingChannels_ = value;
      }
    }

    /// <summary>Field number for the "num_active_channels" field.</summary>
    public const int NumActiveChannelsFieldNumber = 4;
    private uint numActiveChannels_;
    /// <summary>
    //// Number of active channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumActiveChannels {
      get { return numActiveChannels_; }
      set {
        numActiveChannels_ = value;
      }
    }

    /// <summary>Field number for the "num_peers" field.</summary>
    public const int NumPeersFieldNumber = 5;
    private uint numPeers_;
    /// <summary>
    //// Number of peers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPeers {
      get { return numPeers_; }
      set {
        numPeers_ = value;
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 6;
    private uint blockHeight_;
    /// <summary>
    //// The node's current view of the height of the best block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 8;
    private string blockHash_ = "";
    /// <summary>
    //// The node's current view of the hash of the best block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "synced_to_chain" field.</summary>
    public const int SyncedToChainFieldNumber = 9;
    private bool syncedToChain_;
    /// <summary>
    //// Whether the wallet's view is synced to the main chain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncedToChain {
      get { return syncedToChain_; }
      set {
        syncedToChain_ = value;
      }
    }

    /// <summary>Field number for the "testnet" field.</summary>
    public const int TestnetFieldNumber = 10;
    private bool testnet_;
    /// <summary>
    //// Whether the current node is connected to testnet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Testnet {
      get { return testnet_; }
      set {
        testnet_ = value;
      }
    }

    /// <summary>Field number for the "chains" field.</summary>
    public const int ChainsFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_chains_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> chains_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// A list of active chains the node is connected to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Chains {
      get { return chains_; }
    }

    /// <summary>Field number for the "uris" field.</summary>
    public const int UrisFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_uris_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> uris_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// The URIs of the current node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Uris {
      get { return uris_; }
    }

    /// <summary>Field number for the "best_header_timestamp" field.</summary>
    public const int BestHeaderTimestampFieldNumber = 13;
    private long bestHeaderTimestamp_;
    /// <summary>
    //// Timestamp of the block best known to the wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BestHeaderTimestamp {
      get { return bestHeaderTimestamp_; }
      set {
        bestHeaderTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 14;
    private string version_ = "";
    /// <summary>
    //// The version of the LND software that the node is running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityPubkey != other.IdentityPubkey) return false;
      if (Alias != other.Alias) return false;
      if (NumPendingChannels != other.NumPendingChannels) return false;
      if (NumActiveChannels != other.NumActiveChannels) return false;
      if (NumPeers != other.NumPeers) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (BlockHash != other.BlockHash) return false;
      if (SyncedToChain != other.SyncedToChain) return false;
      if (Testnet != other.Testnet) return false;
      if(!chains_.Equals(other.chains_)) return false;
      if(!uris_.Equals(other.uris_)) return false;
      if (BestHeaderTimestamp != other.BestHeaderTimestamp) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityPubkey.Length != 0) hash ^= IdentityPubkey.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (NumPendingChannels != 0) hash ^= NumPendingChannels.GetHashCode();
      if (NumActiveChannels != 0) hash ^= NumActiveChannels.GetHashCode();
      if (NumPeers != 0) hash ^= NumPeers.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (SyncedToChain != false) hash ^= SyncedToChain.GetHashCode();
      if (Testnet != false) hash ^= Testnet.GetHashCode();
      hash ^= chains_.GetHashCode();
      hash ^= uris_.GetHashCode();
      if (BestHeaderTimestamp != 0L) hash ^= BestHeaderTimestamp.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityPubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityPubkey);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      if (NumPendingChannels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumPendingChannels);
      }
      if (NumActiveChannels != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumActiveChannels);
      }
      if (NumPeers != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumPeers);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BlockHeight);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BlockHash);
      }
      if (SyncedToChain != false) {
        output.WriteRawTag(72);
        output.WriteBool(SyncedToChain);
      }
      if (Testnet != false) {
        output.WriteRawTag(80);
        output.WriteBool(Testnet);
      }
      chains_.WriteTo(output, _repeated_chains_codec);
      uris_.WriteTo(output, _repeated_uris_codec);
      if (BestHeaderTimestamp != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(BestHeaderTimestamp);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityPubkey);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (NumPendingChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPendingChannels);
      }
      if (NumActiveChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumActiveChannels);
      }
      if (NumPeers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPeers);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockHeight);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (SyncedToChain != false) {
        size += 1 + 1;
      }
      if (Testnet != false) {
        size += 1 + 1;
      }
      size += chains_.CalculateSize(_repeated_chains_codec);
      size += uris_.CalculateSize(_repeated_uris_codec);
      if (BestHeaderTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BestHeaderTimestamp);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.IdentityPubkey.Length != 0) {
        IdentityPubkey = other.IdentityPubkey;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.NumPendingChannels != 0) {
        NumPendingChannels = other.NumPendingChannels;
      }
      if (other.NumActiveChannels != 0) {
        NumActiveChannels = other.NumActiveChannels;
      }
      if (other.NumPeers != 0) {
        NumPeers = other.NumPeers;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.SyncedToChain != false) {
        SyncedToChain = other.SyncedToChain;
      }
      if (other.Testnet != false) {
        Testnet = other.Testnet;
      }
      chains_.Add(other.chains_);
      uris_.Add(other.uris_);
      if (other.BestHeaderTimestamp != 0L) {
        BestHeaderTimestamp = other.BestHeaderTimestamp;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityPubkey = input.ReadString();
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
          case 24: {
            NumPendingChannels = input.ReadUInt32();
            break;
          }
          case 32: {
            NumActiveChannels = input.ReadUInt32();
            break;
          }
          case 40: {
            NumPeers = input.ReadUInt32();
            break;
          }
          case 48: {
            BlockHeight = input.ReadUInt32();
            break;
          }
          case 66: {
            BlockHash = input.ReadString();
            break;
          }
          case 72: {
            SyncedToChain = input.ReadBool();
            break;
          }
          case 80: {
            Testnet = input.ReadBool();
            break;
          }
          case 90: {
            chains_.AddEntriesFrom(input, _repeated_chains_codec);
            break;
          }
          case 98: {
            uris_.AddEntriesFrom(input, _repeated_uris_codec);
            break;
          }
          case 104: {
            BestHeaderTimestamp = input.ReadInt64();
            break;
          }
          case 114: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfirmationUpdate : pb::IMessage<ConfirmationUpdate> {
    private static readonly pb::MessageParser<ConfirmationUpdate> _parser = new pb::MessageParser<ConfirmationUpdate>(() => new ConfirmationUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfirmationUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate(ConfirmationUpdate other) : this() {
      blockSha_ = other.blockSha_;
      blockHeight_ = other.blockHeight_;
      numConfsLeft_ = other.numConfsLeft_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate Clone() {
      return new ConfirmationUpdate(this);
    }

    /// <summary>Field number for the "block_sha" field.</summary>
    public const int BlockShaFieldNumber = 1;
    private pb::ByteString blockSha_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockSha {
      get { return blockSha_; }
      set {
        blockSha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 2;
    private int blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "num_confs_left" field.</summary>
    public const int NumConfsLeftFieldNumber = 3;
    private uint numConfsLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumConfsLeft {
      get { return numConfsLeft_; }
      set {
        numConfsLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfirmationUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfirmationUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockSha != other.BlockSha) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (NumConfsLeft != other.NumConfsLeft) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockSha.Length != 0) hash ^= BlockSha.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (NumConfsLeft != 0) hash ^= NumConfsLeft.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockSha.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BlockSha);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockHeight);
      }
      if (NumConfsLeft != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumConfsLeft);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockSha.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockSha);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (NumConfsLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumConfsLeft);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfirmationUpdate other) {
      if (other == null) {
        return;
      }
      if (other.BlockSha.Length != 0) {
        BlockSha = other.BlockSha;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.NumConfsLeft != 0) {
        NumConfsLeft = other.NumConfsLeft;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BlockSha = input.ReadBytes();
            break;
          }
          case 16: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 24: {
            NumConfsLeft = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelOpenUpdate : pb::IMessage<ChannelOpenUpdate> {
    private static readonly pb::MessageParser<ChannelOpenUpdate> _parser = new pb::MessageParser<ChannelOpenUpdate>(() => new ChannelOpenUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelOpenUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate(ChannelOpenUpdate other) : this() {
      ChannelPoint = other.channelPoint_ != null ? other.ChannelPoint.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate Clone() {
      return new ChannelOpenUpdate(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint channelPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelOpenUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelOpenUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPoint, other.ChannelPoint)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPoint_ != null) hash ^= ChannelPoint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelOpenUpdate other) {
      if (other == null) {
        return;
      }
      if (other.channelPoint_ != null) {
        if (channelPoint_ == null) {
          channelPoint_ = new global::Lnrpc.ChannelPoint();
        }
        ChannelPoint.MergeFrom(other.ChannelPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (channelPoint_ == null) {
              channelPoint_ = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(channelPoint_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelCloseUpdate : pb::IMessage<ChannelCloseUpdate> {
    private static readonly pb::MessageParser<ChannelCloseUpdate> _parser = new pb::MessageParser<ChannelCloseUpdate>(() => new ChannelCloseUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelCloseUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate(ChannelCloseUpdate other) : this() {
      closingTxid_ = other.closingTxid_;
      success_ = other.success_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate Clone() {
      return new ChannelCloseUpdate(this);
    }

    /// <summary>Field number for the "closing_txid" field.</summary>
    public const int ClosingTxidFieldNumber = 1;
    private pb::ByteString closingTxid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClosingTxid {
      get { return closingTxid_; }
      set {
        closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelCloseUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelCloseUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClosingTxid != other.ClosingTxid) return false;
      if (Success != other.Success) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClosingTxid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ClosingTxid);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClosingTxid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClosingTxid);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelCloseUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ClosingTxid.Length != 0) {
        ClosingTxid = other.ClosingTxid;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClosingTxid = input.ReadBytes();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseChannelRequest : pb::IMessage<CloseChannelRequest> {
    private static readonly pb::MessageParser<CloseChannelRequest> _parser = new pb::MessageParser<CloseChannelRequest>(() => new CloseChannelRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest(CloseChannelRequest other) : this() {
      ChannelPoint = other.channelPoint_ != null ? other.ChannelPoint.Clone() : null;
      force_ = other.force_;
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest Clone() {
      return new CloseChannelRequest(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint channelPoint_;
    /// <summary>
    ///*
    ///The outpoint (txid:index) of the funding transaction. With this value, Bob
    ///will be able to generate a signature for Alice's version of the commitment
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 2;
    private bool force_;
    /// <summary>
    //// If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that the closure transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 4;
    private long satPerByte_;
    /// <summary>
    //// A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPoint, other.ChannelPoint)) return false;
      if (Force != other.Force) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPoint_ != null) hash ^= ChannelPoint.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (Force != false) {
        output.WriteRawTag(16);
        output.WriteBool(Force);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SatPerByte);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPoint);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.channelPoint_ != null) {
        if (channelPoint_ == null) {
          channelPoint_ = new global::Lnrpc.ChannelPoint();
        }
        ChannelPoint.MergeFrom(other.ChannelPoint);
      }
      if (other.Force != false) {
        Force = other.Force;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (channelPoint_ == null) {
              channelPoint_ = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(channelPoint_);
            break;
          }
          case 16: {
            Force = input.ReadBool();
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 32: {
            SatPerByte = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseStatusUpdate : pb::IMessage<CloseStatusUpdate> {
    private static readonly pb::MessageParser<CloseStatusUpdate> _parser = new pb::MessageParser<CloseStatusUpdate>(() => new CloseStatusUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate(CloseStatusUpdate other) : this() {
      switch (other.UpdateCase) {
        case UpdateOneofCase.ClosePending:
          ClosePending = other.ClosePending.Clone();
          break;
        case UpdateOneofCase.Confirmation:
          Confirmation = other.Confirmation.Clone();
          break;
        case UpdateOneofCase.ChanClose:
          ChanClose = other.ChanClose.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate Clone() {
      return new CloseStatusUpdate(this);
    }

    /// <summary>Field number for the "close_pending" field.</summary>
    public const int ClosePendingFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PendingUpdate ClosePending {
      get { return updateCase_ == UpdateOneofCase.ClosePending ? (global::Lnrpc.PendingUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ClosePending;
      }
    }

    /// <summary>Field number for the "confirmation" field.</summary>
    public const int ConfirmationFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ConfirmationUpdate Confirmation {
      get { return updateCase_ == UpdateOneofCase.Confirmation ? (global::Lnrpc.ConfirmationUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.Confirmation;
      }
    }

    /// <summary>Field number for the "chan_close" field.</summary>
    public const int ChanCloseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelCloseUpdate ChanClose {
      get { return updateCase_ == UpdateOneofCase.ChanClose ? (global::Lnrpc.ChannelCloseUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanClose;
      }
    }

    private object update_;
    /// <summary>Enum of possible cases for the "update" oneof.</summary>
    public enum UpdateOneofCase {
      None = 0,
      ClosePending = 1,
      Confirmation = 2,
      ChanClose = 3,
    }
    private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOneofCase UpdateCase {
      get { return updateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdate() {
      updateCase_ = UpdateOneofCase.None;
      update_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClosePending, other.ClosePending)) return false;
      if (!object.Equals(Confirmation, other.Confirmation)) return false;
      if (!object.Equals(ChanClose, other.ChanClose)) return false;
      if (UpdateCase != other.UpdateCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateCase_ == UpdateOneofCase.ClosePending) hash ^= ClosePending.GetHashCode();
      if (updateCase_ == UpdateOneofCase.Confirmation) hash ^= Confirmation.GetHashCode();
      if (updateCase_ == UpdateOneofCase.ChanClose) hash ^= ChanClose.GetHashCode();
      hash ^= (int) updateCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updateCase_ == UpdateOneofCase.ClosePending) {
        output.WriteRawTag(10);
        output.WriteMessage(ClosePending);
      }
      if (updateCase_ == UpdateOneofCase.Confirmation) {
        output.WriteRawTag(18);
        output.WriteMessage(Confirmation);
      }
      if (updateCase_ == UpdateOneofCase.ChanClose) {
        output.WriteRawTag(26);
        output.WriteMessage(ChanClose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateCase_ == UpdateOneofCase.ClosePending) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosePending);
      }
      if (updateCase_ == UpdateOneofCase.Confirmation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Confirmation);
      }
      if (updateCase_ == UpdateOneofCase.ChanClose) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanClose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseStatusUpdate other) {
      if (other == null) {
        return;
      }
      switch (other.UpdateCase) {
        case UpdateOneofCase.ClosePending:
          if (ClosePending == null) {
            ClosePending = new global::Lnrpc.PendingUpdate();
          }
          ClosePending.MergeFrom(other.ClosePending);
          break;
        case UpdateOneofCase.Confirmation:
          if (Confirmation == null) {
            Confirmation = new global::Lnrpc.ConfirmationUpdate();
          }
          Confirmation.MergeFrom(other.Confirmation);
          break;
        case UpdateOneofCase.ChanClose:
          if (ChanClose == null) {
            ChanClose = new global::Lnrpc.ChannelCloseUpdate();
          }
          ChanClose.MergeFrom(other.ChanClose);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (updateCase_ == UpdateOneofCase.ClosePending) {
              subBuilder.MergeFrom(ClosePending);
            }
            input.ReadMessage(subBuilder);
            ClosePending = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.ConfirmationUpdate subBuilder = new global::Lnrpc.ConfirmationUpdate();
            if (updateCase_ == UpdateOneofCase.Confirmation) {
              subBuilder.MergeFrom(Confirmation);
            }
            input.ReadMessage(subBuilder);
            Confirmation = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelCloseUpdate subBuilder = new global::Lnrpc.ChannelCloseUpdate();
            if (updateCase_ == UpdateOneofCase.ChanClose) {
              subBuilder.MergeFrom(ChanClose);
            }
            input.ReadMessage(subBuilder);
            ChanClose = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingUpdate : pb::IMessage<PendingUpdate> {
    private static readonly pb::MessageParser<PendingUpdate> _parser = new pb::MessageParser<PendingUpdate>(() => new PendingUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate(PendingUpdate other) : this() {
      txid_ = other.txid_;
      outputIndex_ = other.outputIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate Clone() {
      return new PendingUpdate(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private pb::ByteString txid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 2;
    private uint outputIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      if (OutputIndex != other.OutputIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Txid);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OutputIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Txid);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Txid = input.ReadBytes();
            break;
          }
          case 16: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenChannelRequest : pb::IMessage<OpenChannelRequest> {
    private static readonly pb::MessageParser<OpenChannelRequest> _parser = new pb::MessageParser<OpenChannelRequest>(() => new OpenChannelRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest(OpenChannelRequest other) : this() {
      nodePubkey_ = other.nodePubkey_;
      nodePubkeyString_ = other.nodePubkeyString_;
      localFundingAmount_ = other.localFundingAmount_;
      pushSat_ = other.pushSat_;
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
      private_ = other.private_;
      minHtlcMsat_ = other.minHtlcMsat_;
      remoteCsvDelay_ = other.remoteCsvDelay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest Clone() {
      return new OpenChannelRequest(this);
    }

    /// <summary>Field number for the "node_pubkey" field.</summary>
    public const int NodePubkeyFieldNumber = 2;
    private pb::ByteString nodePubkey_ = pb::ByteString.Empty;
    /// <summary>
    //// The pubkey of the node to open a channel with
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodePubkey {
      get { return nodePubkey_; }
      set {
        nodePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_pubkey_string" field.</summary>
    public const int NodePubkeyStringFieldNumber = 3;
    private string nodePubkeyString_ = "";
    /// <summary>
    //// The hex encoded pubkey of the node to open a channel with 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodePubkeyString {
      get { return nodePubkeyString_; }
      set {
        nodePubkeyString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_funding_amount" field.</summary>
    public const int LocalFundingAmountFieldNumber = 4;
    private long localFundingAmount_;
    /// <summary>
    //// The number of satoshis the wallet should commit to the channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalFundingAmount {
      get { return localFundingAmount_; }
      set {
        localFundingAmount_ = value;
      }
    }

    /// <summary>Field number for the "push_sat" field.</summary>
    public const int PushSatFieldNumber = 5;
    private long pushSat_;
    /// <summary>
    //// The number of satoshis to push to the remote side as part of the initial commitment state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PushSat {
      get { return pushSat_; }
      set {
        pushSat_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 6;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that the funding transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 7;
    private long satPerByte_;
    /// <summary>
    //// A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 8;
    private bool private_;
    /// <summary>
    //// Whether this channel should be private, not announced to the greater network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_msat" field.</summary>
    public const int MinHtlcMsatFieldNumber = 9;
    private long minHtlcMsat_;
    /// <summary>
    //// The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinHtlcMsat {
      get { return minHtlcMsat_; }
      set {
        minHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "remote_csv_delay" field.</summary>
    public const int RemoteCsvDelayFieldNumber = 10;
    private uint remoteCsvDelay_;
    /// <summary>
    //// The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemoteCsvDelay {
      get { return remoteCsvDelay_; }
      set {
        remoteCsvDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodePubkey != other.NodePubkey) return false;
      if (NodePubkeyString != other.NodePubkeyString) return false;
      if (LocalFundingAmount != other.LocalFundingAmount) return false;
      if (PushSat != other.PushSat) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      if (Private != other.Private) return false;
      if (MinHtlcMsat != other.MinHtlcMsat) return false;
      if (RemoteCsvDelay != other.RemoteCsvDelay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodePubkey.Length != 0) hash ^= NodePubkey.GetHashCode();
      if (NodePubkeyString.Length != 0) hash ^= NodePubkeyString.GetHashCode();
      if (LocalFundingAmount != 0L) hash ^= LocalFundingAmount.GetHashCode();
      if (PushSat != 0L) hash ^= PushSat.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (MinHtlcMsat != 0L) hash ^= MinHtlcMsat.GetHashCode();
      if (RemoteCsvDelay != 0) hash ^= RemoteCsvDelay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodePubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NodePubkey);
      }
      if (NodePubkeyString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NodePubkeyString);
      }
      if (LocalFundingAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LocalFundingAmount);
      }
      if (PushSat != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PushSat);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SatPerByte);
      }
      if (Private != false) {
        output.WriteRawTag(64);
        output.WriteBool(Private);
      }
      if (MinHtlcMsat != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MinHtlcMsat);
      }
      if (RemoteCsvDelay != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RemoteCsvDelay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodePubkey);
      }
      if (NodePubkeyString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodePubkeyString);
      }
      if (LocalFundingAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalFundingAmount);
      }
      if (PushSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PushSat);
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (Private != false) {
        size += 1 + 1;
      }
      if (MinHtlcMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinHtlcMsat);
      }
      if (RemoteCsvDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemoteCsvDelay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodePubkey.Length != 0) {
        NodePubkey = other.NodePubkey;
      }
      if (other.NodePubkeyString.Length != 0) {
        NodePubkeyString = other.NodePubkeyString;
      }
      if (other.LocalFundingAmount != 0L) {
        LocalFundingAmount = other.LocalFundingAmount;
      }
      if (other.PushSat != 0L) {
        PushSat = other.PushSat;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.MinHtlcMsat != 0L) {
        MinHtlcMsat = other.MinHtlcMsat;
      }
      if (other.RemoteCsvDelay != 0) {
        RemoteCsvDelay = other.RemoteCsvDelay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            NodePubkey = input.ReadBytes();
            break;
          }
          case 26: {
            NodePubkeyString = input.ReadString();
            break;
          }
          case 32: {
            LocalFundingAmount = input.ReadInt64();
            break;
          }
          case 40: {
            PushSat = input.ReadInt64();
            break;
          }
          case 48: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 56: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 64: {
            Private = input.ReadBool();
            break;
          }
          case 72: {
            MinHtlcMsat = input.ReadInt64();
            break;
          }
          case 80: {
            RemoteCsvDelay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenStatusUpdate : pb::IMessage<OpenStatusUpdate> {
    private static readonly pb::MessageParser<OpenStatusUpdate> _parser = new pb::MessageParser<OpenStatusUpdate>(() => new OpenStatusUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate(OpenStatusUpdate other) : this() {
      switch (other.UpdateCase) {
        case UpdateOneofCase.ChanPending:
          ChanPending = other.ChanPending.Clone();
          break;
        case UpdateOneofCase.Confirmation:
          Confirmation = other.Confirmation.Clone();
          break;
        case UpdateOneofCase.ChanOpen:
          ChanOpen = other.ChanOpen.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate Clone() {
      return new OpenStatusUpdate(this);
    }

    /// <summary>Field number for the "chan_pending" field.</summary>
    public const int ChanPendingFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PendingUpdate ChanPending {
      get { return updateCase_ == UpdateOneofCase.ChanPending ? (global::Lnrpc.PendingUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanPending;
      }
    }

    /// <summary>Field number for the "confirmation" field.</summary>
    public const int ConfirmationFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ConfirmationUpdate Confirmation {
      get { return updateCase_ == UpdateOneofCase.Confirmation ? (global::Lnrpc.ConfirmationUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.Confirmation;
      }
    }

    /// <summary>Field number for the "chan_open" field.</summary>
    public const int ChanOpenFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelOpenUpdate ChanOpen {
      get { return updateCase_ == UpdateOneofCase.ChanOpen ? (global::Lnrpc.ChannelOpenUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanOpen;
      }
    }

    private object update_;
    /// <summary>Enum of possible cases for the "update" oneof.</summary>
    public enum UpdateOneofCase {
      None = 0,
      ChanPending = 1,
      Confirmation = 2,
      ChanOpen = 3,
    }
    private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOneofCase UpdateCase {
      get { return updateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdate() {
      updateCase_ = UpdateOneofCase.None;
      update_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPending, other.ChanPending)) return false;
      if (!object.Equals(Confirmation, other.Confirmation)) return false;
      if (!object.Equals(ChanOpen, other.ChanOpen)) return false;
      if (UpdateCase != other.UpdateCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateCase_ == UpdateOneofCase.ChanPending) hash ^= ChanPending.GetHashCode();
      if (updateCase_ == UpdateOneofCase.Confirmation) hash ^= Confirmation.GetHashCode();
      if (updateCase_ == UpdateOneofCase.ChanOpen) hash ^= ChanOpen.GetHashCode();
      hash ^= (int) updateCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updateCase_ == UpdateOneofCase.ChanPending) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPending);
      }
      if (updateCase_ == UpdateOneofCase.Confirmation) {
        output.WriteRawTag(18);
        output.WriteMessage(Confirmation);
      }
      if (updateCase_ == UpdateOneofCase.ChanOpen) {
        output.WriteRawTag(26);
        output.WriteMessage(ChanOpen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateCase_ == UpdateOneofCase.ChanPending) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPending);
      }
      if (updateCase_ == UpdateOneofCase.Confirmation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Confirmation);
      }
      if (updateCase_ == UpdateOneofCase.ChanOpen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanOpen);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenStatusUpdate other) {
      if (other == null) {
        return;
      }
      switch (other.UpdateCase) {
        case UpdateOneofCase.ChanPending:
          if (ChanPending == null) {
            ChanPending = new global::Lnrpc.PendingUpdate();
          }
          ChanPending.MergeFrom(other.ChanPending);
          break;
        case UpdateOneofCase.Confirmation:
          if (Confirmation == null) {
            Confirmation = new global::Lnrpc.ConfirmationUpdate();
          }
          Confirmation.MergeFrom(other.Confirmation);
          break;
        case UpdateOneofCase.ChanOpen:
          if (ChanOpen == null) {
            ChanOpen = new global::Lnrpc.ChannelOpenUpdate();
          }
          ChanOpen.MergeFrom(other.ChanOpen);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (updateCase_ == UpdateOneofCase.ChanPending) {
              subBuilder.MergeFrom(ChanPending);
            }
            input.ReadMessage(subBuilder);
            ChanPending = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.ConfirmationUpdate subBuilder = new global::Lnrpc.ConfirmationUpdate();
            if (updateCase_ == UpdateOneofCase.Confirmation) {
              subBuilder.MergeFrom(Confirmation);
            }
            input.ReadMessage(subBuilder);
            Confirmation = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelOpenUpdate subBuilder = new global::Lnrpc.ChannelOpenUpdate();
            if (updateCase_ == UpdateOneofCase.ChanOpen) {
              subBuilder.MergeFrom(ChanOpen);
            }
            input.ReadMessage(subBuilder);
            ChanOpen = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingHTLC : pb::IMessage<PendingHTLC> {
    private static readonly pb::MessageParser<PendingHTLC> _parser = new pb::MessageParser<PendingHTLC>(() => new PendingHTLC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingHTLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC(PendingHTLC other) : this() {
      incoming_ = other.incoming_;
      amount_ = other.amount_;
      outpoint_ = other.outpoint_;
      maturityHeight_ = other.maturityHeight_;
      blocksTilMaturity_ = other.blocksTilMaturity_;
      stage_ = other.stage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC Clone() {
      return new PendingHTLC(this);
    }

    /// <summary>Field number for the "incoming" field.</summary>
    public const int IncomingFieldNumber = 1;
    private bool incoming_;
    /// <summary>
    //// The direction within the channel that the htlc was sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Incoming {
      get { return incoming_; }
      set {
        incoming_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    //// The total value of the htlc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "outpoint" field.</summary>
    public const int OutpointFieldNumber = 3;
    private string outpoint_ = "";
    /// <summary>
    //// The final output to be swept back to the user's wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Outpoint {
      get { return outpoint_; }
      set {
        outpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maturity_height" field.</summary>
    public const int MaturityHeightFieldNumber = 4;
    private uint maturityHeight_;
    /// <summary>
    //// The next block height at which we can spend the current stage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaturityHeight {
      get { return maturityHeight_; }
      set {
        maturityHeight_ = value;
      }
    }

    /// <summary>Field number for the "blocks_til_maturity" field.</summary>
    public const int BlocksTilMaturityFieldNumber = 5;
    private int blocksTilMaturity_;
    /// <summary>
    ///*
    ///The number of blocks remaining until the current stage can be swept.
    ///Negative values indicate how many blocks have passed since becoming
    ///mature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlocksTilMaturity {
      get { return blocksTilMaturity_; }
      set {
        blocksTilMaturity_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 6;
    private uint stage_;
    /// <summary>
    //// Indicates whether the htlc is in its first or second stage of recovery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingHTLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingHTLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Incoming != other.Incoming) return false;
      if (Amount != other.Amount) return false;
      if (Outpoint != other.Outpoint) return false;
      if (MaturityHeight != other.MaturityHeight) return false;
      if (BlocksTilMaturity != other.BlocksTilMaturity) return false;
      if (Stage != other.Stage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Incoming != false) hash ^= Incoming.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Outpoint.Length != 0) hash ^= Outpoint.GetHashCode();
      if (MaturityHeight != 0) hash ^= MaturityHeight.GetHashCode();
      if (BlocksTilMaturity != 0) hash ^= BlocksTilMaturity.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Incoming != false) {
        output.WriteRawTag(8);
        output.WriteBool(Incoming);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Outpoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Outpoint);
      }
      if (MaturityHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaturityHeight);
      }
      if (BlocksTilMaturity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlocksTilMaturity);
      }
      if (Stage != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Stage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Incoming != false) {
        size += 1 + 1;
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Outpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Outpoint);
      }
      if (MaturityHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaturityHeight);
      }
      if (BlocksTilMaturity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlocksTilMaturity);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingHTLC other) {
      if (other == null) {
        return;
      }
      if (other.Incoming != false) {
        Incoming = other.Incoming;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Outpoint.Length != 0) {
        Outpoint = other.Outpoint;
      }
      if (other.MaturityHeight != 0) {
        MaturityHeight = other.MaturityHeight;
      }
      if (other.BlocksTilMaturity != 0) {
        BlocksTilMaturity = other.BlocksTilMaturity;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Incoming = input.ReadBool();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Outpoint = input.ReadString();
            break;
          }
          case 32: {
            MaturityHeight = input.ReadUInt32();
            break;
          }
          case 40: {
            BlocksTilMaturity = input.ReadInt32();
            break;
          }
          case 48: {
            Stage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingChannelsRequest : pb::IMessage<PendingChannelsRequest> {
    private static readonly pb::MessageParser<PendingChannelsRequest> _parser = new pb::MessageParser<PendingChannelsRequest>(() => new PendingChannelsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingChannelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest(PendingChannelsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest Clone() {
      return new PendingChannelsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingChannelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingChannelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingChannelsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PendingChannelsResponse : pb::IMessage<PendingChannelsResponse> {
    private static readonly pb::MessageParser<PendingChannelsResponse> _parser = new pb::MessageParser<PendingChannelsResponse>(() => new PendingChannelsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingChannelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse(PendingChannelsResponse other) : this() {
      totalLimboBalance_ = other.totalLimboBalance_;
      pendingOpenChannels_ = other.pendingOpenChannels_.Clone();
      pendingClosingChannels_ = other.pendingClosingChannels_.Clone();
      pendingForceClosingChannels_ = other.pendingForceClosingChannels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse Clone() {
      return new PendingChannelsResponse(this);
    }

    /// <summary>Field number for the "total_limbo_balance" field.</summary>
    public const int TotalLimboBalanceFieldNumber = 1;
    private long totalLimboBalance_;
    /// <summary>
    //// The balance in satoshis encumbered in pending channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalLimboBalance {
      get { return totalLimboBalance_; }
      set {
        totalLimboBalance_ = value;
      }
    }

    /// <summary>Field number for the "pending_open_channels" field.</summary>
    public const int PendingOpenChannelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> _repeated_pendingOpenChannels_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> pendingOpenChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel>();
    /// <summary>
    //// Channels pending opening
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> PendingOpenChannels {
      get { return pendingOpenChannels_; }
    }

    /// <summary>Field number for the "pending_closing_channels" field.</summary>
    public const int PendingClosingChannelsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> _repeated_pendingClosingChannels_codec
        = pb::FieldCodec.ForMessage(26, global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> pendingClosingChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel>();
    /// <summary>
    //// Channels pending closing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> PendingClosingChannels {
      get { return pendingClosingChannels_; }
    }

    /// <summary>Field number for the "pending_force_closing_channels" field.</summary>
    public const int PendingForceClosingChannelsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> _repeated_pendingForceClosingChannels_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> pendingForceClosingChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel>();
    /// <summary>
    //// Channels pending force closing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> PendingForceClosingChannels {
      get { return pendingForceClosingChannels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingChannelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingChannelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalLimboBalance != other.TotalLimboBalance) return false;
      if(!pendingOpenChannels_.Equals(other.pendingOpenChannels_)) return false;
      if(!pendingClosingChannels_.Equals(other.pendingClosingChannels_)) return false;
      if(!pendingForceClosingChannels_.Equals(other.pendingForceClosingChannels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalLimboBalance != 0L) hash ^= TotalLimboBalance.GetHashCode();
      hash ^= pendingOpenChannels_.GetHashCode();
      hash ^= pendingClosingChannels_.GetHashCode();
      hash ^= pendingForceClosingChannels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalLimboBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalLimboBalance);
      }
      pendingOpenChannels_.WriteTo(output, _repeated_pendingOpenChannels_codec);
      pendingClosingChannels_.WriteTo(output, _repeated_pendingClosingChannels_codec);
      pendingForceClosingChannels_.WriteTo(output, _repeated_pendingForceClosingChannels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalLimboBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalLimboBalance);
      }
      size += pendingOpenChannels_.CalculateSize(_repeated_pendingOpenChannels_codec);
      size += pendingClosingChannels_.CalculateSize(_repeated_pendingClosingChannels_codec);
      size += pendingForceClosingChannels_.CalculateSize(_repeated_pendingForceClosingChannels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingChannelsResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalLimboBalance != 0L) {
        TotalLimboBalance = other.TotalLimboBalance;
      }
      pendingOpenChannels_.Add(other.pendingOpenChannels_);
      pendingClosingChannels_.Add(other.pendingClosingChannels_);
      pendingForceClosingChannels_.Add(other.pendingForceClosingChannels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalLimboBalance = input.ReadInt64();
            break;
          }
          case 18: {
            pendingOpenChannels_.AddEntriesFrom(input, _repeated_pendingOpenChannels_codec);
            break;
          }
          case 26: {
            pendingClosingChannels_.AddEntriesFrom(input, _repeated_pendingClosingChannels_codec);
            break;
          }
          case 34: {
            pendingForceClosingChannels_.AddEntriesFrom(input, _repeated_pendingForceClosingChannels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PendingChannelsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PendingChannel : pb::IMessage<PendingChannel> {
        private static readonly pb::MessageParser<PendingChannel> _parser = new pb::MessageParser<PendingChannel>(() => new PendingChannel());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PendingChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel(PendingChannel other) : this() {
          remoteNodePub_ = other.remoteNodePub_;
          channelPoint_ = other.channelPoint_;
          capacity_ = other.capacity_;
          localBalance_ = other.localBalance_;
          remoteBalance_ = other.remoteBalance_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel Clone() {
          return new PendingChannel(this);
        }

        /// <summary>Field number for the "remote_node_pub" field.</summary>
        public const int RemoteNodePubFieldNumber = 1;
        private string remoteNodePub_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemoteNodePub {
          get { return remoteNodePub_; }
          set {
            remoteNodePub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "channel_point" field.</summary>
        public const int ChannelPointFieldNumber = 2;
        private string channelPoint_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChannelPoint {
          get { return channelPoint_; }
          set {
            channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "capacity" field.</summary>
        public const int CapacityFieldNumber = 3;
        private long capacity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Capacity {
          get { return capacity_; }
          set {
            capacity_ = value;
          }
        }

        /// <summary>Field number for the "local_balance" field.</summary>
        public const int LocalBalanceFieldNumber = 4;
        private long localBalance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LocalBalance {
          get { return localBalance_; }
          set {
            localBalance_ = value;
          }
        }

        /// <summary>Field number for the "remote_balance" field.</summary>
        public const int RemoteBalanceFieldNumber = 5;
        private long remoteBalance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RemoteBalance {
          get { return remoteBalance_; }
          set {
            remoteBalance_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PendingChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PendingChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RemoteNodePub != other.RemoteNodePub) return false;
          if (ChannelPoint != other.ChannelPoint) return false;
          if (Capacity != other.Capacity) return false;
          if (LocalBalance != other.LocalBalance) return false;
          if (RemoteBalance != other.RemoteBalance) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RemoteNodePub.Length != 0) hash ^= RemoteNodePub.GetHashCode();
          if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
          if (Capacity != 0L) hash ^= Capacity.GetHashCode();
          if (LocalBalance != 0L) hash ^= LocalBalance.GetHashCode();
          if (RemoteBalance != 0L) hash ^= RemoteBalance.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RemoteNodePub.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(RemoteNodePub);
          }
          if (ChannelPoint.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ChannelPoint);
          }
          if (Capacity != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Capacity);
          }
          if (LocalBalance != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(LocalBalance);
          }
          if (RemoteBalance != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(RemoteBalance);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RemoteNodePub.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteNodePub);
          }
          if (ChannelPoint.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
          }
          if (Capacity != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
          }
          if (LocalBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalBalance);
          }
          if (RemoteBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteBalance);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PendingChannel other) {
          if (other == null) {
            return;
          }
          if (other.RemoteNodePub.Length != 0) {
            RemoteNodePub = other.RemoteNodePub;
          }
          if (other.ChannelPoint.Length != 0) {
            ChannelPoint = other.ChannelPoint;
          }
          if (other.Capacity != 0L) {
            Capacity = other.Capacity;
          }
          if (other.LocalBalance != 0L) {
            LocalBalance = other.LocalBalance;
          }
          if (other.RemoteBalance != 0L) {
            RemoteBalance = other.RemoteBalance;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                RemoteNodePub = input.ReadString();
                break;
              }
              case 18: {
                ChannelPoint = input.ReadString();
                break;
              }
              case 24: {
                Capacity = input.ReadInt64();
                break;
              }
              case 32: {
                LocalBalance = input.ReadInt64();
                break;
              }
              case 40: {
                RemoteBalance = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PendingOpenChannel : pb::IMessage<PendingOpenChannel> {
        private static readonly pb::MessageParser<PendingOpenChannel> _parser = new pb::MessageParser<PendingOpenChannel>(() => new PendingOpenChannel());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PendingOpenChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel(PendingOpenChannel other) : this() {
          Channel = other.channel_ != null ? other.Channel.Clone() : null;
          confirmationHeight_ = other.confirmationHeight_;
          commitFee_ = other.commitFee_;
          commitWeight_ = other.commitWeight_;
          feePerKw_ = other.feePerKw_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel Clone() {
          return new PendingOpenChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        //// The pending channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "confirmation_height" field.</summary>
        public const int ConfirmationHeightFieldNumber = 2;
        private uint confirmationHeight_;
        /// <summary>
        //// The height at which this channel will be confirmed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ConfirmationHeight {
          get { return confirmationHeight_; }
          set {
            confirmationHeight_ = value;
          }
        }

        /// <summary>Field number for the "commit_fee" field.</summary>
        public const int CommitFeeFieldNumber = 4;
        private long commitFee_;
        /// <summary>
        ///*
        ///The amount calculated to be paid in fees for the current set of
        ///commitment transactions. The fee amount is persisted with the channel
        ///in order to allow the fee amount to be removed and recalculated with
        ///each channel state update, including updates that happen after a system
        ///restart.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CommitFee {
          get { return commitFee_; }
          set {
            commitFee_ = value;
          }
        }

        /// <summary>Field number for the "commit_weight" field.</summary>
        public const int CommitWeightFieldNumber = 5;
        private long commitWeight_;
        /// <summary>
        //// The weight of the commitment transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CommitWeight {
          get { return commitWeight_; }
          set {
            commitWeight_ = value;
          }
        }

        /// <summary>Field number for the "fee_per_kw" field.</summary>
        public const int FeePerKwFieldNumber = 6;
        private long feePerKw_;
        /// <summary>
        ///*
        ///The required number of satoshis per kilo-weight that the requester will
        ///pay at all times, for both the funding transaction and commitment
        ///transaction. This value can later be updated once the channel is open.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FeePerKw {
          get { return feePerKw_; }
          set {
            feePerKw_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PendingOpenChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PendingOpenChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ConfirmationHeight != other.ConfirmationHeight) return false;
          if (CommitFee != other.CommitFee) return false;
          if (CommitWeight != other.CommitWeight) return false;
          if (FeePerKw != other.FeePerKw) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ConfirmationHeight != 0) hash ^= ConfirmationHeight.GetHashCode();
          if (CommitFee != 0L) hash ^= CommitFee.GetHashCode();
          if (CommitWeight != 0L) hash ^= CommitWeight.GetHashCode();
          if (FeePerKw != 0L) hash ^= FeePerKw.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ConfirmationHeight != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ConfirmationHeight);
          }
          if (CommitFee != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(CommitFee);
          }
          if (CommitWeight != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(CommitWeight);
          }
          if (FeePerKw != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(FeePerKw);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ConfirmationHeight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfirmationHeight);
          }
          if (CommitFee != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitFee);
          }
          if (CommitWeight != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitWeight);
          }
          if (FeePerKw != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerKw);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PendingOpenChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              channel_ = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ConfirmationHeight != 0) {
            ConfirmationHeight = other.ConfirmationHeight;
          }
          if (other.CommitFee != 0L) {
            CommitFee = other.CommitFee;
          }
          if (other.CommitWeight != 0L) {
            CommitWeight = other.CommitWeight;
          }
          if (other.FeePerKw != 0L) {
            FeePerKw = other.FeePerKw;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (channel_ == null) {
                  channel_ = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(channel_);
                break;
              }
              case 16: {
                ConfirmationHeight = input.ReadUInt32();
                break;
              }
              case 32: {
                CommitFee = input.ReadInt64();
                break;
              }
              case 40: {
                CommitWeight = input.ReadInt64();
                break;
              }
              case 48: {
                FeePerKw = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClosedChannel : pb::IMessage<ClosedChannel> {
        private static readonly pb::MessageParser<ClosedChannel> _parser = new pb::MessageParser<ClosedChannel>(() => new ClosedChannel());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClosedChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel(ClosedChannel other) : this() {
          Channel = other.channel_ != null ? other.Channel.Clone() : null;
          closingTxid_ = other.closingTxid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel Clone() {
          return new ClosedChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        //// The pending channel to be closed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "closing_txid" field.</summary>
        public const int ClosingTxidFieldNumber = 2;
        private string closingTxid_ = "";
        /// <summary>
        //// The transaction id of the closing transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClosingTxid {
          get { return closingTxid_; }
          set {
            closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClosedChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClosedChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ClosingTxid != other.ClosingTxid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ClosingTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClosingTxid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ClosingTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClosingTxid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClosedChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              channel_ = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ClosingTxid.Length != 0) {
            ClosingTxid = other.ClosingTxid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (channel_ == null) {
                  channel_ = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(channel_);
                break;
              }
              case 18: {
                ClosingTxid = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ForceClosedChannel : pb::IMessage<ForceClosedChannel> {
        private static readonly pb::MessageParser<ForceClosedChannel> _parser = new pb::MessageParser<ForceClosedChannel>(() => new ForceClosedChannel());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ForceClosedChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel(ForceClosedChannel other) : this() {
          Channel = other.channel_ != null ? other.Channel.Clone() : null;
          closingTxid_ = other.closingTxid_;
          limboBalance_ = other.limboBalance_;
          maturityHeight_ = other.maturityHeight_;
          blocksTilMaturity_ = other.blocksTilMaturity_;
          recoveredBalance_ = other.recoveredBalance_;
          pendingHtlcs_ = other.pendingHtlcs_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel Clone() {
          return new ForceClosedChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        //// The pending channel to be force closed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "closing_txid" field.</summary>
        public const int ClosingTxidFieldNumber = 2;
        private string closingTxid_ = "";
        /// <summary>
        //// The transaction id of the closing transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClosingTxid {
          get { return closingTxid_; }
          set {
            closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "limbo_balance" field.</summary>
        public const int LimboBalanceFieldNumber = 3;
        private long limboBalance_;
        /// <summary>
        //// The balance in satoshis encumbered in this pending channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LimboBalance {
          get { return limboBalance_; }
          set {
            limboBalance_ = value;
          }
        }

        /// <summary>Field number for the "maturity_height" field.</summary>
        public const int MaturityHeightFieldNumber = 4;
        private uint maturityHeight_;
        /// <summary>
        //// The height at which funds can be sweeped into the wallet
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaturityHeight {
          get { return maturityHeight_; }
          set {
            maturityHeight_ = value;
          }
        }

        /// <summary>Field number for the "blocks_til_maturity" field.</summary>
        public const int BlocksTilMaturityFieldNumber = 5;
        private int blocksTilMaturity_;
        /// <summary>
        ///
        ///Remaining # of blocks until the commitment output can be swept.
        ///Negative values indicate how many blocks have passed since becoming
        ///mature.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlocksTilMaturity {
          get { return blocksTilMaturity_; }
          set {
            blocksTilMaturity_ = value;
          }
        }

        /// <summary>Field number for the "recovered_balance" field.</summary>
        public const int RecoveredBalanceFieldNumber = 6;
        private long recoveredBalance_;
        /// <summary>
        //// The total value of funds successfully recovered from this channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RecoveredBalance {
          get { return recoveredBalance_; }
          set {
            recoveredBalance_ = value;
          }
        }

        /// <summary>Field number for the "pending_htlcs" field.</summary>
        public const int PendingHtlcsFieldNumber = 8;
        private static readonly pb::FieldCodec<global::Lnrpc.PendingHTLC> _repeated_pendingHtlcs_codec
            = pb::FieldCodec.ForMessage(66, global::Lnrpc.PendingHTLC.Parser);
        private readonly pbc::RepeatedField<global::Lnrpc.PendingHTLC> pendingHtlcs_ = new pbc::RepeatedField<global::Lnrpc.PendingHTLC>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Lnrpc.PendingHTLC> PendingHtlcs {
          get { return pendingHtlcs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ForceClosedChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ForceClosedChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ClosingTxid != other.ClosingTxid) return false;
          if (LimboBalance != other.LimboBalance) return false;
          if (MaturityHeight != other.MaturityHeight) return false;
          if (BlocksTilMaturity != other.BlocksTilMaturity) return false;
          if (RecoveredBalance != other.RecoveredBalance) return false;
          if(!pendingHtlcs_.Equals(other.pendingHtlcs_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
          if (LimboBalance != 0L) hash ^= LimboBalance.GetHashCode();
          if (MaturityHeight != 0) hash ^= MaturityHeight.GetHashCode();
          if (BlocksTilMaturity != 0) hash ^= BlocksTilMaturity.GetHashCode();
          if (RecoveredBalance != 0L) hash ^= RecoveredBalance.GetHashCode();
          hash ^= pendingHtlcs_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ClosingTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClosingTxid);
          }
          if (LimboBalance != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(LimboBalance);
          }
          if (MaturityHeight != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(MaturityHeight);
          }
          if (BlocksTilMaturity != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(BlocksTilMaturity);
          }
          if (RecoveredBalance != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(RecoveredBalance);
          }
          pendingHtlcs_.WriteTo(output, _repeated_pendingHtlcs_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ClosingTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClosingTxid);
          }
          if (LimboBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimboBalance);
          }
          if (MaturityHeight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaturityHeight);
          }
          if (BlocksTilMaturity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlocksTilMaturity);
          }
          if (RecoveredBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecoveredBalance);
          }
          size += pendingHtlcs_.CalculateSize(_repeated_pendingHtlcs_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ForceClosedChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              channel_ = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ClosingTxid.Length != 0) {
            ClosingTxid = other.ClosingTxid;
          }
          if (other.LimboBalance != 0L) {
            LimboBalance = other.LimboBalance;
          }
          if (other.MaturityHeight != 0) {
            MaturityHeight = other.MaturityHeight;
          }
          if (other.BlocksTilMaturity != 0) {
            BlocksTilMaturity = other.BlocksTilMaturity;
          }
          if (other.RecoveredBalance != 0L) {
            RecoveredBalance = other.RecoveredBalance;
          }
          pendingHtlcs_.Add(other.pendingHtlcs_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (channel_ == null) {
                  channel_ = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(channel_);
                break;
              }
              case 18: {
                ClosingTxid = input.ReadString();
                break;
              }
              case 24: {
                LimboBalance = input.ReadInt64();
                break;
              }
              case 32: {
                MaturityHeight = input.ReadUInt32();
                break;
              }
              case 40: {
                BlocksTilMaturity = input.ReadInt32();
                break;
              }
              case 48: {
                RecoveredBalance = input.ReadInt64();
                break;
              }
              case 66: {
                pendingHtlcs_.AddEntriesFrom(input, _repeated_pendingHtlcs_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class WalletBalanceRequest : pb::IMessage<WalletBalanceRequest> {
    private static readonly pb::MessageParser<WalletBalanceRequest> _parser = new pb::MessageParser<WalletBalanceRequest>(() => new WalletBalanceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest(WalletBalanceRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest Clone() {
      return new WalletBalanceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletBalanceRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class WalletBalanceResponse : pb::IMessage<WalletBalanceResponse> {
    private static readonly pb::MessageParser<WalletBalanceResponse> _parser = new pb::MessageParser<WalletBalanceResponse>(() => new WalletBalanceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletBalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse(WalletBalanceResponse other) : this() {
      totalBalance_ = other.totalBalance_;
      confirmedBalance_ = other.confirmedBalance_;
      unconfirmedBalance_ = other.unconfirmedBalance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse Clone() {
      return new WalletBalanceResponse(this);
    }

    /// <summary>Field number for the "total_balance" field.</summary>
    public const int TotalBalanceFieldNumber = 1;
    private long totalBalance_;
    /// <summary>
    //// The balance of the wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBalance {
      get { return totalBalance_; }
      set {
        totalBalance_ = value;
      }
    }

    /// <summary>Field number for the "confirmed_balance" field.</summary>
    public const int ConfirmedBalanceFieldNumber = 2;
    private long confirmedBalance_;
    /// <summary>
    //// The confirmed balance of a wallet(with >= 1 confirmations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfirmedBalance {
      get { return confirmedBalance_; }
      set {
        confirmedBalance_ = value;
      }
    }

    /// <summary>Field number for the "unconfirmed_balance" field.</summary>
    public const int UnconfirmedBalanceFieldNumber = 3;
    private long unconfirmedBalance_;
    /// <summary>
    //// The unconfirmed balance of a wallet(with 0 confirmations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnconfirmedBalance {
      get { return unconfirmedBalance_; }
      set {
        unconfirmedBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletBalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletBalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalBalance != other.TotalBalance) return false;
      if (ConfirmedBalance != other.ConfirmedBalance) return false;
      if (UnconfirmedBalance != other.UnconfirmedBalance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
      if (ConfirmedBalance != 0L) hash ^= ConfirmedBalance.GetHashCode();
      if (UnconfirmedBalance != 0L) hash ^= UnconfirmedBalance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalBalance);
      }
      if (ConfirmedBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UnconfirmedBalance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
      }
      if (ConfirmedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnconfirmedBalance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletBalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalBalance != 0L) {
        TotalBalance = other.TotalBalance;
      }
      if (other.ConfirmedBalance != 0L) {
        ConfirmedBalance = other.ConfirmedBalance;
      }
      if (other.UnconfirmedBalance != 0L) {
        UnconfirmedBalance = other.UnconfirmedBalance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalBalance = input.ReadInt64();
            break;
          }
          case 16: {
            ConfirmedBalance = input.ReadInt64();
            break;
          }
          case 24: {
            UnconfirmedBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelBalanceRequest : pb::IMessage<ChannelBalanceRequest> {
    private static readonly pb::MessageParser<ChannelBalanceRequest> _parser = new pb::MessageParser<ChannelBalanceRequest>(() => new ChannelBalanceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest(ChannelBalanceRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest Clone() {
      return new ChannelBalanceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBalanceRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ChannelBalanceResponse : pb::IMessage<ChannelBalanceResponse> {
    private static readonly pb::MessageParser<ChannelBalanceResponse> _parser = new pb::MessageParser<ChannelBalanceResponse>(() => new ChannelBalanceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse(ChannelBalanceResponse other) : this() {
      balance_ = other.balance_;
      pendingOpenBalance_ = other.pendingOpenBalance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse Clone() {
      return new ChannelBalanceResponse(this);
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 1;
    private long balance_;
    /// <summary>
    //// Sum of channels balances denominated in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "pending_open_balance" field.</summary>
    public const int PendingOpenBalanceFieldNumber = 2;
    private long pendingOpenBalance_;
    /// <summary>
    //// Sum of channels pending balances denominated in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PendingOpenBalance {
      get { return pendingOpenBalance_; }
      set {
        pendingOpenBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Balance != other.Balance) return false;
      if (PendingOpenBalance != other.PendingOpenBalance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (PendingOpenBalance != 0L) hash ^= PendingOpenBalance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Balance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Balance);
      }
      if (PendingOpenBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PendingOpenBalance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      if (PendingOpenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PendingOpenBalance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      if (other.PendingOpenBalance != 0L) {
        PendingOpenBalance = other.PendingOpenBalance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Balance = input.ReadInt64();
            break;
          }
          case 16: {
            PendingOpenBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryRoutesRequest : pb::IMessage<QueryRoutesRequest> {
    private static readonly pb::MessageParser<QueryRoutesRequest> _parser = new pb::MessageParser<QueryRoutesRequest>(() => new QueryRoutesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRoutesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest(QueryRoutesRequest other) : this() {
      pubKey_ = other.pubKey_;
      amt_ = other.amt_;
      numRoutes_ = other.numRoutes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest Clone() {
      return new QueryRoutesRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The 33-byte hex-encoded public key for the payment destination
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 2;
    private long amt_;
    /// <summary>
    //// The amount to send expressed in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "num_routes" field.</summary>
    public const int NumRoutesFieldNumber = 3;
    private int numRoutes_;
    /// <summary>
    //// The max number of routes to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRoutes {
      get { return numRoutes_; }
      set {
        numRoutes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRoutesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRoutesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Amt != other.Amt) return false;
      if (NumRoutes != other.NumRoutes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (NumRoutes != 0) hash ^= NumRoutes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Amt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amt);
      }
      if (NumRoutes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumRoutes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (NumRoutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRoutes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRoutesRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.NumRoutes != 0) {
        NumRoutes = other.NumRoutes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            Amt = input.ReadInt64();
            break;
          }
          case 24: {
            NumRoutes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryRoutesResponse : pb::IMessage<QueryRoutesResponse> {
    private static readonly pb::MessageParser<QueryRoutesResponse> _parser = new pb::MessageParser<QueryRoutesResponse>(() => new QueryRoutesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRoutesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse(QueryRoutesResponse other) : this() {
      routes_ = other.routes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse Clone() {
      return new QueryRoutesResponse(this);
    }

    /// <summary>Field number for the "routes" field.</summary>
    public const int RoutesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Route> _repeated_routes_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Route.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Route> routes_ = new pbc::RepeatedField<global::Lnrpc.Route>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Route> Routes {
      get { return routes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRoutesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRoutesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!routes_.Equals(other.routes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= routes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      routes_.WriteTo(output, _repeated_routes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += routes_.CalculateSize(_repeated_routes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRoutesResponse other) {
      if (other == null) {
        return;
      }
      routes_.Add(other.routes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            routes_.AddEntriesFrom(input, _repeated_routes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hop : pb::IMessage<Hop> {
    private static readonly pb::MessageParser<Hop> _parser = new pb::MessageParser<Hop>(() => new Hop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop(Hop other) : this() {
      chanId_ = other.chanId_;
      chanCapacity_ = other.chanCapacity_;
      amtToForward_ = other.amtToForward_;
      fee_ = other.fee_;
      expiry_ = other.expiry_;
      amtToForwardMsat_ = other.amtToForwardMsat_;
      feeMsat_ = other.feeMsat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop Clone() {
      return new Hop(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "chan_capacity" field.</summary>
    public const int ChanCapacityFieldNumber = 2;
    private long chanCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChanCapacity {
      get { return chanCapacity_; }
      set {
        chanCapacity_ = value;
      }
    }

    /// <summary>Field number for the "amt_to_forward" field.</summary>
    public const int AmtToForwardFieldNumber = 3;
    private long amtToForward_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtToForward {
      get { return amtToForward_; }
      set {
        amtToForward_ = value;
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 4;
    private long fee_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 5;
    private uint expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "amt_to_forward_msat" field.</summary>
    public const int AmtToForwardMsatFieldNumber = 6;
    private long amtToForwardMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtToForwardMsat {
      get { return amtToForwardMsat_; }
      set {
        amtToForwardMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_msat" field.</summary>
    public const int FeeMsatFieldNumber = 7;
    private long feeMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeMsat {
      get { return feeMsat_; }
      set {
        feeMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (ChanCapacity != other.ChanCapacity) return false;
      if (AmtToForward != other.AmtToForward) return false;
      if (Fee != other.Fee) return false;
      if (Expiry != other.Expiry) return false;
      if (AmtToForwardMsat != other.AmtToForwardMsat) return false;
      if (FeeMsat != other.FeeMsat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (ChanCapacity != 0L) hash ^= ChanCapacity.GetHashCode();
      if (AmtToForward != 0L) hash ^= AmtToForward.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (Expiry != 0) hash ^= Expiry.GetHashCode();
      if (AmtToForwardMsat != 0L) hash ^= AmtToForwardMsat.GetHashCode();
      if (FeeMsat != 0L) hash ^= FeeMsat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (ChanCapacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChanCapacity);
      }
      if (AmtToForward != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmtToForward);
      }
      if (Fee != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Fee);
      }
      if (Expiry != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Expiry);
      }
      if (AmtToForwardMsat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AmtToForwardMsat);
      }
      if (FeeMsat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FeeMsat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (ChanCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChanCapacity);
      }
      if (AmtToForward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtToForward);
      }
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (Expiry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiry);
      }
      if (AmtToForwardMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtToForwardMsat);
      }
      if (FeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeMsat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hop other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.ChanCapacity != 0L) {
        ChanCapacity = other.ChanCapacity;
      }
      if (other.AmtToForward != 0L) {
        AmtToForward = other.AmtToForward;
      }
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.Expiry != 0) {
        Expiry = other.Expiry;
      }
      if (other.AmtToForwardMsat != 0L) {
        AmtToForwardMsat = other.AmtToForwardMsat;
      }
      if (other.FeeMsat != 0L) {
        FeeMsat = other.FeeMsat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            ChanCapacity = input.ReadInt64();
            break;
          }
          case 24: {
            AmtToForward = input.ReadInt64();
            break;
          }
          case 32: {
            Fee = input.ReadInt64();
            break;
          }
          case 40: {
            Expiry = input.ReadUInt32();
            break;
          }
          case 48: {
            AmtToForwardMsat = input.ReadInt64();
            break;
          }
          case 56: {
            FeeMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///A path through the channel graph which runs over one or more channels in
  ///succession. This struct carries all the information required to craft the
  ///Sphinx onion packet, and send the payment along the first hop in the path. A
  ///route is only selected as valid if all the channels have sufficient capacity to
  ///carry the initial payment amount after fees are accounted for.
  /// </summary>
  public sealed partial class Route : pb::IMessage<Route> {
    private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Route> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route(Route other) : this() {
      totalTimeLock_ = other.totalTimeLock_;
      totalFees_ = other.totalFees_;
      totalAmt_ = other.totalAmt_;
      hops_ = other.hops_.Clone();
      totalFeesMsat_ = other.totalFeesMsat_;
      totalAmtMsat_ = other.totalAmtMsat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route Clone() {
      return new Route(this);
    }

    /// <summary>Field number for the "total_time_lock" field.</summary>
    public const int TotalTimeLockFieldNumber = 1;
    private uint totalTimeLock_;
    /// <summary>
    ///*
    ///The cumulative (final) time lock across the entire route.  This is the CLTV
    ///value that should be extended to the first hop in the route. All other hops
    ///will decrement the time-lock as advertised, leaving enough time for all
    ///hops to wait for or present the payment preimage to complete the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalTimeLock {
      get { return totalTimeLock_; }
      set {
        totalTimeLock_ = value;
      }
    }

    /// <summary>Field number for the "total_fees" field.</summary>
    public const int TotalFeesFieldNumber = 2;
    private long totalFees_;
    /// <summary>
    ///*
    ///The sum of the fees paid at each hop within the final route.  In the case
    ///of a one-hop payment, this value will be zero as we don't need to pay a fee
    ///it ourself.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFees {
      get { return totalFees_; }
      set {
        totalFees_ = value;
      }
    }

    /// <summary>Field number for the "total_amt" field.</summary>
    public const int TotalAmtFieldNumber = 3;
    private long totalAmt_;
    /// <summary>
    ///*
    ///The total amount of funds required to complete a payment over this route.
    ///This value includes the cumulative fees at each hop. As a result, the HTLC
    ///extended to the first-hop in the route will need to have at least this many
    ///satoshis, otherwise the route will fail at an intermediate node due to an
    ///insufficient amount of fees.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmt {
      get { return totalAmt_; }
      set {
        totalAmt_ = value;
      }
    }

    /// <summary>Field number for the "hops" field.</summary>
    public const int HopsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.Hop> _repeated_hops_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.Hop.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Hop> hops_ = new pbc::RepeatedField<global::Lnrpc.Hop>();
    /// <summary>
    ///*
    ///Contains details concerning the specific forwarding details at each hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Hop> Hops {
      get { return hops_; }
    }

    /// <summary>Field number for the "total_fees_msat" field.</summary>
    public const int TotalFeesMsatFieldNumber = 5;
    private long totalFeesMsat_;
    /// <summary>
    ///*
    ///The total fees in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFeesMsat {
      get { return totalFeesMsat_; }
      set {
        totalFeesMsat_ = value;
      }
    }

    /// <summary>Field number for the "total_amt_msat" field.</summary>
    public const int TotalAmtMsatFieldNumber = 6;
    private long totalAmtMsat_;
    /// <summary>
    ///*
    ///The total amount in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmtMsat {
      get { return totalAmtMsat_; }
      set {
        totalAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Route);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Route other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalTimeLock != other.TotalTimeLock) return false;
      if (TotalFees != other.TotalFees) return false;
      if (TotalAmt != other.TotalAmt) return false;
      if(!hops_.Equals(other.hops_)) return false;
      if (TotalFeesMsat != other.TotalFeesMsat) return false;
      if (TotalAmtMsat != other.TotalAmtMsat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalTimeLock != 0) hash ^= TotalTimeLock.GetHashCode();
      if (TotalFees != 0L) hash ^= TotalFees.GetHashCode();
      if (TotalAmt != 0L) hash ^= TotalAmt.GetHashCode();
      hash ^= hops_.GetHashCode();
      if (TotalFeesMsat != 0L) hash ^= TotalFeesMsat.GetHashCode();
      if (TotalAmtMsat != 0L) hash ^= TotalAmtMsat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalTimeLock != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalTimeLock);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalFees);
      }
      if (TotalAmt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalAmt);
      }
      hops_.WriteTo(output, _repeated_hops_codec);
      if (TotalFeesMsat != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalFeesMsat);
      }
      if (TotalAmtMsat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalAmtMsat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalTimeLock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTimeLock);
      }
      if (TotalFees != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFees);
      }
      if (TotalAmt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmt);
      }
      size += hops_.CalculateSize(_repeated_hops_codec);
      if (TotalFeesMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFeesMsat);
      }
      if (TotalAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmtMsat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Route other) {
      if (other == null) {
        return;
      }
      if (other.TotalTimeLock != 0) {
        TotalTimeLock = other.TotalTimeLock;
      }
      if (other.TotalFees != 0L) {
        TotalFees = other.TotalFees;
      }
      if (other.TotalAmt != 0L) {
        TotalAmt = other.TotalAmt;
      }
      hops_.Add(other.hops_);
      if (other.TotalFeesMsat != 0L) {
        TotalFeesMsat = other.TotalFeesMsat;
      }
      if (other.TotalAmtMsat != 0L) {
        TotalAmtMsat = other.TotalAmtMsat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalTimeLock = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 24: {
            TotalAmt = input.ReadInt64();
            break;
          }
          case 34: {
            hops_.AddEntriesFrom(input, _repeated_hops_codec);
            break;
          }
          case 40: {
            TotalFeesMsat = input.ReadInt64();
            break;
          }
          case 48: {
            TotalAmtMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeInfoRequest : pb::IMessage<NodeInfoRequest> {
    private static readonly pb::MessageParser<NodeInfoRequest> _parser = new pb::MessageParser<NodeInfoRequest>(() => new NodeInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest(NodeInfoRequest other) : this() {
      pubKey_ = other.pubKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest Clone() {
      return new NodeInfoRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The 33-byte hex-encoded compressed public of the target node 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeInfo : pb::IMessage<NodeInfo> {
    private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo(NodeInfo other) : this() {
      Node = other.node_ != null ? other.Node.Clone() : null;
      numChannels_ = other.numChannels_;
      totalCapacity_ = other.totalCapacity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo Clone() {
      return new NodeInfo(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Lnrpc.LightningNode node_;
    /// <summary>
    ///*
    ///An individual vertex/node within the channel graph. A node is
    ///connected to other nodes by one or more channel edges emanating from it. As
    ///the graph is directed, a node will also have an incoming edge attached to
    ///it for each outgoing edge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.LightningNode Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "num_channels" field.</summary>
    public const int NumChannelsFieldNumber = 2;
    private uint numChannels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumChannels {
      get { return numChannels_; }
      set {
        numChannels_ = value;
      }
    }

    /// <summary>Field number for the "total_capacity" field.</summary>
    public const int TotalCapacityFieldNumber = 3;
    private long totalCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalCapacity {
      get { return totalCapacity_; }
      set {
        totalCapacity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (NumChannels != other.NumChannels) return false;
      if (TotalCapacity != other.TotalCapacity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (NumChannels != 0) hash ^= NumChannels.GetHashCode();
      if (TotalCapacity != 0L) hash ^= TotalCapacity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (NumChannels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumChannels);
      }
      if (TotalCapacity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalCapacity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (NumChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumChannels);
      }
      if (TotalCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalCapacity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::Lnrpc.LightningNode();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.NumChannels != 0) {
        NumChannels = other.NumChannels;
      }
      if (other.TotalCapacity != 0L) {
        TotalCapacity = other.TotalCapacity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (node_ == null) {
              node_ = new global::Lnrpc.LightningNode();
            }
            input.ReadMessage(node_);
            break;
          }
          case 16: {
            NumChannels = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalCapacity = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///An individual vertex/node within the channel graph. A node is
  ///connected to other nodes by one or more channel edges emanating from it. As the
  ///graph is directed, a node will also have an incoming edge attached to it for
  ///each outgoing edge.
  /// </summary>
  public sealed partial class LightningNode : pb::IMessage<LightningNode> {
    private static readonly pb::MessageParser<LightningNode> _parser = new pb::MessageParser<LightningNode>(() => new LightningNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightningNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode(LightningNode other) : this() {
      lastUpdate_ = other.lastUpdate_;
      pubKey_ = other.pubKey_;
      alias_ = other.alias_;
      addresses_ = other.addresses_.Clone();
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode Clone() {
      return new LightningNode(this);
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 1;
    private uint lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 2;
    private string pubKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.NodeAddress> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.NodeAddress.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodeAddress> addresses_ = new pbc::RepeatedField<global::Lnrpc.NodeAddress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodeAddress> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightningNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightningNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastUpdate != other.LastUpdate) return false;
      if (PubKey != other.PubKey) return false;
      if (Alias != other.Alias) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastUpdate != 0) hash ^= LastUpdate.GetHashCode();
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= addresses_.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastUpdate != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastUpdate);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PubKey);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightningNode other) {
      if (other == null) {
        return;
      }
      if (other.LastUpdate != 0) {
        LastUpdate = other.LastUpdate;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      addresses_.Add(other.addresses_);
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 18: {
            PubKey = input.ReadString();
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeAddress : pb::IMessage<NodeAddress> {
    private static readonly pb::MessageParser<NodeAddress> _parser = new pb::MessageParser<NodeAddress>(() => new NodeAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress(NodeAddress other) : this() {
      network_ = other.network_;
      addr_ = other.addr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress Clone() {
      return new NodeAddress(this);
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 1;
    private string network_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 2;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Network != other.Network) return false;
      if (Addr != other.Addr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Network.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Network);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Addr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeAddress other) {
      if (other == null) {
        return;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Network = input.ReadString();
            break;
          }
          case 18: {
            Addr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoutingPolicy : pb::IMessage<RoutingPolicy> {
    private static readonly pb::MessageParser<RoutingPolicy> _parser = new pb::MessageParser<RoutingPolicy>(() => new RoutingPolicy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutingPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy(RoutingPolicy other) : this() {
      timeLockDelta_ = other.timeLockDelta_;
      minHtlc_ = other.minHtlc_;
      feeBaseMsat_ = other.feeBaseMsat_;
      feeRateMilliMsat_ = other.feeRateMilliMsat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy Clone() {
      return new RoutingPolicy(this);
    }

    /// <summary>Field number for the "time_lock_delta" field.</summary>
    public const int TimeLockDeltaFieldNumber = 1;
    private uint timeLockDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeLockDelta {
      get { return timeLockDelta_; }
      set {
        timeLockDelta_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc" field.</summary>
    public const int MinHtlcFieldNumber = 2;
    private long minHtlc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinHtlc {
      get { return minHtlc_; }
      set {
        minHtlc_ = value;
      }
    }

    /// <summary>Field number for the "fee_base_msat" field.</summary>
    public const int FeeBaseMsatFieldNumber = 3;
    private long feeBaseMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeBaseMsat {
      get { return feeBaseMsat_; }
      set {
        feeBaseMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate_milli_msat" field.</summary>
    public const int FeeRateMilliMsatFieldNumber = 4;
    private long feeRateMilliMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeRateMilliMsat {
      get { return feeRateMilliMsat_; }
      set {
        feeRateMilliMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutingPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutingPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeLockDelta != other.TimeLockDelta) return false;
      if (MinHtlc != other.MinHtlc) return false;
      if (FeeBaseMsat != other.FeeBaseMsat) return false;
      if (FeeRateMilliMsat != other.FeeRateMilliMsat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeLockDelta != 0) hash ^= TimeLockDelta.GetHashCode();
      if (MinHtlc != 0L) hash ^= MinHtlc.GetHashCode();
      if (FeeBaseMsat != 0L) hash ^= FeeBaseMsat.GetHashCode();
      if (FeeRateMilliMsat != 0L) hash ^= FeeRateMilliMsat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeLockDelta != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeLockDelta);
      }
      if (MinHtlc != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinHtlc);
      }
      if (FeeBaseMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FeeBaseMsat);
      }
      if (FeeRateMilliMsat != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FeeRateMilliMsat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeLockDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLockDelta);
      }
      if (MinHtlc != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinHtlc);
      }
      if (FeeBaseMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeBaseMsat);
      }
      if (FeeRateMilliMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeRateMilliMsat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutingPolicy other) {
      if (other == null) {
        return;
      }
      if (other.TimeLockDelta != 0) {
        TimeLockDelta = other.TimeLockDelta;
      }
      if (other.MinHtlc != 0L) {
        MinHtlc = other.MinHtlc;
      }
      if (other.FeeBaseMsat != 0L) {
        FeeBaseMsat = other.FeeBaseMsat;
      }
      if (other.FeeRateMilliMsat != 0L) {
        FeeRateMilliMsat = other.FeeRateMilliMsat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 16: {
            MinHtlc = input.ReadInt64();
            break;
          }
          case 24: {
            FeeBaseMsat = input.ReadInt64();
            break;
          }
          case 32: {
            FeeRateMilliMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///A fully authenticated channel along with all its unique attributes.
  ///Once an authenticated channel announcement has been processed on the network,
  ///then an instance of ChannelEdgeInfo encapsulating the channels attributes is
  ///stored. The other portions relevant to routing policy of a channel are stored
  ///within a ChannelEdgePolicy for each direction of the channel.
  /// </summary>
  public sealed partial class ChannelEdge : pb::IMessage<ChannelEdge> {
    private static readonly pb::MessageParser<ChannelEdge> _parser = new pb::MessageParser<ChannelEdge>(() => new ChannelEdge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEdge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge(ChannelEdge other) : this() {
      channelId_ = other.channelId_;
      chanPoint_ = other.chanPoint_;
      lastUpdate_ = other.lastUpdate_;
      node1Pub_ = other.node1Pub_;
      node2Pub_ = other.node2Pub_;
      capacity_ = other.capacity_;
      Node1Policy = other.node1Policy_ != null ? other.Node1Policy.Clone() : null;
      Node2Policy = other.node2Policy_ != null ? other.Node2Policy.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge Clone() {
      return new ChannelEdge(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private ulong channelId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    private string chanPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 3;
    private uint lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "node1_pub" field.</summary>
    public const int Node1PubFieldNumber = 4;
    private string node1Pub_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Node1Pub {
      get { return node1Pub_; }
      set {
        node1Pub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node2_pub" field.</summary>
    public const int Node2PubFieldNumber = 5;
    private string node2Pub_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Node2Pub {
      get { return node2Pub_; }
      set {
        node2Pub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "node1_policy" field.</summary>
    public const int Node1PolicyFieldNumber = 7;
    private global::Lnrpc.RoutingPolicy node1Policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy Node1Policy {
      get { return node1Policy_; }
      set {
        node1Policy_ = value;
      }
    }

    /// <summary>Field number for the "node2_policy" field.</summary>
    public const int Node2PolicyFieldNumber = 8;
    private global::Lnrpc.RoutingPolicy node2Policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy Node2Policy {
      get { return node2Policy_; }
      set {
        node2Policy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEdge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEdge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (ChanPoint != other.ChanPoint) return false;
      if (LastUpdate != other.LastUpdate) return false;
      if (Node1Pub != other.Node1Pub) return false;
      if (Node2Pub != other.Node2Pub) return false;
      if (Capacity != other.Capacity) return false;
      if (!object.Equals(Node1Policy, other.Node1Policy)) return false;
      if (!object.Equals(Node2Policy, other.Node2Policy)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0UL) hash ^= ChannelId.GetHashCode();
      if (ChanPoint.Length != 0) hash ^= ChanPoint.GetHashCode();
      if (LastUpdate != 0) hash ^= LastUpdate.GetHashCode();
      if (Node1Pub.Length != 0) hash ^= Node1Pub.GetHashCode();
      if (Node2Pub.Length != 0) hash ^= Node2Pub.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (node1Policy_ != null) hash ^= Node1Policy.GetHashCode();
      if (node2Policy_ != null) hash ^= Node2Policy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelId);
      }
      if (ChanPoint.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChanPoint);
      }
      if (LastUpdate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastUpdate);
      }
      if (Node1Pub.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Node1Pub);
      }
      if (Node2Pub.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Node2Pub);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Capacity);
      }
      if (node1Policy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Node1Policy);
      }
      if (node2Policy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Node2Policy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelId);
      }
      if (ChanPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChanPoint);
      }
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (Node1Pub.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Node1Pub);
      }
      if (Node2Pub.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Node2Pub);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (node1Policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node1Policy);
      }
      if (node2Policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node2Policy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEdge other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0UL) {
        ChannelId = other.ChannelId;
      }
      if (other.ChanPoint.Length != 0) {
        ChanPoint = other.ChanPoint;
      }
      if (other.LastUpdate != 0) {
        LastUpdate = other.LastUpdate;
      }
      if (other.Node1Pub.Length != 0) {
        Node1Pub = other.Node1Pub;
      }
      if (other.Node2Pub.Length != 0) {
        Node2Pub = other.Node2Pub;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.node1Policy_ != null) {
        if (node1Policy_ == null) {
          node1Policy_ = new global::Lnrpc.RoutingPolicy();
        }
        Node1Policy.MergeFrom(other.Node1Policy);
      }
      if (other.node2Policy_ != null) {
        if (node2Policy_ == null) {
          node2Policy_ = new global::Lnrpc.RoutingPolicy();
        }
        Node2Policy.MergeFrom(other.Node2Policy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 18: {
            ChanPoint = input.ReadString();
            break;
          }
          case 24: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 34: {
            Node1Pub = input.ReadString();
            break;
          }
          case 42: {
            Node2Pub = input.ReadString();
            break;
          }
          case 48: {
            Capacity = input.ReadInt64();
            break;
          }
          case 58: {
            if (node1Policy_ == null) {
              node1Policy_ = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(node1Policy_);
            break;
          }
          case 66: {
            if (node2Policy_ == null) {
              node2Policy_ = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(node2Policy_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelGraphRequest : pb::IMessage<ChannelGraphRequest> {
    private static readonly pb::MessageParser<ChannelGraphRequest> _parser = new pb::MessageParser<ChannelGraphRequest>(() => new ChannelGraphRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest(ChannelGraphRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest Clone() {
      return new ChannelGraphRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelGraphRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  //// Returns a new instance of the directed channel graph.
  /// </summary>
  public sealed partial class ChannelGraph : pb::IMessage<ChannelGraph> {
    private static readonly pb::MessageParser<ChannelGraph> _parser = new pb::MessageParser<ChannelGraph>(() => new ChannelGraph());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph(ChannelGraph other) : this() {
      nodes_ = other.nodes_.Clone();
      edges_ = other.edges_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph Clone() {
      return new ChannelGraph(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.LightningNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.LightningNode.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.LightningNode> nodes_ = new pbc::RepeatedField<global::Lnrpc.LightningNode>();
    /// <summary>
    //// The list of `LightningNode`s in this channel graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.LightningNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "edges" field.</summary>
    public const int EdgesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelEdge> _repeated_edges_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.ChannelEdge.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelEdge> edges_ = new pbc::RepeatedField<global::Lnrpc.ChannelEdge>();
    /// <summary>
    //// The list of `ChannelEdge`s in this channel graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelEdge> Edges {
      get { return edges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!edges_.Equals(other.edges_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      hash ^= edges_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      edges_.WriteTo(output, _repeated_edges_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += edges_.CalculateSize(_repeated_edges_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelGraph other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      edges_.Add(other.edges_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            edges_.AddEntriesFrom(input, _repeated_edges_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChanInfoRequest : pb::IMessage<ChanInfoRequest> {
    private static readonly pb::MessageParser<ChanInfoRequest> _parser = new pb::MessageParser<ChanInfoRequest>(() => new ChanInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest(ChanInfoRequest other) : this() {
      chanId_ = other.chanId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest Clone() {
      return new ChanInfoRequest(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkInfoRequest : pb::IMessage<NetworkInfoRequest> {
    private static readonly pb::MessageParser<NetworkInfoRequest> _parser = new pb::MessageParser<NetworkInfoRequest>(() => new NetworkInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest(NetworkInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest Clone() {
      return new NetworkInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class NetworkInfo : pb::IMessage<NetworkInfo> {
    private static readonly pb::MessageParser<NetworkInfo> _parser = new pb::MessageParser<NetworkInfo>(() => new NetworkInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo(NetworkInfo other) : this() {
      graphDiameter_ = other.graphDiameter_;
      avgOutDegree_ = other.avgOutDegree_;
      maxOutDegree_ = other.maxOutDegree_;
      numNodes_ = other.numNodes_;
      numChannels_ = other.numChannels_;
      totalNetworkCapacity_ = other.totalNetworkCapacity_;
      avgChannelSize_ = other.avgChannelSize_;
      minChannelSize_ = other.minChannelSize_;
      maxChannelSize_ = other.maxChannelSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo Clone() {
      return new NetworkInfo(this);
    }

    /// <summary>Field number for the "graph_diameter" field.</summary>
    public const int GraphDiameterFieldNumber = 1;
    private uint graphDiameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GraphDiameter {
      get { return graphDiameter_; }
      set {
        graphDiameter_ = value;
      }
    }

    /// <summary>Field number for the "avg_out_degree" field.</summary>
    public const int AvgOutDegreeFieldNumber = 2;
    private double avgOutDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgOutDegree {
      get { return avgOutDegree_; }
      set {
        avgOutDegree_ = value;
      }
    }

    /// <summary>Field number for the "max_out_degree" field.</summary>
    public const int MaxOutDegreeFieldNumber = 3;
    private uint maxOutDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxOutDegree {
      get { return maxOutDegree_; }
      set {
        maxOutDegree_ = value;
      }
    }

    /// <summary>Field number for the "num_nodes" field.</summary>
    public const int NumNodesFieldNumber = 4;
    private uint numNodes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumNodes {
      get { return numNodes_; }
      set {
        numNodes_ = value;
      }
    }

    /// <summary>Field number for the "num_channels" field.</summary>
    public const int NumChannelsFieldNumber = 5;
    private uint numChannels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumChannels {
      get { return numChannels_; }
      set {
        numChannels_ = value;
      }
    }

    /// <summary>Field number for the "total_network_capacity" field.</summary>
    public const int TotalNetworkCapacityFieldNumber = 6;
    private long totalNetworkCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalNetworkCapacity {
      get { return totalNetworkCapacity_; }
      set {
        totalNetworkCapacity_ = value;
      }
    }

    /// <summary>Field number for the "avg_channel_size" field.</summary>
    public const int AvgChannelSizeFieldNumber = 7;
    private double avgChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgChannelSize {
      get { return avgChannelSize_; }
      set {
        avgChannelSize_ = value;
      }
    }

    /// <summary>Field number for the "min_channel_size" field.</summary>
    public const int MinChannelSizeFieldNumber = 8;
    private long minChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinChannelSize {
      get { return minChannelSize_; }
      set {
        minChannelSize_ = value;
      }
    }

    /// <summary>Field number for the "max_channel_size" field.</summary>
    public const int MaxChannelSizeFieldNumber = 9;
    private long maxChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxChannelSize {
      get { return maxChannelSize_; }
      set {
        maxChannelSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GraphDiameter != other.GraphDiameter) return false;
      if (AvgOutDegree != other.AvgOutDegree) return false;
      if (MaxOutDegree != other.MaxOutDegree) return false;
      if (NumNodes != other.NumNodes) return false;
      if (NumChannels != other.NumChannels) return false;
      if (TotalNetworkCapacity != other.TotalNetworkCapacity) return false;
      if (AvgChannelSize != other.AvgChannelSize) return false;
      if (MinChannelSize != other.MinChannelSize) return false;
      if (MaxChannelSize != other.MaxChannelSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GraphDiameter != 0) hash ^= GraphDiameter.GetHashCode();
      if (AvgOutDegree != 0D) hash ^= AvgOutDegree.GetHashCode();
      if (MaxOutDegree != 0) hash ^= MaxOutDegree.GetHashCode();
      if (NumNodes != 0) hash ^= NumNodes.GetHashCode();
      if (NumChannels != 0) hash ^= NumChannels.GetHashCode();
      if (TotalNetworkCapacity != 0L) hash ^= TotalNetworkCapacity.GetHashCode();
      if (AvgChannelSize != 0D) hash ^= AvgChannelSize.GetHashCode();
      if (MinChannelSize != 0L) hash ^= MinChannelSize.GetHashCode();
      if (MaxChannelSize != 0L) hash ^= MaxChannelSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphDiameter != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GraphDiameter);
      }
      if (AvgOutDegree != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AvgOutDegree);
      }
      if (MaxOutDegree != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxOutDegree);
      }
      if (NumNodes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumNodes);
      }
      if (NumChannels != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumChannels);
      }
      if (TotalNetworkCapacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalNetworkCapacity);
      }
      if (AvgChannelSize != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AvgChannelSize);
      }
      if (MinChannelSize != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(MinChannelSize);
      }
      if (MaxChannelSize != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MaxChannelSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GraphDiameter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GraphDiameter);
      }
      if (AvgOutDegree != 0D) {
        size += 1 + 8;
      }
      if (MaxOutDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxOutDegree);
      }
      if (NumNodes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumNodes);
      }
      if (NumChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumChannels);
      }
      if (TotalNetworkCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalNetworkCapacity);
      }
      if (AvgChannelSize != 0D) {
        size += 1 + 8;
      }
      if (MinChannelSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinChannelSize);
      }
      if (MaxChannelSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxChannelSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfo other) {
      if (other == null) {
        return;
      }
      if (other.GraphDiameter != 0) {
        GraphDiameter = other.GraphDiameter;
      }
      if (other.AvgOutDegree != 0D) {
        AvgOutDegree = other.AvgOutDegree;
      }
      if (other.MaxOutDegree != 0) {
        MaxOutDegree = other.MaxOutDegree;
      }
      if (other.NumNodes != 0) {
        NumNodes = other.NumNodes;
      }
      if (other.NumChannels != 0) {
        NumChannels = other.NumChannels;
      }
      if (other.TotalNetworkCapacity != 0L) {
        TotalNetworkCapacity = other.TotalNetworkCapacity;
      }
      if (other.AvgChannelSize != 0D) {
        AvgChannelSize = other.AvgChannelSize;
      }
      if (other.MinChannelSize != 0L) {
        MinChannelSize = other.MinChannelSize;
      }
      if (other.MaxChannelSize != 0L) {
        MaxChannelSize = other.MaxChannelSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GraphDiameter = input.ReadUInt32();
            break;
          }
          case 17: {
            AvgOutDegree = input.ReadDouble();
            break;
          }
          case 24: {
            MaxOutDegree = input.ReadUInt32();
            break;
          }
          case 32: {
            NumNodes = input.ReadUInt32();
            break;
          }
          case 40: {
            NumChannels = input.ReadUInt32();
            break;
          }
          case 48: {
            TotalNetworkCapacity = input.ReadInt64();
            break;
          }
          case 57: {
            AvgChannelSize = input.ReadDouble();
            break;
          }
          case 64: {
            MinChannelSize = input.ReadInt64();
            break;
          }
          case 72: {
            MaxChannelSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopRequest : pb::IMessage<StopRequest> {
    private static readonly pb::MessageParser<StopRequest> _parser = new pb::MessageParser<StopRequest>(() => new StopRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest(StopRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest Clone() {
      return new StopRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StopResponse : pb::IMessage<StopResponse> {
    private static readonly pb::MessageParser<StopResponse> _parser = new pb::MessageParser<StopResponse>(() => new StopResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse(StopResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse Clone() {
      return new StopResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GraphTopologySubscription : pb::IMessage<GraphTopologySubscription> {
    private static readonly pb::MessageParser<GraphTopologySubscription> _parser = new pb::MessageParser<GraphTopologySubscription>(() => new GraphTopologySubscription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphTopologySubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription(GraphTopologySubscription other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription Clone() {
      return new GraphTopologySubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphTopologySubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphTopologySubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphTopologySubscription other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GraphTopologyUpdate : pb::IMessage<GraphTopologyUpdate> {
    private static readonly pb::MessageParser<GraphTopologyUpdate> _parser = new pb::MessageParser<GraphTopologyUpdate>(() => new GraphTopologyUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphTopologyUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate(GraphTopologyUpdate other) : this() {
      nodeUpdates_ = other.nodeUpdates_.Clone();
      channelUpdates_ = other.channelUpdates_.Clone();
      closedChans_ = other.closedChans_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate Clone() {
      return new GraphTopologyUpdate(this);
    }

    /// <summary>Field number for the "node_updates" field.</summary>
    public const int NodeUpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.NodeUpdate> _repeated_nodeUpdates_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.NodeUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodeUpdate> nodeUpdates_ = new pbc::RepeatedField<global::Lnrpc.NodeUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodeUpdate> NodeUpdates {
      get { return nodeUpdates_; }
    }

    /// <summary>Field number for the "channel_updates" field.</summary>
    public const int ChannelUpdatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelEdgeUpdate> _repeated_channelUpdates_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.ChannelEdgeUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate> channelUpdates_ = new pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate> ChannelUpdates {
      get { return channelUpdates_; }
    }

    /// <summary>Field number for the "closed_chans" field.</summary>
    public const int ClosedChansFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Lnrpc.ClosedChannelUpdate> _repeated_closedChans_codec
        = pb::FieldCodec.ForMessage(26, global::Lnrpc.ClosedChannelUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate> closedChans_ = new pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate> ClosedChans {
      get { return closedChans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphTopologyUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphTopologyUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeUpdates_.Equals(other.nodeUpdates_)) return false;
      if(!channelUpdates_.Equals(other.channelUpdates_)) return false;
      if(!closedChans_.Equals(other.closedChans_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeUpdates_.GetHashCode();
      hash ^= channelUpdates_.GetHashCode();
      hash ^= closedChans_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeUpdates_.WriteTo(output, _repeated_nodeUpdates_codec);
      channelUpdates_.WriteTo(output, _repeated_channelUpdates_codec);
      closedChans_.WriteTo(output, _repeated_closedChans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeUpdates_.CalculateSize(_repeated_nodeUpdates_codec);
      size += channelUpdates_.CalculateSize(_repeated_channelUpdates_codec);
      size += closedChans_.CalculateSize(_repeated_closedChans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphTopologyUpdate other) {
      if (other == null) {
        return;
      }
      nodeUpdates_.Add(other.nodeUpdates_);
      channelUpdates_.Add(other.channelUpdates_);
      closedChans_.Add(other.closedChans_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodeUpdates_.AddEntriesFrom(input, _repeated_nodeUpdates_codec);
            break;
          }
          case 18: {
            channelUpdates_.AddEntriesFrom(input, _repeated_channelUpdates_codec);
            break;
          }
          case 26: {
            closedChans_.AddEntriesFrom(input, _repeated_closedChans_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeUpdate : pb::IMessage<NodeUpdate> {
    private static readonly pb::MessageParser<NodeUpdate> _parser = new pb::MessageParser<NodeUpdate>(() => new NodeUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate(NodeUpdate other) : this() {
      addresses_ = other.addresses_.Clone();
      identityKey_ = other.identityKey_;
      globalFeatures_ = other.globalFeatures_;
      alias_ = other.alias_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate Clone() {
      return new NodeUpdate(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_addresses_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> addresses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "identity_key" field.</summary>
    public const int IdentityKeyFieldNumber = 2;
    private string identityKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityKey {
      get { return identityKey_; }
      set {
        identityKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "global_features" field.</summary>
    public const int GlobalFeaturesFieldNumber = 3;
    private pb::ByteString globalFeatures_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GlobalFeatures {
      get { return globalFeatures_; }
      set {
        globalFeatures_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 4;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      if (IdentityKey != other.IdentityKey) return false;
      if (GlobalFeatures != other.GlobalFeatures) return false;
      if (Alias != other.Alias) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      if (IdentityKey.Length != 0) hash ^= IdentityKey.GetHashCode();
      if (GlobalFeatures.Length != 0) hash ^= GlobalFeatures.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (IdentityKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdentityKey);
      }
      if (GlobalFeatures.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GlobalFeatures);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Alias);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (IdentityKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityKey);
      }
      if (GlobalFeatures.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GlobalFeatures);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeUpdate other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
      if (other.IdentityKey.Length != 0) {
        IdentityKey = other.IdentityKey;
      }
      if (other.GlobalFeatures.Length != 0) {
        GlobalFeatures = other.GlobalFeatures;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 18: {
            IdentityKey = input.ReadString();
            break;
          }
          case 26: {
            GlobalFeatures = input.ReadBytes();
            break;
          }
          case 34: {
            Alias = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelEdgeUpdate : pb::IMessage<ChannelEdgeUpdate> {
    private static readonly pb::MessageParser<ChannelEdgeUpdate> _parser = new pb::MessageParser<ChannelEdgeUpdate>(() => new ChannelEdgeUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEdgeUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate(ChannelEdgeUpdate other) : this() {
      chanId_ = other.chanId_;
      ChanPoint = other.chanPoint_ != null ? other.ChanPoint.Clone() : null;
      capacity_ = other.capacity_;
      RoutingPolicy = other.routingPolicy_ != null ? other.RoutingPolicy.Clone() : null;
      advertisingNode_ = other.advertisingNode_;
      connectingNode_ = other.connectingNode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate Clone() {
      return new ChannelEdgeUpdate(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    private global::Lnrpc.ChannelPoint chanPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 3;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "routing_policy" field.</summary>
    public const int RoutingPolicyFieldNumber = 4;
    private global::Lnrpc.RoutingPolicy routingPolicy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy RoutingPolicy {
      get { return routingPolicy_; }
      set {
        routingPolicy_ = value;
      }
    }

    /// <summary>Field number for the "advertising_node" field.</summary>
    public const int AdvertisingNodeFieldNumber = 5;
    private string advertisingNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdvertisingNode {
      get { return advertisingNode_; }
      set {
        advertisingNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connecting_node" field.</summary>
    public const int ConnectingNodeFieldNumber = 6;
    private string connectingNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectingNode {
      get { return connectingNode_; }
      set {
        connectingNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEdgeUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEdgeUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (Capacity != other.Capacity) return false;
      if (!object.Equals(RoutingPolicy, other.RoutingPolicy)) return false;
      if (AdvertisingNode != other.AdvertisingNode) return false;
      if (ConnectingNode != other.ConnectingNode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (routingPolicy_ != null) hash ^= RoutingPolicy.GetHashCode();
      if (AdvertisingNode.Length != 0) hash ^= AdvertisingNode.GetHashCode();
      if (ConnectingNode.Length != 0) hash ^= ConnectingNode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Capacity);
      }
      if (routingPolicy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoutingPolicy);
      }
      if (AdvertisingNode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdvertisingNode);
      }
      if (ConnectingNode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ConnectingNode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (routingPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoutingPolicy);
      }
      if (AdvertisingNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdvertisingNode);
      }
      if (ConnectingNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectingNode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEdgeUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          chanPoint_ = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.routingPolicy_ != null) {
        if (routingPolicy_ == null) {
          routingPolicy_ = new global::Lnrpc.RoutingPolicy();
        }
        RoutingPolicy.MergeFrom(other.RoutingPolicy);
      }
      if (other.AdvertisingNode.Length != 0) {
        AdvertisingNode = other.AdvertisingNode;
      }
      if (other.ConnectingNode.Length != 0) {
        ConnectingNode = other.ConnectingNode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (chanPoint_ == null) {
              chanPoint_ = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(chanPoint_);
            break;
          }
          case 24: {
            Capacity = input.ReadInt64();
            break;
          }
          case 34: {
            if (routingPolicy_ == null) {
              routingPolicy_ = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(routingPolicy_);
            break;
          }
          case 42: {
            AdvertisingNode = input.ReadString();
            break;
          }
          case 50: {
            ConnectingNode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClosedChannelUpdate : pb::IMessage<ClosedChannelUpdate> {
    private static readonly pb::MessageParser<ClosedChannelUpdate> _parser = new pb::MessageParser<ClosedChannelUpdate>(() => new ClosedChannelUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClosedChannelUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate(ClosedChannelUpdate other) : this() {
      chanId_ = other.chanId_;
      capacity_ = other.capacity_;
      closedHeight_ = other.closedHeight_;
      ChanPoint = other.chanPoint_ != null ? other.ChanPoint.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate Clone() {
      return new ClosedChannelUpdate(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "closed_height" field.</summary>
    public const int ClosedHeightFieldNumber = 3;
    private uint closedHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClosedHeight {
      get { return closedHeight_; }
      set {
        closedHeight_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 4;
    private global::Lnrpc.ChannelPoint chanPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClosedChannelUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClosedChannelUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (Capacity != other.Capacity) return false;
      if (ClosedHeight != other.ClosedHeight) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (ClosedHeight != 0) hash ^= ClosedHeight.GetHashCode();
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Capacity);
      }
      if (ClosedHeight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClosedHeight);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChanPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (ClosedHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClosedHeight);
      }
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClosedChannelUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.ClosedHeight != 0) {
        ClosedHeight = other.ClosedHeight;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          chanPoint_ = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            Capacity = input.ReadInt64();
            break;
          }
          case 24: {
            ClosedHeight = input.ReadUInt32();
            break;
          }
          case 34: {
            if (chanPoint_ == null) {
              chanPoint_ = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(chanPoint_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Invoice : pb::IMessage<Invoice> {
    private static readonly pb::MessageParser<Invoice> _parser = new pb::MessageParser<Invoice>(() => new Invoice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Invoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice(Invoice other) : this() {
      memo_ = other.memo_;
      receipt_ = other.receipt_;
      rPreimage_ = other.rPreimage_;
      rHash_ = other.rHash_;
      value_ = other.value_;
      settled_ = other.settled_;
      creationDate_ = other.creationDate_;
      settleDate_ = other.settleDate_;
      paymentRequest_ = other.paymentRequest_;
      descriptionHash_ = other.descriptionHash_;
      expiry_ = other.expiry_;
      fallbackAddr_ = other.fallbackAddr_;
      cltvExpiry_ = other.cltvExpiry_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice Clone() {
      return new Invoice(this);
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 1;
    private string memo_ = "";
    /// <summary>
    ///*
    ///An optional memo to attach along with the invoice. Used for record keeping
    ///purposes for the invoice's creator, and will also be set in the description
    ///field of the encoded payment request if the description_hash field is not
    ///being used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receipt" field.</summary>
    public const int ReceiptFieldNumber = 2;
    private pb::ByteString receipt_ = pb::ByteString.Empty;
    /// <summary>
    //// An optional cryptographic receipt of payment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Receipt {
      get { return receipt_; }
      set {
        receipt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_preimage" field.</summary>
    public const int RPreimageFieldNumber = 3;
    private pb::ByteString rPreimage_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The hex-encoded preimage (32 byte) which will allow settling an incoming
    ///HTLC payable to this preimage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RPreimage {
      get { return rPreimage_; }
      set {
        rPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 4;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The hash of the preimage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private long value_;
    /// <summary>
    //// The value of this invoice in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "settled" field.</summary>
    public const int SettledFieldNumber = 6;
    private bool settled_;
    /// <summary>
    //// Whether this invoice has been fulfilled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Settled {
      get { return settled_; }
      set {
        settled_ = value;
      }
    }

    /// <summary>Field number for the "creation_date" field.</summary>
    public const int CreationDateFieldNumber = 7;
    private long creationDate_;
    /// <summary>
    //// When this invoice was created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationDate {
      get { return creationDate_; }
      set {
        creationDate_ = value;
      }
    }

    /// <summary>Field number for the "settle_date" field.</summary>
    public const int SettleDateFieldNumber = 8;
    private long settleDate_;
    /// <summary>
    //// When this invoice was settled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SettleDate {
      get { return settleDate_; }
      set {
        settleDate_ = value;
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 9;
    private string paymentRequest_ = "";
    /// <summary>
    ///*
    ///A bare-bones invoice for a payment within the Lightning Network.  With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description_hash" field.</summary>
    public const int DescriptionHashFieldNumber = 10;
    private pb::ByteString descriptionHash_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///Hash (SHA-256) of a description of the payment. Used if the description of
    ///payment (memo) is too long to naturally fit within the description field
    ///of an encoded payment request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DescriptionHash {
      get { return descriptionHash_; }
      set {
        descriptionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 11;
    private long expiry_;
    /// <summary>
    //// Payment request expiry time in seconds. Default is 3600 (1 hour).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "fallback_addr" field.</summary>
    public const int FallbackAddrFieldNumber = 12;
    private string fallbackAddr_ = "";
    /// <summary>
    //// Fallback on-chain address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallbackAddr {
      get { return fallbackAddr_; }
      set {
        fallbackAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_expiry" field.</summary>
    public const int CltvExpiryFieldNumber = 13;
    private ulong cltvExpiry_;
    /// <summary>
    //// Delta to use for the time-lock of the CLTV extended to the final hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CltvExpiry {
      get { return cltvExpiry_; }
      set {
        cltvExpiry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Invoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Invoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Memo != other.Memo) return false;
      if (Receipt != other.Receipt) return false;
      if (RPreimage != other.RPreimage) return false;
      if (RHash != other.RHash) return false;
      if (Value != other.Value) return false;
      if (Settled != other.Settled) return false;
      if (CreationDate != other.CreationDate) return false;
      if (SettleDate != other.SettleDate) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (DescriptionHash != other.DescriptionHash) return false;
      if (Expiry != other.Expiry) return false;
      if (FallbackAddr != other.FallbackAddr) return false;
      if (CltvExpiry != other.CltvExpiry) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (Receipt.Length != 0) hash ^= Receipt.GetHashCode();
      if (RPreimage.Length != 0) hash ^= RPreimage.GetHashCode();
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (Settled != false) hash ^= Settled.GetHashCode();
      if (CreationDate != 0L) hash ^= CreationDate.GetHashCode();
      if (SettleDate != 0L) hash ^= SettleDate.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (DescriptionHash.Length != 0) hash ^= DescriptionHash.GetHashCode();
      if (Expiry != 0L) hash ^= Expiry.GetHashCode();
      if (FallbackAddr.Length != 0) hash ^= FallbackAddr.GetHashCode();
      if (CltvExpiry != 0UL) hash ^= CltvExpiry.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Memo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Memo);
      }
      if (Receipt.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Receipt);
      }
      if (RPreimage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RPreimage);
      }
      if (RHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RHash);
      }
      if (Value != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Value);
      }
      if (Settled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Settled);
      }
      if (CreationDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CreationDate);
      }
      if (SettleDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SettleDate);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaymentRequest);
      }
      if (DescriptionHash.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(DescriptionHash);
      }
      if (Expiry != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Expiry);
      }
      if (FallbackAddr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FallbackAddr);
      }
      if (CltvExpiry != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(CltvExpiry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (Receipt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Receipt);
      }
      if (RPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RPreimage);
      }
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (Settled != false) {
        size += 1 + 1;
      }
      if (CreationDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationDate);
      }
      if (SettleDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SettleDate);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (DescriptionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DescriptionHash);
      }
      if (Expiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiry);
      }
      if (FallbackAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallbackAddr);
      }
      if (CltvExpiry != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CltvExpiry);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Invoice other) {
      if (other == null) {
        return;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.Receipt.Length != 0) {
        Receipt = other.Receipt;
      }
      if (other.RPreimage.Length != 0) {
        RPreimage = other.RPreimage;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.Settled != false) {
        Settled = other.Settled;
      }
      if (other.CreationDate != 0L) {
        CreationDate = other.CreationDate;
      }
      if (other.SettleDate != 0L) {
        SettleDate = other.SettleDate;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.DescriptionHash.Length != 0) {
        DescriptionHash = other.DescriptionHash;
      }
      if (other.Expiry != 0L) {
        Expiry = other.Expiry;
      }
      if (other.FallbackAddr.Length != 0) {
        FallbackAddr = other.FallbackAddr;
      }
      if (other.CltvExpiry != 0UL) {
        CltvExpiry = other.CltvExpiry;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Memo = input.ReadString();
            break;
          }
          case 18: {
            Receipt = input.ReadBytes();
            break;
          }
          case 26: {
            RPreimage = input.ReadBytes();
            break;
          }
          case 34: {
            RHash = input.ReadBytes();
            break;
          }
          case 40: {
            Value = input.ReadInt64();
            break;
          }
          case 48: {
            Settled = input.ReadBool();
            break;
          }
          case 56: {
            CreationDate = input.ReadInt64();
            break;
          }
          case 64: {
            SettleDate = input.ReadInt64();
            break;
          }
          case 74: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 82: {
            DescriptionHash = input.ReadBytes();
            break;
          }
          case 88: {
            Expiry = input.ReadInt64();
            break;
          }
          case 98: {
            FallbackAddr = input.ReadString();
            break;
          }
          case 104: {
            CltvExpiry = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddInvoiceResponse : pb::IMessage<AddInvoiceResponse> {
    private static readonly pb::MessageParser<AddInvoiceResponse> _parser = new pb::MessageParser<AddInvoiceResponse>(() => new AddInvoiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddInvoiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse(AddInvoiceResponse other) : this() {
      rHash_ = other.rHash_;
      paymentRequest_ = other.paymentRequest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse Clone() {
      return new AddInvoiceResponse(this);
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 1;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 2;
    private string paymentRequest_ = "";
    /// <summary>
    ///*
    ///A bare-bones invoice for a payment within the Lightning Network.  With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddInvoiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddInvoiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RHash != other.RHash) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RHash);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddInvoiceResponse other) {
      if (other == null) {
        return;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RHash = input.ReadBytes();
            break;
          }
          case 18: {
            PaymentRequest = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaymentHash : pb::IMessage<PaymentHash> {
    private static readonly pb::MessageParser<PaymentHash> _parser = new pb::MessageParser<PaymentHash>(() => new PaymentHash());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentHash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash(PaymentHash other) : this() {
      rHashStr_ = other.rHashStr_;
      rHash_ = other.rHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash Clone() {
      return new PaymentHash(this);
    }

    /// <summary>Field number for the "r_hash_str" field.</summary>
    public const int RHashStrFieldNumber = 1;
    private string rHashStr_ = "";
    /// <summary>
    ///*
    ///The hex-encoded payment hash of the invoice to be looked up. The passed
    ///payment hash must be exactly 32 bytes, otherwise an error is returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RHashStr {
      get { return rHashStr_; }
      set {
        rHashStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 2;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The payment hash of the invoice to be looked up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentHash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentHash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RHashStr != other.RHashStr) return false;
      if (RHash != other.RHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RHashStr.Length != 0) hash ^= RHashStr.GetHashCode();
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RHashStr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RHashStr);
      }
      if (RHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RHashStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RHashStr);
      }
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentHash other) {
      if (other == null) {
        return;
      }
      if (other.RHashStr.Length != 0) {
        RHashStr = other.RHashStr;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RHashStr = input.ReadString();
            break;
          }
          case 18: {
            RHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListInvoiceRequest : pb::IMessage<ListInvoiceRequest> {
    private static readonly pb::MessageParser<ListInvoiceRequest> _parser = new pb::MessageParser<ListInvoiceRequest>(() => new ListInvoiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInvoiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest(ListInvoiceRequest other) : this() {
      pendingOnly_ = other.pendingOnly_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest Clone() {
      return new ListInvoiceRequest(this);
    }

    /// <summary>Field number for the "pending_only" field.</summary>
    public const int PendingOnlyFieldNumber = 1;
    private bool pendingOnly_;
    /// <summary>
    //// Toggles if all invoices should be returned, or only those that are currently unsettled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PendingOnly {
      get { return pendingOnly_; }
      set {
        pendingOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInvoiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInvoiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PendingOnly != other.PendingOnly) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PendingOnly != false) hash ^= PendingOnly.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PendingOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(PendingOnly);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PendingOnly != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInvoiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.PendingOnly != false) {
        PendingOnly = other.PendingOnly;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PendingOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListInvoiceResponse : pb::IMessage<ListInvoiceResponse> {
    private static readonly pb::MessageParser<ListInvoiceResponse> _parser = new pb::MessageParser<ListInvoiceResponse>(() => new ListInvoiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInvoiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse(ListInvoiceResponse other) : this() {
      invoices_ = other.invoices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse Clone() {
      return new ListInvoiceResponse(this);
    }

    /// <summary>Field number for the "invoices" field.</summary>
    public const int InvoicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Invoice> _repeated_invoices_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Invoice.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Invoice> invoices_ = new pbc::RepeatedField<global::Lnrpc.Invoice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Invoice> Invoices {
      get { return invoices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInvoiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInvoiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!invoices_.Equals(other.invoices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= invoices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      invoices_.WriteTo(output, _repeated_invoices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += invoices_.CalculateSize(_repeated_invoices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInvoiceResponse other) {
      if (other == null) {
        return;
      }
      invoices_.Add(other.invoices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            invoices_.AddEntriesFrom(input, _repeated_invoices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InvoiceSubscription : pb::IMessage<InvoiceSubscription> {
    private static readonly pb::MessageParser<InvoiceSubscription> _parser = new pb::MessageParser<InvoiceSubscription>(() => new InvoiceSubscription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvoiceSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription(InvoiceSubscription other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription Clone() {
      return new InvoiceSubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvoiceSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvoiceSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvoiceSubscription other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Payment : pb::IMessage<Payment> {
    private static readonly pb::MessageParser<Payment> _parser = new pb::MessageParser<Payment>(() => new Payment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment(Payment other) : this() {
      paymentHash_ = other.paymentHash_;
      value_ = other.value_;
      creationDate_ = other.creationDate_;
      path_ = other.path_.Clone();
      fee_ = other.fee_;
      paymentPreimage_ = other.paymentPreimage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment Clone() {
      return new Payment(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private string paymentHash_ = "";
    /// <summary>
    //// The payment hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    /// <summary>
    //// The value of the payment in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "creation_date" field.</summary>
    public const int CreationDateFieldNumber = 3;
    private long creationDate_;
    /// <summary>
    //// The date of this payment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationDate {
      get { return creationDate_; }
      set {
        creationDate_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_path_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> path_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// The path this payment took
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 5;
    private long fee_;
    /// <summary>
    //// The fee paid for this payment in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "payment_preimage" field.</summary>
    public const int PaymentPreimageFieldNumber = 6;
    private string paymentPreimage_ = "";
    /// <summary>
    //// The payment preimage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentPreimage {
      get { return paymentPreimage_; }
      set {
        paymentPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      if (Value != other.Value) return false;
      if (CreationDate != other.CreationDate) return false;
      if(!path_.Equals(other.path_)) return false;
      if (Fee != other.Fee) return false;
      if (PaymentPreimage != other.PaymentPreimage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (CreationDate != 0L) hash ^= CreationDate.GetHashCode();
      hash ^= path_.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (PaymentPreimage.Length != 0) hash ^= PaymentPreimage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentHash);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
      if (CreationDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreationDate);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (Fee != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Fee);
      }
      if (PaymentPreimage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentPreimage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHash);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (CreationDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationDate);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (PaymentPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentPreimage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payment other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.CreationDate != 0L) {
        CreationDate = other.CreationDate;
      }
      path_.Add(other.path_);
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.PaymentPreimage.Length != 0) {
        PaymentPreimage = other.PaymentPreimage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PaymentHash = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
          case 24: {
            CreationDate = input.ReadInt64();
            break;
          }
          case 34: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 40: {
            Fee = input.ReadInt64();
            break;
          }
          case 50: {
            PaymentPreimage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListPaymentsRequest : pb::IMessage<ListPaymentsRequest> {
    private static readonly pb::MessageParser<ListPaymentsRequest> _parser = new pb::MessageParser<ListPaymentsRequest>(() => new ListPaymentsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPaymentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest(ListPaymentsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest Clone() {
      return new ListPaymentsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPaymentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPaymentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPaymentsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListPaymentsResponse : pb::IMessage<ListPaymentsResponse> {
    private static readonly pb::MessageParser<ListPaymentsResponse> _parser = new pb::MessageParser<ListPaymentsResponse>(() => new ListPaymentsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPaymentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse(ListPaymentsResponse other) : this() {
      payments_ = other.payments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse Clone() {
      return new ListPaymentsResponse(this);
    }

    /// <summary>Field number for the "payments" field.</summary>
    public const int PaymentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Payment> _repeated_payments_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Payment.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Payment> payments_ = new pbc::RepeatedField<global::Lnrpc.Payment>();
    /// <summary>
    //// The list of payments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Payment> Payments {
      get { return payments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPaymentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPaymentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!payments_.Equals(other.payments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= payments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      payments_.WriteTo(output, _repeated_payments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += payments_.CalculateSize(_repeated_payments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPaymentsResponse other) {
      if (other == null) {
        return;
      }
      payments_.Add(other.payments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            payments_.AddEntriesFrom(input, _repeated_payments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteAllPaymentsRequest : pb::IMessage<DeleteAllPaymentsRequest> {
    private static readonly pb::MessageParser<DeleteAllPaymentsRequest> _parser = new pb::MessageParser<DeleteAllPaymentsRequest>(() => new DeleteAllPaymentsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAllPaymentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest(DeleteAllPaymentsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest Clone() {
      return new DeleteAllPaymentsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAllPaymentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAllPaymentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAllPaymentsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DeleteAllPaymentsResponse : pb::IMessage<DeleteAllPaymentsResponse> {
    private static readonly pb::MessageParser<DeleteAllPaymentsResponse> _parser = new pb::MessageParser<DeleteAllPaymentsResponse>(() => new DeleteAllPaymentsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAllPaymentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse(DeleteAllPaymentsResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse Clone() {
      return new DeleteAllPaymentsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAllPaymentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAllPaymentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAllPaymentsResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DebugLevelRequest : pb::IMessage<DebugLevelRequest> {
    private static readonly pb::MessageParser<DebugLevelRequest> _parser = new pb::MessageParser<DebugLevelRequest>(() => new DebugLevelRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugLevelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest(DebugLevelRequest other) : this() {
      show_ = other.show_;
      levelSpec_ = other.levelSpec_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest Clone() {
      return new DebugLevelRequest(this);
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 1;
    private bool show_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Show {
      get { return show_; }
      set {
        show_ = value;
      }
    }

    /// <summary>Field number for the "level_spec" field.</summary>
    public const int LevelSpecFieldNumber = 2;
    private string levelSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelSpec {
      get { return levelSpec_; }
      set {
        levelSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugLevelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Show != other.Show) return false;
      if (LevelSpec != other.LevelSpec) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Show != false) hash ^= Show.GetHashCode();
      if (LevelSpec.Length != 0) hash ^= LevelSpec.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Show != false) {
        output.WriteRawTag(8);
        output.WriteBool(Show);
      }
      if (LevelSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LevelSpec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Show != false) {
        size += 1 + 1;
      }
      if (LevelSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelSpec);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugLevelRequest other) {
      if (other == null) {
        return;
      }
      if (other.Show != false) {
        Show = other.Show;
      }
      if (other.LevelSpec.Length != 0) {
        LevelSpec = other.LevelSpec;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Show = input.ReadBool();
            break;
          }
          case 18: {
            LevelSpec = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebugLevelResponse : pb::IMessage<DebugLevelResponse> {
    private static readonly pb::MessageParser<DebugLevelResponse> _parser = new pb::MessageParser<DebugLevelResponse>(() => new DebugLevelResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugLevelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse(DebugLevelResponse other) : this() {
      subSystems_ = other.subSystems_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse Clone() {
      return new DebugLevelResponse(this);
    }

    /// <summary>Field number for the "sub_systems" field.</summary>
    public const int SubSystemsFieldNumber = 1;
    private string subSystems_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubSystems {
      get { return subSystems_; }
      set {
        subSystems_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugLevelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugLevelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubSystems != other.SubSystems) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubSystems.Length != 0) hash ^= SubSystems.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubSystems.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubSystems);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubSystems.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubSystems);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugLevelResponse other) {
      if (other == null) {
        return;
      }
      if (other.SubSystems.Length != 0) {
        SubSystems = other.SubSystems;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubSystems = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PayReqString : pb::IMessage<PayReqString> {
    private static readonly pb::MessageParser<PayReqString> _parser = new pb::MessageParser<PayReqString>(() => new PayReqString());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayReqString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString(PayReqString other) : this() {
      payReq_ = other.payReq_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString Clone() {
      return new PayReqString(this);
    }

    /// <summary>Field number for the "pay_req" field.</summary>
    public const int PayReqFieldNumber = 1;
    private string payReq_ = "";
    /// <summary>
    //// The payment request string to be decoded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayReq {
      get { return payReq_; }
      set {
        payReq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayReqString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayReqString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PayReq != other.PayReq) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PayReq.Length != 0) hash ^= PayReq.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PayReq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PayReq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PayReq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayReq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayReqString other) {
      if (other == null) {
        return;
      }
      if (other.PayReq.Length != 0) {
        PayReq = other.PayReq;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PayReq = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PayReq : pb::IMessage<PayReq> {
    private static readonly pb::MessageParser<PayReq> _parser = new pb::MessageParser<PayReq>(() => new PayReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq(PayReq other) : this() {
      destination_ = other.destination_;
      paymentHash_ = other.paymentHash_;
      numSatoshis_ = other.numSatoshis_;
      timestamp_ = other.timestamp_;
      expiry_ = other.expiry_;
      description_ = other.description_;
      descriptionHash_ = other.descriptionHash_;
      fallbackAddr_ = other.fallbackAddr_;
      cltvExpiry_ = other.cltvExpiry_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq Clone() {
      return new PayReq(this);
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 1;
    private string destination_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destination {
      get { return destination_; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 2;
    private string paymentHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_satoshis" field.</summary>
    public const int NumSatoshisFieldNumber = 3;
    private long numSatoshis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumSatoshis {
      get { return numSatoshis_; }
      set {
        numSatoshis_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 5;
    private long expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description_hash" field.</summary>
    public const int DescriptionHashFieldNumber = 7;
    private string descriptionHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionHash {
      get { return descriptionHash_; }
      set {
        descriptionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallback_addr" field.</summary>
    public const int FallbackAddrFieldNumber = 8;
    private string fallbackAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallbackAddr {
      get { return fallbackAddr_; }
      set {
        fallbackAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_expiry" field.</summary>
    public const int CltvExpiryFieldNumber = 9;
    private long cltvExpiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CltvExpiry {
      get { return cltvExpiry_; }
      set {
        cltvExpiry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destination != other.Destination) return false;
      if (PaymentHash != other.PaymentHash) return false;
      if (NumSatoshis != other.NumSatoshis) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Expiry != other.Expiry) return false;
      if (Description != other.Description) return false;
      if (DescriptionHash != other.DescriptionHash) return false;
      if (FallbackAddr != other.FallbackAddr) return false;
      if (CltvExpiry != other.CltvExpiry) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Destination.Length != 0) hash ^= Destination.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (NumSatoshis != 0L) hash ^= NumSatoshis.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Expiry != 0L) hash ^= Expiry.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (DescriptionHash.Length != 0) hash ^= DescriptionHash.GetHashCode();
      if (FallbackAddr.Length != 0) hash ^= FallbackAddr.GetHashCode();
      if (CltvExpiry != 0L) hash ^= CltvExpiry.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Destination.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentHash);
      }
      if (NumSatoshis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NumSatoshis);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (Expiry != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Expiry);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (DescriptionHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DescriptionHash);
      }
      if (FallbackAddr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FallbackAddr);
      }
      if (CltvExpiry != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CltvExpiry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Destination.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHash);
      }
      if (NumSatoshis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumSatoshis);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Expiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiry);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (DescriptionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionHash);
      }
      if (FallbackAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallbackAddr);
      }
      if (CltvExpiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CltvExpiry);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayReq other) {
      if (other == null) {
        return;
      }
      if (other.Destination.Length != 0) {
        Destination = other.Destination;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.NumSatoshis != 0L) {
        NumSatoshis = other.NumSatoshis;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Expiry != 0L) {
        Expiry = other.Expiry;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.DescriptionHash.Length != 0) {
        DescriptionHash = other.DescriptionHash;
      }
      if (other.FallbackAddr.Length != 0) {
        FallbackAddr = other.FallbackAddr;
      }
      if (other.CltvExpiry != 0L) {
        CltvExpiry = other.CltvExpiry;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            PaymentHash = input.ReadString();
            break;
          }
          case 24: {
            NumSatoshis = input.ReadInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 40: {
            Expiry = input.ReadInt64();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            DescriptionHash = input.ReadString();
            break;
          }
          case 66: {
            FallbackAddr = input.ReadString();
            break;
          }
          case 72: {
            CltvExpiry = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeeReportRequest : pb::IMessage<FeeReportRequest> {
    private static readonly pb::MessageParser<FeeReportRequest> _parser = new pb::MessageParser<FeeReportRequest>(() => new FeeReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeeReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest(FeeReportRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest Clone() {
      return new FeeReportRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeeReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeeReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeeReportRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ChannelFeeReport : pb::IMessage<ChannelFeeReport> {
    private static readonly pb::MessageParser<ChannelFeeReport> _parser = new pb::MessageParser<ChannelFeeReport>(() => new ChannelFeeReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelFeeReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport(ChannelFeeReport other) : this() {
      chanPoint_ = other.chanPoint_;
      baseFeeMsat_ = other.baseFeeMsat_;
      feePerMil_ = other.feePerMil_;
      feeRate_ = other.feeRate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport Clone() {
      return new ChannelFeeReport(this);
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 1;
    private string chanPoint_ = "";
    /// <summary>
    //// The channel that this fee report belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_fee_msat" field.</summary>
    public const int BaseFeeMsatFieldNumber = 2;
    private long baseFeeMsat_;
    /// <summary>
    //// The base fee charged regardless of the number of milli-satoshis sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseFeeMsat {
      get { return baseFeeMsat_; }
      set {
        baseFeeMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_mil" field.</summary>
    public const int FeePerMilFieldNumber = 3;
    private long feePerMil_;
    /// <summary>
    //// The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeePerMil {
      get { return feePerMil_; }
      set {
        feePerMil_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 4;
    private double feeRate_;
    /// <summary>
    //// The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelFeeReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelFeeReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanPoint != other.ChanPoint) return false;
      if (BaseFeeMsat != other.BaseFeeMsat) return false;
      if (FeePerMil != other.FeePerMil) return false;
      if (FeeRate != other.FeeRate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanPoint.Length != 0) hash ^= ChanPoint.GetHashCode();
      if (BaseFeeMsat != 0L) hash ^= BaseFeeMsat.GetHashCode();
      if (FeePerMil != 0L) hash ^= FeePerMil.GetHashCode();
      if (FeeRate != 0D) hash ^= FeeRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanPoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BaseFeeMsat);
      }
      if (FeePerMil != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FeePerMil);
      }
      if (FeeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FeeRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseFeeMsat);
      }
      if (FeePerMil != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerMil);
      }
      if (FeeRate != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelFeeReport other) {
      if (other == null) {
        return;
      }
      if (other.ChanPoint.Length != 0) {
        ChanPoint = other.ChanPoint;
      }
      if (other.BaseFeeMsat != 0L) {
        BaseFeeMsat = other.BaseFeeMsat;
      }
      if (other.FeePerMil != 0L) {
        FeePerMil = other.FeePerMil;
      }
      if (other.FeeRate != 0D) {
        FeeRate = other.FeeRate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChanPoint = input.ReadString();
            break;
          }
          case 16: {
            BaseFeeMsat = input.ReadInt64();
            break;
          }
          case 24: {
            FeePerMil = input.ReadInt64();
            break;
          }
          case 33: {
            FeeRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeeReportResponse : pb::IMessage<FeeReportResponse> {
    private static readonly pb::MessageParser<FeeReportResponse> _parser = new pb::MessageParser<FeeReportResponse>(() => new FeeReportResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeeReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse(FeeReportResponse other) : this() {
      channelFees_ = other.channelFees_.Clone();
      dayFeeSum_ = other.dayFeeSum_;
      weekFeeSum_ = other.weekFeeSum_;
      monthFeeSum_ = other.monthFeeSum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse Clone() {
      return new FeeReportResponse(this);
    }

    /// <summary>Field number for the "channel_fees" field.</summary>
    public const int ChannelFeesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelFeeReport> _repeated_channelFees_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelFeeReport.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelFeeReport> channelFees_ = new pbc::RepeatedField<global::Lnrpc.ChannelFeeReport>();
    /// <summary>
    //// An array of channel fee reports which describes the current fee schedule for each channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelFeeReport> ChannelFees {
      get { return channelFees_; }
    }

    /// <summary>Field number for the "day_fee_sum" field.</summary>
    public const int DayFeeSumFieldNumber = 2;
    private ulong dayFeeSum_;
    /// <summary>
    //// The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DayFeeSum {
      get { return dayFeeSum_; }
      set {
        dayFeeSum_ = value;
      }
    }

    /// <summary>Field number for the "week_fee_sum" field.</summary>
    public const int WeekFeeSumFieldNumber = 3;
    private ulong weekFeeSum_;
    /// <summary>
    //// The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WeekFeeSum {
      get { return weekFeeSum_; }
      set {
        weekFeeSum_ = value;
      }
    }

    /// <summary>Field number for the "month_fee_sum" field.</summary>
    public const int MonthFeeSumFieldNumber = 4;
    private ulong monthFeeSum_;
    /// <summary>
    //// The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MonthFeeSum {
      get { return monthFeeSum_; }
      set {
        monthFeeSum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeeReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeeReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelFees_.Equals(other.channelFees_)) return false;
      if (DayFeeSum != other.DayFeeSum) return false;
      if (WeekFeeSum != other.WeekFeeSum) return false;
      if (MonthFeeSum != other.MonthFeeSum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelFees_.GetHashCode();
      if (DayFeeSum != 0UL) hash ^= DayFeeSum.GetHashCode();
      if (WeekFeeSum != 0UL) hash ^= WeekFeeSum.GetHashCode();
      if (MonthFeeSum != 0UL) hash ^= MonthFeeSum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channelFees_.WriteTo(output, _repeated_channelFees_codec);
      if (DayFeeSum != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DayFeeSum);
      }
      if (WeekFeeSum != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(WeekFeeSum);
      }
      if (MonthFeeSum != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MonthFeeSum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channelFees_.CalculateSize(_repeated_channelFees_codec);
      if (DayFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DayFeeSum);
      }
      if (WeekFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WeekFeeSum);
      }
      if (MonthFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MonthFeeSum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeeReportResponse other) {
      if (other == null) {
        return;
      }
      channelFees_.Add(other.channelFees_);
      if (other.DayFeeSum != 0UL) {
        DayFeeSum = other.DayFeeSum;
      }
      if (other.WeekFeeSum != 0UL) {
        WeekFeeSum = other.WeekFeeSum;
      }
      if (other.MonthFeeSum != 0UL) {
        MonthFeeSum = other.MonthFeeSum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            channelFees_.AddEntriesFrom(input, _repeated_channelFees_codec);
            break;
          }
          case 16: {
            DayFeeSum = input.ReadUInt64();
            break;
          }
          case 24: {
            WeekFeeSum = input.ReadUInt64();
            break;
          }
          case 32: {
            MonthFeeSum = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PolicyUpdateRequest : pb::IMessage<PolicyUpdateRequest> {
    private static readonly pb::MessageParser<PolicyUpdateRequest> _parser = new pb::MessageParser<PolicyUpdateRequest>(() => new PolicyUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest(PolicyUpdateRequest other) : this() {
      baseFeeMsat_ = other.baseFeeMsat_;
      feeRate_ = other.feeRate_;
      timeLockDelta_ = other.timeLockDelta_;
      switch (other.ScopeCase) {
        case ScopeOneofCase.Global:
          Global = other.Global;
          break;
        case ScopeOneofCase.ChanPoint:
          ChanPoint = other.ChanPoint.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest Clone() {
      return new PolicyUpdateRequest(this);
    }

    /// <summary>Field number for the "global" field.</summary>
    public const int GlobalFieldNumber = 1;
    /// <summary>
    //// If set, then this update applies to all currently active channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Global {
      get { return scopeCase_ == ScopeOneofCase.Global ? (bool) scope_ : false; }
      set {
        scope_ = value;
        scopeCase_ = ScopeOneofCase.Global;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    /// <summary>
    //// If set, this update will target a specific channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return scopeCase_ == ScopeOneofCase.ChanPoint ? (global::Lnrpc.ChannelPoint) scope_ : null; }
      set {
        scope_ = value;
        scopeCase_ = value == null ? ScopeOneofCase.None : ScopeOneofCase.ChanPoint;
      }
    }

    /// <summary>Field number for the "base_fee_msat" field.</summary>
    public const int BaseFeeMsatFieldNumber = 3;
    private long baseFeeMsat_;
    /// <summary>
    //// The base fee charged regardless of the number of milli-satoshis sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseFeeMsat {
      get { return baseFeeMsat_; }
      set {
        baseFeeMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 4;
    private double feeRate_;
    /// <summary>
    //// The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = value;
      }
    }

    /// <summary>Field number for the "time_lock_delta" field.</summary>
    public const int TimeLockDeltaFieldNumber = 5;
    private uint timeLockDelta_;
    /// <summary>
    //// The required timelock delta for HTLCs forwarded over the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeLockDelta {
      get { return timeLockDelta_; }
      set {
        timeLockDelta_ = value;
      }
    }

    private object scope_;
    /// <summary>Enum of possible cases for the "scope" oneof.</summary>
    public enum ScopeOneofCase {
      None = 0,
      Global = 1,
      ChanPoint = 2,
    }
    private ScopeOneofCase scopeCase_ = ScopeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeOneofCase ScopeCase {
      get { return scopeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScope() {
      scopeCase_ = ScopeOneofCase.None;
      scope_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Global != other.Global) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (BaseFeeMsat != other.BaseFeeMsat) return false;
      if (FeeRate != other.FeeRate) return false;
      if (TimeLockDelta != other.TimeLockDelta) return false;
      if (ScopeCase != other.ScopeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scopeCase_ == ScopeOneofCase.Global) hash ^= Global.GetHashCode();
      if (scopeCase_ == ScopeOneofCase.ChanPoint) hash ^= ChanPoint.GetHashCode();
      if (BaseFeeMsat != 0L) hash ^= BaseFeeMsat.GetHashCode();
      if (FeeRate != 0D) hash ^= FeeRate.GetHashCode();
      if (TimeLockDelta != 0) hash ^= TimeLockDelta.GetHashCode();
      hash ^= (int) scopeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scopeCase_ == ScopeOneofCase.Global) {
        output.WriteRawTag(8);
        output.WriteBool(Global);
      }
      if (scopeCase_ == ScopeOneofCase.ChanPoint) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BaseFeeMsat);
      }
      if (FeeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FeeRate);
      }
      if (TimeLockDelta != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeLockDelta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scopeCase_ == ScopeOneofCase.Global) {
        size += 1 + 1;
      }
      if (scopeCase_ == ScopeOneofCase.ChanPoint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseFeeMsat);
      }
      if (FeeRate != 0D) {
        size += 1 + 8;
      }
      if (TimeLockDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLockDelta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.BaseFeeMsat != 0L) {
        BaseFeeMsat = other.BaseFeeMsat;
      }
      if (other.FeeRate != 0D) {
        FeeRate = other.FeeRate;
      }
      if (other.TimeLockDelta != 0) {
        TimeLockDelta = other.TimeLockDelta;
      }
      switch (other.ScopeCase) {
        case ScopeOneofCase.Global:
          Global = other.Global;
          break;
        case ScopeOneofCase.ChanPoint:
          if (ChanPoint == null) {
            ChanPoint = new global::Lnrpc.ChannelPoint();
          }
          ChanPoint.MergeFrom(other.ChanPoint);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Global = input.ReadBool();
            break;
          }
          case 18: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (scopeCase_ == ScopeOneofCase.ChanPoint) {
              subBuilder.MergeFrom(ChanPoint);
            }
            input.ReadMessage(subBuilder);
            ChanPoint = subBuilder;
            break;
          }
          case 24: {
            BaseFeeMsat = input.ReadInt64();
            break;
          }
          case 33: {
            FeeRate = input.ReadDouble();
            break;
          }
          case 40: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PolicyUpdateResponse : pb::IMessage<PolicyUpdateResponse> {
    private static readonly pb::MessageParser<PolicyUpdateResponse> _parser = new pb::MessageParser<PolicyUpdateResponse>(() => new PolicyUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse(PolicyUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse Clone() {
      return new PolicyUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ForwardingHistoryRequest : pb::IMessage<ForwardingHistoryRequest> {
    private static readonly pb::MessageParser<ForwardingHistoryRequest> _parser = new pb::MessageParser<ForwardingHistoryRequest>(() => new ForwardingHistoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingHistoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest(ForwardingHistoryRequest other) : this() {
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      indexOffset_ = other.indexOffset_;
      numMaxEvents_ = other.numMaxEvents_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest Clone() {
      return new ForwardingHistoryRequest(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private ulong startTime_;
    /// <summary>
    //// Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private ulong endTime_;
    /// <summary>
    //// End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "index_offset" field.</summary>
    public const int IndexOffsetFieldNumber = 3;
    private uint indexOffset_;
    /// <summary>
    //// Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndexOffset {
      get { return indexOffset_; }
      set {
        indexOffset_ = value;
      }
    }

    /// <summary>Field number for the "num_max_events" field.</summary>
    public const int NumMaxEventsFieldNumber = 4;
    private uint numMaxEvents_;
    /// <summary>
    //// The max number of events to return in the response to this query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumMaxEvents {
      get { return numMaxEvents_; }
      set {
        numMaxEvents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingHistoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingHistoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (IndexOffset != other.IndexOffset) return false;
      if (NumMaxEvents != other.NumMaxEvents) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (IndexOffset != 0) hash ^= IndexOffset.GetHashCode();
      if (NumMaxEvents != 0) hash ^= NumMaxEvents.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StartTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EndTime);
      }
      if (IndexOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IndexOffset);
      }
      if (NumMaxEvents != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumMaxEvents);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (IndexOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexOffset);
      }
      if (NumMaxEvents != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumMaxEvents);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingHistoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.IndexOffset != 0) {
        IndexOffset = other.IndexOffset;
      }
      if (other.NumMaxEvents != 0) {
        NumMaxEvents = other.NumMaxEvents;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 24: {
            IndexOffset = input.ReadUInt32();
            break;
          }
          case 32: {
            NumMaxEvents = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForwardingEvent : pb::IMessage<ForwardingEvent> {
    private static readonly pb::MessageParser<ForwardingEvent> _parser = new pb::MessageParser<ForwardingEvent>(() => new ForwardingEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent(ForwardingEvent other) : this() {
      timestamp_ = other.timestamp_;
      chanIdIn_ = other.chanIdIn_;
      chanIdOut_ = other.chanIdOut_;
      amtIn_ = other.amtIn_;
      amtOut_ = other.amtOut_;
      fee_ = other.fee_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent Clone() {
      return new ForwardingEvent(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    /// <summary>
    //// Timestamp is the time (unix epoch offset) that this circuit was completed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "chan_id_in" field.</summary>
    public const int ChanIdInFieldNumber = 2;
    private ulong chanIdIn_;
    /// <summary>
    //// The incoming channel ID that carried the HTLC that created the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanIdIn {
      get { return chanIdIn_; }
      set {
        chanIdIn_ = value;
      }
    }

    /// <summary>Field number for the "chan_id_out" field.</summary>
    public const int ChanIdOutFieldNumber = 4;
    private ulong chanIdOut_;
    /// <summary>
    //// The outgoing channel ID that carried the preimage that completed the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanIdOut {
      get { return chanIdOut_; }
      set {
        chanIdOut_ = value;
      }
    }

    /// <summary>Field number for the "amt_in" field.</summary>
    public const int AmtInFieldNumber = 5;
    private ulong amtIn_;
    /// <summary>
    //// The total amount of the incoming HTLC that created half the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtIn {
      get { return amtIn_; }
      set {
        amtIn_ = value;
      }
    }

    /// <summary>Field number for the "amt_out" field.</summary>
    public const int AmtOutFieldNumber = 6;
    private ulong amtOut_;
    /// <summary>
    //// The total amount of the outgoign HTLC that created the second half of the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtOut {
      get { return amtOut_; }
      set {
        amtOut_ = value;
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 7;
    private ulong fee_;
    /// <summary>
    //// The total fee that this payment circuit carried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ChanIdIn != other.ChanIdIn) return false;
      if (ChanIdOut != other.ChanIdOut) return false;
      if (AmtIn != other.AmtIn) return false;
      if (AmtOut != other.AmtOut) return false;
      if (Fee != other.Fee) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (ChanIdIn != 0UL) hash ^= ChanIdIn.GetHashCode();
      if (ChanIdOut != 0UL) hash ^= ChanIdOut.GetHashCode();
      if (AmtIn != 0UL) hash ^= AmtIn.GetHashCode();
      if (AmtOut != 0UL) hash ^= AmtOut.GetHashCode();
      if (Fee != 0UL) hash ^= Fee.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (ChanIdIn != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanIdIn);
      }
      if (ChanIdOut != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChanIdOut);
      }
      if (AmtIn != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(AmtIn);
      }
      if (AmtOut != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AmtOut);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Fee);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (ChanIdIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanIdIn);
      }
      if (ChanIdOut != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanIdOut);
      }
      if (AmtIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtIn);
      }
      if (AmtOut != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtOut);
      }
      if (Fee != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fee);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingEvent other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.ChanIdIn != 0UL) {
        ChanIdIn = other.ChanIdIn;
      }
      if (other.ChanIdOut != 0UL) {
        ChanIdOut = other.ChanIdOut;
      }
      if (other.AmtIn != 0UL) {
        AmtIn = other.AmtIn;
      }
      if (other.AmtOut != 0UL) {
        AmtOut = other.AmtOut;
      }
      if (other.Fee != 0UL) {
        Fee = other.Fee;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            ChanIdIn = input.ReadUInt64();
            break;
          }
          case 32: {
            ChanIdOut = input.ReadUInt64();
            break;
          }
          case 40: {
            AmtIn = input.ReadUInt64();
            break;
          }
          case 48: {
            AmtOut = input.ReadUInt64();
            break;
          }
          case 56: {
            Fee = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForwardingHistoryResponse : pb::IMessage<ForwardingHistoryResponse> {
    private static readonly pb::MessageParser<ForwardingHistoryResponse> _parser = new pb::MessageParser<ForwardingHistoryResponse>(() => new ForwardingHistoryResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingHistoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse(ForwardingHistoryResponse other) : this() {
      forwardingEvents_ = other.forwardingEvents_.Clone();
      lastOffsetIndex_ = other.lastOffsetIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse Clone() {
      return new ForwardingHistoryResponse(this);
    }

    /// <summary>Field number for the "forwarding_events" field.</summary>
    public const int ForwardingEventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ForwardingEvent> _repeated_forwardingEvents_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ForwardingEvent.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ForwardingEvent> forwardingEvents_ = new pbc::RepeatedField<global::Lnrpc.ForwardingEvent>();
    /// <summary>
    //// A list of forwarding events from the time slice of the time series specified in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ForwardingEvent> ForwardingEvents {
      get { return forwardingEvents_; }
    }

    /// <summary>Field number for the "last_offset_index" field.</summary>
    public const int LastOffsetIndexFieldNumber = 2;
    private uint lastOffsetIndex_;
    /// <summary>
    //// The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastOffsetIndex {
      get { return lastOffsetIndex_; }
      set {
        lastOffsetIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingHistoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingHistoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!forwardingEvents_.Equals(other.forwardingEvents_)) return false;
      if (LastOffsetIndex != other.LastOffsetIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= forwardingEvents_.GetHashCode();
      if (LastOffsetIndex != 0) hash ^= LastOffsetIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      forwardingEvents_.WriteTo(output, _repeated_forwardingEvents_codec);
      if (LastOffsetIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastOffsetIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += forwardingEvents_.CalculateSize(_repeated_forwardingEvents_codec);
      if (LastOffsetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastOffsetIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingHistoryResponse other) {
      if (other == null) {
        return;
      }
      forwardingEvents_.Add(other.forwardingEvents_);
      if (other.LastOffsetIndex != 0) {
        LastOffsetIndex = other.LastOffsetIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            forwardingEvents_.AddEntriesFrom(input, _repeated_forwardingEvents_codec);
            break;
          }
          case 16: {
            LastOffsetIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
